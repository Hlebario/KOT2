
KOT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c40  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08008dc8  08008dc8  00009dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f38  08008f38  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008f38  08008f38  00009f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f40  08008f40  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f40  08008f40  00009f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f44  08008f44  00009f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008f48  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a070  2**0
                  CONTENTS
 10 .bss          000003d8  20000070  20000070  0000a070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000448  20000448  0000a070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd36  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc3  00000000  00000000  00019dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  0001bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4c  00000000  00000000  0001cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212b5  00000000  00000000  0001d954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cd6  00000000  00000000  0003ec09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd88f  00000000  00000000  000518df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f16e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a78  00000000  00000000  0011f1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00123c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008db0 	.word	0x08008db0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08008db0 	.word	0x08008db0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <PCA9685_SetBit>:
#define PCA9685_MODE1_SLEEP_BIT      4    // as in the datasheet page no 14/52
#define PCA9685_MODE1_AI_BIT         5    // as in the datasheet page no 14/52
#define PCA9685_MODE1_RESTART_BIT    7    // as in the datasheet page no 14/52

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	230a      	movs	r3, #10
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	f107 030f 	add.w	r3, r7, #15
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	2180      	movs	r1, #128	@ 0x80
 8000e58:	4819      	ldr	r0, [pc, #100]	@ (8000ec0 <PCA9685_SetBit+0x90>)
 8000e5a:	f002 fe61 	bl	8003b20 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 8000e5e:	797b      	ldrb	r3, [r7, #5]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10d      	bne.n	8000e80 <PCA9685_SetBit+0x50>
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2201      	movs	r2, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	b25a      	sxtb	r2, r3
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	4013      	ands	r3, r2
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e00a      	b.n	8000e96 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	2201      	movs	r2, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2180      	movs	r1, #128	@ 0x80
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <PCA9685_SetBit+0x90>)
 8000eae:	f002 fd3d 	bl	800392c <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f001 fd16 	bl	80028e4 <HAL_Delay>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000008c 	.word	0x2000008c

08000ec4 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af04      	add	r7, sp, #16
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03;
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d902      	bls.n	8000ede <PCA9685_SetPWMFrequency+0x1a>
 8000ed8:	2303      	movs	r3, #3
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e00c      	b.n	8000ef8 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b18      	cmp	r3, #24
 8000ee2:	d802      	bhi.n	8000eea <PCA9685_SetPWMFrequency+0x26>
 8000ee4:	23ff      	movs	r3, #255	@ 0xff
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e006      	b.n	8000ef8 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	031b      	lsls	r3, r3, #12
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <PCA9685_SetPWMFrequency+0x74>)
 8000ef0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2104      	movs	r1, #4
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ff97 	bl	8000e30 <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000f02:	230a      	movs	r3, #10
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2301      	movs	r3, #1
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f107 030f 	add.w	r3, r7, #15
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	22fe      	movs	r2, #254	@ 0xfe
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <PCA9685_SetPWMFrequency+0x78>)
 8000f18:	f002 fd08 	bl	800392c <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ff85 	bl	8000e30 <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2107      	movs	r1, #7
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff ff80 	bl	8000e30 <PCA9685_SetBit>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	017d7840 	.word	0x017d7840
 8000f3c:	2000008c 	.word	0x2000008c

08000f40 <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffb9 	bl	8000ec4 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2105      	movs	r1, #5
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ff6a 	bl	8000e30 <PCA9685_SetBit>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2304      	movs	r3, #4
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <PCA9685_SetPWM+0x60>)
 8000fb8:	f002 fcb8 	bl	800392c <HAL_I2C_Mem_Write>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000008c 	.word	0x2000008c

08000fc8 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	ed87 0a00 	vstr	s0, [r7]
 8000fd4:	71fb      	strb	r3, [r7, #7]
  float Value;
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f7ff fa5a 	bl	8000490 <__aeabi_f2d>
 8000fdc:	a31b      	add	r3, pc, #108	@ (adr r3, 800104c <PCA9685_SetServoAngle+0x84>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff faad 	bl	8000540 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <PCA9685_SetServoAngle+0x80>)
 8000ff4:	f7ff fbce 	bl	8000794 <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	a30f      	add	r3, pc, #60	@ (adr r3, 8001040 <PCA9685_SetServoAngle+0x78>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff f8e5 	bl	80001d4 <__adddf3>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fd45 	bl	8000aa0 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 800101a:	edd7 7a03 	vldr	s15, [r7, #12]
 800101e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001022:	ee17 3a90 	vmov	r3, s15
 8001026:	b29a      	uxth	r2, r3
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff99 	bl	8000f64 <PCA9685_SetPWM>
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	9999999a 	.word	0x9999999a
 8001044:	40599999 	.word	0x40599999
 8001048:	40668000 	.word	0x40668000
 800104c:	00000000 	.word	0x00000000
 8001050:	40799800 	.word	0x40799800

08001054 <HAL_UART_RxCpltCallback>:
	}
}

/////////////////////////////////// полный буфер ///////////////////////////////////////
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	  if(huart == &huart1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d11d      	bne.n	80010a0 <HAL_UART_RxCpltCallback+0x4c>
	  {
		  __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8001064:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0210 	bic.w	r2, r2, #16
 8001072:	60da      	str	r2, [r3, #12]
		  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)"Full buffer\n", 12);
		  HAL_UART_AbortReceive(&huart1);
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001076:	f004 fd69 	bl	8005b4c <HAL_UART_AbortReceive>
		  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0210 	orr.w	r2, r2, #16
 800109e:	60da      	str	r2, [r3, #12]
		  //ReciveToServo((uint8_t*)rx_buff);////////////////////////////////////////////////////////
	  }
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000200 	.word	0x20000200

080010ac <HAL_UART_ErrorCallback>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// ErrorCallback //////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a51      	ldr	r2, [pc, #324]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	f040 809b 	bne.w	80011f4 <HAL_UART_ErrorCallback+0x148>
	{
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80010be:	4b4f      	ldr	r3, [pc, #316]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0210 	bic.w	r2, r2, #16
 80010cc:	60da      	str	r2, [r3, #12]
		uint32_t er = HAL_UART_GetError(&huart1);
 80010ce:	484b      	ldr	r0, [pc, #300]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010d0:	f005 f9b0 	bl	8006434 <HAL_UART_GetError>
 80010d4:	61f8      	str	r0, [r7, #28]
		HAL_UART_Abort_IT(&huart1);
 80010d6:	4849      	ldr	r0, [pc, #292]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010d8:	f004 fddc 	bl	8005c94 <HAL_UART_Abort_IT>

		switch(er)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3b01      	subs	r3, #1
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	f200 8086 	bhi.w	80011f2 <HAL_UART_ErrorCallback+0x146>
 80010e6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ec <HAL_UART_ErrorCallback+0x40>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	0800112d 	.word	0x0800112d
 80010f0:	08001159 	.word	0x08001159
 80010f4:	080011f3 	.word	0x080011f3
 80010f8:	08001185 	.word	0x08001185
 80010fc:	080011f3 	.word	0x080011f3
 8001100:	080011f3 	.word	0x080011f3
 8001104:	080011f3 	.word	0x080011f3
 8001108:	080011b1 	.word	0x080011b1
 800110c:	080011f3 	.word	0x080011f3
 8001110:	080011f3 	.word	0x080011f3
 8001114:	080011f3 	.word	0x080011f3
 8001118:	080011f3 	.word	0x080011f3
 800111c:	080011f3 	.word	0x080011f3
 8001120:	080011f3 	.word	0x080011f3
 8001124:	080011f3 	.word	0x080011f3
 8001128:	080011dd 	.word	0x080011dd
		{
			case HAL_UART_ERROR_PE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Parity error\n", 27, 1000);
 800112c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001130:	221b      	movs	r2, #27
 8001132:	4933      	ldr	r1, [pc, #204]	@ (8001200 <HAL_UART_ErrorCallback+0x154>)
 8001134:	4831      	ldr	r0, [pc, #196]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001136:	f004 fc59 	bl	80059ec <HAL_UART_Transmit>
				__HAL_UART_CLEAR_PEFLAG(&huart1);
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69bb      	ldr	r3, [r7, #24]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 8001156:	e04d      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_NE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Noise error\n", 26, 1000);
 8001158:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115c:	221a      	movs	r2, #26
 800115e:	4929      	ldr	r1, [pc, #164]	@ (8001204 <HAL_UART_ErrorCallback+0x158>)
 8001160:	4826      	ldr	r0, [pc, #152]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001162:	f004 fc43 	bl	80059ec <HAL_UART_Transmit>
				__HAL_UART_CLEAR_NEFLAG(&huart1);
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 8001182:	e037      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_FE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Frame error\n", 26, 1000);
 8001184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001188:	221a      	movs	r2, #26
 800118a:	491f      	ldr	r1, [pc, #124]	@ (8001208 <HAL_UART_ErrorCallback+0x15c>)
 800118c:	481b      	ldr	r0, [pc, #108]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 800118e:	f004 fc2d 	bl	80059ec <HAL_UART_Transmit>
				__HAL_UART_CLEAR_FEFLAG(&huart1);
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 80011ae:	e021      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_ORE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Overrun error\n", 28, 1000);
 80011b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b4:	221c      	movs	r2, #28
 80011b6:	4915      	ldr	r1, [pc, #84]	@ (800120c <HAL_UART_ErrorCallback+0x160>)
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80011ba:	f004 fc17 	bl	80059ec <HAL_UART_Transmit>
				__HAL_UART_CLEAR_OREFLAG(huart);
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 80011da:	e00b      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_DMA:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - DMA transfer error\n", 33, 1000);
 80011dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e0:	2221      	movs	r2, #33	@ 0x21
 80011e2:	490b      	ldr	r1, [pc, #44]	@ (8001210 <HAL_UART_ErrorCallback+0x164>)
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80011e6:	f004 fc01 	bl	80059ec <HAL_UART_Transmit>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 80011f0:	e000      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			default:
			break;
 80011f2:	bf00      	nop
		}
	}

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000200 	.word	0x20000200
 8001200:	08008e08 	.word	0x08008e08
 8001204:	08008e24 	.word	0x08008e24
 8001208:	08008e40 	.word	0x08008e40
 800120c:	08008e5c 	.word	0x08008e5c
 8001210:	08008e7c 	.word	0x08008e7c
 8001214:	00000000 	.word	0x00000000

08001218 <getTheta>:

float getTheta(int joint, float X, float Y, float Z)
{
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	ed87 0a02 	vstr	s0, [r7, #8]
 8001226:	edc7 0a01 	vstr	s1, [r7, #4]
 800122a:	ed87 1a00 	vstr	s2, [r7]
	float L = 0;
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
	float angle = 0;
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	617b      	str	r3, [r7, #20]

	L = pow(X, 2) + pow(Y, 2) + pow(Z, 2);
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f7ff f928 	bl	8000490 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 80014e8 <getTheta+0x2d0>
 8001248:	ec43 2b10 	vmov	d0, r2, r3
 800124c:	f006 f824 	bl	8007298 <pow>
 8001250:	ec55 4b10 	vmov	r4, r5, d0
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff f91b 	bl	8000490 <__aeabi_f2d>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	ed9f 1ba2 	vldr	d1, [pc, #648]	@ 80014e8 <getTheta+0x2d0>
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f006 f817 	bl	8007298 <pow>
 800126a:	ec53 2b10 	vmov	r2, r3, d0
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7fe ffaf 	bl	80001d4 <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4614      	mov	r4, r2
 800127c:	461d      	mov	r5, r3
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f7ff f906 	bl	8000490 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 80014e8 <getTheta+0x2d0>
 800128c:	ec43 2b10 	vmov	d0, r2, r3
 8001290:	f006 f802 	bl	8007298 <pow>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7fe ff9a 	bl	80001d4 <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fbfa 	bl	8000aa0 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	613b      	str	r3, [r7, #16]
	//calculates abad, hip, or knee angle
	switch (joint)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	f000 80db 	beq.w	800146e <getTheta+0x256>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	f300 80fd 	bgt.w	80014ba <getTheta+0x2a2>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <getTheta+0xb6>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d05a      	beq.n	8001382 <getTheta+0x16a>
 80012cc:	e0f5      	b.n	80014ba <getTheta+0x2a2>
	{
    case 0:  //abad
      angle = atan(X / Z) + acos(a / (sqrt(pow(X, 2) + pow(Z, 2))));
 80012ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d2:	edd7 7a00 	vldr	s15, [r7]
 80012d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012da:	ee16 0a90 	vmov	r0, s13
 80012de:	f7ff f8d7 	bl	8000490 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	ec43 2b10 	vmov	d0, r2, r3
 80012ea:	f006 f871 	bl	80073d0 <atan>
 80012ee:	ec55 4b10 	vmov	r4, r5, d0
 80012f2:	68b8      	ldr	r0, [r7, #8]
 80012f4:	f7ff f8cc 	bl	8000490 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 80014e8 <getTheta+0x2d0>
 8001300:	ec43 2b10 	vmov	d0, r2, r3
 8001304:	f005 ffc8 	bl	8007298 <pow>
 8001308:	ec59 8b10 	vmov	r8, r9, d0
 800130c:	6838      	ldr	r0, [r7, #0]
 800130e:	f7ff f8bf 	bl	8000490 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 80014e8 <getTheta+0x2d0>
 800131a:	ec43 2b10 	vmov	d0, r2, r3
 800131e:	f005 ffbb 	bl	8007298 <pow>
 8001322:	ec53 2b10 	vmov	r2, r3, d0
 8001326:	4640      	mov	r0, r8
 8001328:	4649      	mov	r1, r9
 800132a:	f7fe ff53 	bl	80001d4 <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ec43 2b17 	vmov	d7, r2, r3
 8001336:	eeb0 0a47 	vmov.f32	s0, s14
 800133a:	eef0 0a67 	vmov.f32	s1, s15
 800133e:	f006 f81b 	bl	8007378 <sqrt>
 8001342:	ec53 2b10 	vmov	r2, r3, d0
 8001346:	a171      	add	r1, pc, #452	@ (adr r1, 800150c <getTheta+0x2f4>)
 8001348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800134c:	f7ff fa22 	bl	8000794 <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	ec43 2b17 	vmov	d7, r2, r3
 8001358:	eeb0 0a47 	vmov.f32	s0, s14
 800135c:	eef0 0a67 	vmov.f32	s1, s15
 8001360:	f005 ff32 	bl	80071c8 <acos>
 8001364:	ec53 2b10 	vmov	r2, r3, d0
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7fe ff32 	bl	80001d4 <__adddf3>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fb92 	bl	8000aa0 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	617b      	str	r3, [r7, #20]
      break;
 8001380:	e09b      	b.n	80014ba <getTheta+0x2a2>
    case 1:  //hip
      angle = (PI / 2) - asin(-Y / sqrt(L - pow(a, 2))) - acos((pow(b, 2) - pow(a, 2) - pow(c, 2) + L) / (2 * b * sqrt(L - pow(a, 2))));
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f884 	bl	8000490 <__aeabi_f2d>
 8001388:	4604      	mov	r4, r0
 800138a:	460d      	mov	r5, r1
 800138c:	6938      	ldr	r0, [r7, #16]
 800138e:	f7ff f87f 	bl	8000490 <__aeabi_f2d>
 8001392:	a360      	add	r3, pc, #384	@ (adr r3, 8001514 <getTheta+0x2fc>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7fe ff1a 	bl	80001d0 <__aeabi_dsub>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b17 	vmov	d7, r2, r3
 80013a4:	eeb0 0a47 	vmov.f32	s0, s14
 80013a8:	eef0 0a67 	vmov.f32	s1, s15
 80013ac:	f005 ffe4 	bl	8007378 <sqrt>
 80013b0:	ec53 2b10 	vmov	r2, r3, d0
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff f9ec 	bl	8000794 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	ec43 2b17 	vmov	d7, r2, r3
 80013c4:	eeb0 0a47 	vmov.f32	s0, s14
 80013c8:	eef0 0a67 	vmov.f32	s1, s15
 80013cc:	f005 ff30 	bl	8007230 <asin>
 80013d0:	ec51 0b10 	vmov	r0, r1, d0
 80013d4:	a351      	add	r3, pc, #324	@ (adr r3, 800151c <getTheta+0x304>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7fe fefb 	bl	80001d4 <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4614      	mov	r4, r2
 80013e4:	461d      	mov	r5, r3
 80013e6:	6938      	ldr	r0, [r7, #16]
 80013e8:	f7ff f852 	bl	8000490 <__aeabi_f2d>
 80013ec:	a349      	add	r3, pc, #292	@ (adr r3, 8001514 <getTheta+0x2fc>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7fe feed 	bl	80001d0 <__aeabi_dsub>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4690      	mov	r8, r2
 80013fc:	4699      	mov	r9, r3
 80013fe:	6938      	ldr	r0, [r7, #16]
 8001400:	f7ff f846 	bl	8000490 <__aeabi_f2d>
 8001404:	a343      	add	r3, pc, #268	@ (adr r3, 8001514 <getTheta+0x2fc>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7fe fee1 	bl	80001d0 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	ec43 2b17 	vmov	d7, r2, r3
 8001416:	eeb0 0a47 	vmov.f32	s0, s14
 800141a:	eef0 0a67 	vmov.f32	s1, s15
 800141e:	f005 ffab 	bl	8007378 <sqrt>
 8001422:	ec51 0b10 	vmov	r0, r1, d0
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b37      	ldr	r3, [pc, #220]	@ (8001508 <getTheta+0x2f0>)
 800142c:	f7ff f888 	bl	8000540 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4640      	mov	r0, r8
 8001436:	4649      	mov	r1, r9
 8001438:	f7ff f9ac 	bl	8000794 <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ec43 2b17 	vmov	d7, r2, r3
 8001444:	eeb0 0a47 	vmov.f32	s0, s14
 8001448:	eef0 0a67 	vmov.f32	s1, s15
 800144c:	f005 febc 	bl	80071c8 <acos>
 8001450:	ec53 2b10 	vmov	r2, r3, d0
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe feba 	bl	80001d0 <__aeabi_dsub>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb1c 	bl	8000aa0 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	617b      	str	r3, [r7, #20]
      break;
 800146c:	e025      	b.n	80014ba <getTheta+0x2a2>
    case 2:  //knee
      angle = acos((pow(a, 2) + pow(b, 2) + pow(c, 2) - L) / (2 * b * c));
 800146e:	6938      	ldr	r0, [r7, #16]
 8001470:	f7ff f80e 	bl	8000490 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	a11d      	add	r1, pc, #116	@ (adr r1, 80014f0 <getTheta+0x2d8>)
 800147a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800147e:	f7fe fea7 	bl	80001d0 <__aeabi_dsub>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	a31b      	add	r3, pc, #108	@ (adr r3, 80014f8 <getTheta+0x2e0>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f980 	bl	8000794 <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	ec43 2b17 	vmov	d7, r2, r3
 800149c:	eeb0 0a47 	vmov.f32	s0, s14
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	f005 fe90 	bl	80071c8 <acos>
 80014a8:	ec53 2b10 	vmov	r2, r3, d0
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff faf6 	bl	8000aa0 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	617b      	str	r3, [r7, #20]
      break;
 80014b8:	bf00      	nop
	}
	else
	{
		return (angle * (180 / PI));
	}*/
	return (angle * (180 / PI));
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7fe ffe8 	bl	8000490 <__aeabi_f2d>
 80014c0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001500 <getTheta+0x2e8>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f83b 	bl	8000540 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fae5 	bl	8000aa0 <__aeabi_d2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	ee07 3a90 	vmov	s15, r3
    //converts angle to degrees and returns the value
}
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40000000 	.word	0x40000000
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40f20024 	.word	0x40f20024
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40efa400 	.word	0x40efa400
 8001500:	1a635ba1 	.word	0x1a635ba1
 8001504:	404ca5dc 	.word	0x404ca5dc
 8001508:	40768000 	.word	0x40768000
 800150c:	00000000 	.word	0x00000000
 8001510:	4057a000 	.word	0x4057a000
 8001514:	00000000 	.word	0x00000000
 8001518:	40c17120 	.word	0x40c17120
 800151c:	544486e0 	.word	0x544486e0
 8001520:	3ff921fb 	.word	0x3ff921fb

08001524 <moveTOPS>:
//Fun. for calculation angle legs and transmit at fun. UpdatePosition
void moveTOPS(float X0, float Y0, float Z0,    //FL leg
              float X1, float Y1, float Z1,    //FR leg
              float X2, float Y2, float Z2,    //BL leg
              float X3, float Y3, float Z3)	   //BR leg
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b09c      	sub	sp, #112	@ 0x70
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 800152e:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 8001532:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 8001536:	edc7 1a08 	vstr	s3, [r7, #32]
 800153a:	ed87 2a07 	vstr	s4, [r7, #28]
 800153e:	edc7 2a06 	vstr	s5, [r7, #24]
 8001542:	ed87 3a05 	vstr	s6, [r7, #20]
 8001546:	edc7 3a04 	vstr	s7, [r7, #16]
 800154a:	ed87 4a03 	vstr	s8, [r7, #12]
 800154e:	edc7 4a02 	vstr	s9, [r7, #8]
 8001552:	ed87 5a01 	vstr	s10, [r7, #4]
 8001556:	edc7 5a00 	vstr	s11, [r7]
  float relPos = 0;                                //odrive relative position
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	667b      	str	r3, [r7, #100]	@ 0x64
  //X, Y, Z positions of each foot
  float pos[4][3] = { { X0, Y0, Z0 },    //FL leg
 8001560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001562:	637b      	str	r3, [r7, #52]	@ 0x34
 8001564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001566:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	647b      	str	r3, [r7, #68]	@ 0x44
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	657b      	str	r3, [r7, #84]	@ 0x54
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	663b      	str	r3, [r7, #96]	@ 0x60
                      { X1, Y1, Z1 },    //FR leg
                      { X2, Y2, Z2 },    //BL leg
                      { X3, Y3, Z3 } };  //BR leg
  //move each actuator
  for (int i = 0; i < 4; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001594:	e044      	b.n	8001620 <moveTOPS+0xfc>
  {                                                  //cycle through each leg (FL, FR, BL, BR)
    for (int j = 0; j < 3; j++)
 8001596:	2300      	movs	r3, #0
 8001598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800159a:	e03b      	b.n	8001614 <moveTOPS+0xf0>
    {
    	//cycle through each legs joints (abad, hip, knee)
    	relPos = getTheta(j, pos[i][0], pos[i][1], pos[i][2]);// - offset[i][j];  //calculate relative joint position and make positive
 800159c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	3370      	adds	r3, #112	@ 0x70
 80015a8:	443b      	add	r3, r7
 80015aa:	3b3c      	subs	r3, #60	@ 0x3c
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3370      	adds	r3, #112	@ 0x70
 80015bc:	443b      	add	r3, r7
 80015be:	3b38      	subs	r3, #56	@ 0x38
 80015c0:	ed93 7a00 	vldr	s14, [r3]
 80015c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	3370      	adds	r3, #112	@ 0x70
 80015d0:	443b      	add	r3, r7
 80015d2:	3b34      	subs	r3, #52	@ 0x34
 80015d4:	edd3 6a00 	vldr	s13, [r3]
 80015d8:	eeb0 1a66 	vmov.f32	s2, s13
 80015dc:	eef0 0a47 	vmov.f32	s1, s14
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80015e6:	f7ff fe17 	bl	8001218 <getTheta>
 80015ea:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
    	}
    	else
    	{
    		UpdatePosition(i * 3 + j, 180 - relPos);
    	}*/
    	UpdatePosition(i * 3 + j, relPos);
 80015ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	441a      	add	r2, r3
 80015f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015f8:	4413      	add	r3, r2
 80015fa:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fa10 	bl	8001a24 <UpdatePosition>
    	HAL_UART_Receive_DMA(&huart1, rx_buff, 1);
 8001604:	2201      	movs	r2, #1
 8001606:	490a      	ldr	r1, [pc, #40]	@ (8001630 <moveTOPS+0x10c>)
 8001608:	480a      	ldr	r0, [pc, #40]	@ (8001634 <moveTOPS+0x110>)
 800160a:	f004 fa7a 	bl	8005b02 <HAL_UART_Receive_DMA>
    for (int j = 0; j < 3; j++)
 800160e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001610:	3301      	adds	r3, #1
 8001612:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001616:	2b02      	cmp	r3, #2
 8001618:	ddc0      	ble.n	800159c <moveTOPS+0x78>
  for (int i = 0; i < 4; i++)
 800161a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800161c:	3301      	adds	r3, #1
 800161e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001622:	2b03      	cmp	r3, #3
 8001624:	ddb7      	ble.n	8001596 <moveTOPS+0x72>
    }
  }
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	3770      	adds	r7, #112	@ 0x70
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000308 	.word	0x20000308
 8001634:	20000200 	.word	0x20000200

08001638 <step>:
           normX, normYB, normZ);  //BR
  HAL_Delay(150);
}

void step()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
  int normYF = -50;
 800163e:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8001642:	61fb      	str	r3, [r7, #28]
  int normYB = -50;//-110
 8001644:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8001648:	61bb      	str	r3, [r7, #24]
  int offset = 200;//100
 800164a:	23c8      	movs	r3, #200	@ 0xc8
 800164c:	617b      	str	r3, [r7, #20]
  int offsetY = 300;
 800164e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001652:	613b      	str	r3, [r7, #16]
  int time = 160;
 8001654:	23a0      	movs	r3, #160	@ 0xa0
 8001656:	60fb      	str	r3, [r7, #12]
  int normX = 110;
 8001658:	236e      	movs	r3, #110	@ 0x6e
 800165a:	60bb      	str	r3, [r7, #8]
  int normZ = 300;
 800165c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001660:	607b      	str	r3, [r7, #4]
  moveTOPS(normX, normYF, normZ - offset,   //FL
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	ee07 3a10 	vmov	s14, r3
 8001672:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	ee06 3a90 	vmov	s13, r3
 8001680:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	ee06 3a10 	vmov	s12, r3
 800168a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	ee05 3a90 	vmov	s11, r3
 8001694:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	ee05 3a90 	vmov	s11, r3
 800169e:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	ee05 3a90 	vmov	s11, r3
 80016a8:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	ee05 3a90 	vmov	s11, r3
 80016b2:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	ee05 3a90 	vmov	s11, r3
 80016bc:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	ee05 3a90 	vmov	s11, r3
 80016c6:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	ee05 3a90 	vmov	s11, r3
 80016d0:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYF, normZ,                 //FR
           normX, normYB, normZ,                 //BL
           normX, normYB, normZ - offset);  //BR
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ - offset,   //FL
 80016da:	ee05 3a90 	vmov	s11, r3
 80016de:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80016e2:	eef0 1a46 	vmov.f32	s3, s12
 80016e6:	eeb0 1a66 	vmov.f32	s2, s13
 80016ea:	eef0 0a47 	vmov.f32	s1, s14
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	f7ff ff17 	bl	8001524 <moveTOPS>
  HAL_Delay(time);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 f8f3 	bl	80028e4 <HAL_Delay>
  moveTOPS(normX, normYF + offsetY, normZ - offset,                           //FL
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4413      	add	r3, r2
 800170e:	ee07 3a10 	vmov	s14, r3
 8001712:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	ee06 3a90 	vmov	s13, r3
 8001720:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	ee06 3a10 	vmov	s12, r3
 800172a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	ee05 3a90 	vmov	s11, r3
 8001734:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	ee05 3a90 	vmov	s11, r3
 800173e:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	ee05 3a90 	vmov	s11, r3
 8001748:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	ee05 3a90 	vmov	s11, r3
 8001752:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	ee05 3a90 	vmov	s11, r3
 800175c:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	ee05 3a90 	vmov	s11, r3
 8001766:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                                             //FR
           normX, normYB, normZ,                                                             //BL
           normX, normYB + offsetY, normZ - offset);  //BR
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY, normZ - offset,                           //FL
 8001770:	ee05 3a90 	vmov	s11, r3
 8001774:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYB + offsetY, normZ - offset);  //BR
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF + offsetY, normZ - offset,                           //FL
 800177e:	ee05 3a90 	vmov	s11, r3
 8001782:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001786:	eef0 1a46 	vmov.f32	s3, s12
 800178a:	eeb0 1a66 	vmov.f32	s2, s13
 800178e:	eef0 0a47 	vmov.f32	s1, s14
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	f7ff fec5 	bl	8001524 <moveTOPS>
  HAL_Delay(time);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4618      	mov	r0, r3
 800179e:	f001 f8a1 	bl	80028e4 <HAL_Delay>
  moveTOPS(normX, normYF + offsetY, normZ,                           //FL
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4413      	add	r3, r2
 80017b2:	ee07 3a10 	vmov	s14, r3
 80017b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	ee06 3a90 	vmov	s13, r3
 80017c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	ee06 3a10 	vmov	s12, r3
 80017ca:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	ee05 3a90 	vmov	s11, r3
 80017d4:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	ee05 3a90 	vmov	s11, r3
 80017de:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	ee05 3a90 	vmov	s11, r3
 80017e8:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	ee05 3a90 	vmov	s11, r3
 80017f2:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	ee05 3a90 	vmov	s11, r3
 80017fc:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	ee05 3a90 	vmov	s11, r3
 8001806:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                               //FR
           normX, normYB, normZ,                                               //BL
           normX, normYB + offsetY, normZ);  //BR
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY, normZ,                           //FL
 8001810:	ee05 3a90 	vmov	s11, r3
 8001814:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	ee05 3a90 	vmov	s11, r3
 800181e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001822:	eef0 1a46 	vmov.f32	s3, s12
 8001826:	eeb0 1a66 	vmov.f32	s2, s13
 800182a:	eef0 0a47 	vmov.f32	s1, s14
 800182e:	eeb0 0a67 	vmov.f32	s0, s15
 8001832:	f7ff fe77 	bl	8001524 <moveTOPS>
  HAL_Delay(time);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4618      	mov	r0, r3
 800183a:	f001 f853 	bl	80028e4 <HAL_Delay>
  moveTOPS(normX, normYF, normZ,                //FL
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	ee07 3a10 	vmov	s14, r3
 800184e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	ee06 3a90 	vmov	s13, r3
 8001858:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	ee06 3a10 	vmov	s12, r3
 8001862:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	ee05 3a90 	vmov	s11, r3
 800186c:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF, normZ - offset,  //FR
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                //FL
 8001876:	ee05 3a90 	vmov	s11, r3
 800187a:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	ee05 3a90 	vmov	s11, r3
 8001884:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	ee05 3a90 	vmov	s11, r3
 800188e:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB, normZ - offset,  //BL
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                //FL
 8001898:	ee05 3a90 	vmov	s11, r3
 800189c:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	ee05 3a90 	vmov	s11, r3
 80018a6:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	ee05 3a90 	vmov	s11, r3
 80018b0:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	ee05 3a90 	vmov	s11, r3
 80018ba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80018be:	eef0 1a46 	vmov.f32	s3, s12
 80018c2:	eeb0 1a66 	vmov.f32	s2, s13
 80018c6:	eef0 0a47 	vmov.f32	s1, s14
 80018ca:	eeb0 0a67 	vmov.f32	s0, s15
 80018ce:	f7ff fe29 	bl	8001524 <moveTOPS>
           normX, normYB, normZ);               //BR
  HAL_Delay(time);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 f805 	bl	80028e4 <HAL_Delay>
  moveTOPS(normX, normYF, normZ,                                                            //FL
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	ee07 3a10 	vmov	s14, r3
 80018ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	ee06 3a90 	vmov	s13, r3
 80018f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	ee06 3a10 	vmov	s12, r3
 80018fe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY, normZ - offset,  //FR
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001908:	ee05 3a90 	vmov	s11, r3
 800190c:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF + offsetY, normZ - offset,  //FR
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001916:	ee05 3a90 	vmov	s11, r3
 800191a:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	ee05 3a90 	vmov	s11, r3
 8001924:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY, normZ - offset,                          //BL
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 800192e:	ee05 3a90 	vmov	s11, r3
 8001932:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB + offsetY, normZ - offset,                          //BL
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                                                            //FL
 800193c:	ee05 3a90 	vmov	s11, r3
 8001940:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	ee05 3a90 	vmov	s11, r3
 800194a:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	ee05 3a90 	vmov	s11, r3
 8001954:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	ee05 3a90 	vmov	s11, r3
 800195e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001962:	eef0 1a46 	vmov.f32	s3, s12
 8001966:	eeb0 1a66 	vmov.f32	s2, s13
 800196a:	eef0 0a47 	vmov.f32	s1, s14
 800196e:	eeb0 0a67 	vmov.f32	s0, s15
 8001972:	f7ff fdd7 	bl	8001524 <moveTOPS>
           normX, normYB, normZ);                                                           //BR
  HAL_Delay(time);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 ffb3 	bl	80028e4 <HAL_Delay>
  moveTOPS(normX, normYF, normZ,                                              //FL
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	ee07 3a10 	vmov	s14, r3
 800198e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	ee06 3a90 	vmov	s13, r3
 8001998:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	ee06 3a10 	vmov	s12, r3
 80019a2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY, normZ,  //FR
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 80019ac:	ee05 3a90 	vmov	s11, r3
 80019b0:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	ee05 3a90 	vmov	s11, r3
 80019ba:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	ee05 3a90 	vmov	s11, r3
 80019c4:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY, normZ,                          //BL
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 80019ce:	ee05 3a90 	vmov	s11, r3
 80019d2:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	ee05 3a90 	vmov	s11, r3
 80019dc:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	ee05 3a90 	vmov	s11, r3
 80019e6:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	ee05 3a90 	vmov	s11, r3
 80019f0:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	ee05 3a90 	vmov	s11, r3
 80019fa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80019fe:	eef0 1a46 	vmov.f32	s3, s12
 8001a02:	eeb0 1a66 	vmov.f32	s2, s13
 8001a06:	eef0 0a47 	vmov.f32	s1, s14
 8001a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0e:	f7ff fd89 	bl	8001524 <moveTOPS>
           normX, normYB, normZ);                                             //BR
  HAL_Delay(time);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 ff65 	bl	80028e4 <HAL_Delay>
}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <UpdatePosition>:
	  HAL_Delay(time);
}

//void UpdatePosition(float theta_abad, float theta_hip, float theta_knee)
void UpdatePosition(int j, float relPos)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	ed87 0a00 	vstr	s0, [r7]
	    //TIM2->CCR1=Pulse_length;
	    //return 0;
//abad плечо
//hip бедро
//knee колено
	switch(j)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b0b      	cmp	r3, #11
 8001a34:	f200 80a0 	bhi.w	8001b78 <UpdatePosition+0x154>
 8001a38:	a201      	add	r2, pc, #4	@ (adr r2, 8001a40 <UpdatePosition+0x1c>)
 8001a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3e:	bf00      	nop
 8001a40:	08001a71 	.word	0x08001a71
 8001a44:	08001a89 	.word	0x08001a89
 8001a48:	08001aa1 	.word	0x08001aa1
 8001a4c:	08001ab9 	.word	0x08001ab9
 8001a50:	08001ac5 	.word	0x08001ac5
 8001a54:	08001add 	.word	0x08001add
 8001a58:	08001af5 	.word	0x08001af5
 8001a5c:	08001b0d 	.word	0x08001b0d
 8001a60:	08001b25 	.word	0x08001b25
 8001a64:	08001b3d 	.word	0x08001b3d
 8001a68:	08001b49 	.word	0x08001b49
 8001a6c:	08001b61 	.word	0x08001b61
	{
	//Передняя левая
	case 0:
	PCA9685_SetServoAngle(0, relPos - 25);
 8001a70:	edd7 7a00 	vldr	s15, [r7]
 8001a74:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001a78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff faa1 	bl	8000fc8 <PCA9685_SetServoAngle>
		///TIM2 ->CCR1 = relPos + 750 - 50;//плечо
		break;
 8001a86:	e077      	b.n	8001b78 <UpdatePosition+0x154>
	case 1:
	PCA9685_SetServoAngle(1, relPos + 135);
 8001a88:	edd7 7a00 	vldr	s15, [r7]
 8001a8c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001b80 <UpdatePosition+0x15c>
 8001a90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a94:	eeb0 0a67 	vmov.f32	s0, s15
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff fa95 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM2 ->CCR2 = relPos + 750 - 300;//бедро
		break;
 8001a9e:	e06b      	b.n	8001b78 <UpdatePosition+0x154>
	case 2:
	PCA9685_SetServoAngle(2, relPos - 70);
 8001aa0:	edd7 7a00 	vldr	s15, [r7]
 8001aa4:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001b84 <UpdatePosition+0x160>
 8001aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f7ff fa89 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM2 ->CCR3 = relPos + 750;//колено 1300 200
		break;
 8001ab6:	e05f      	b.n	8001b78 <UpdatePosition+0x154>
	//Предняя правая
	case 3:
	PCA9685_SetServoAngle(3, relPos);
 8001ab8:	ed97 0a00 	vldr	s0, [r7]
 8001abc:	2003      	movs	r0, #3
 8001abe:	f7ff fa83 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM2 ->CCR4 = relPos + 750 - 470;
		break;
 8001ac2:	e059      	b.n	8001b78 <UpdatePosition+0x154>
	case 4:
	PCA9685_SetServoAngle(4, relPos + 15);
 8001ac4:	edd7 7a00 	vldr	s15, [r7]
 8001ac8:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	2004      	movs	r0, #4
 8001ad6:	f7ff fa77 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR1 = relPos + 750 - 30;
		break;
 8001ada:	e04d      	b.n	8001b78 <UpdatePosition+0x154>
	case 5:
	PCA9685_SetServoAngle(5, relPos + 25);
 8001adc:	edd7 7a00 	vldr	s15, [r7]
 8001ae0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001ae4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	2005      	movs	r0, #5
 8001aee:	f7ff fa6b 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR2 = relPos + 750 - 250;
		break;
 8001af2:	e041      	b.n	8001b78 <UpdatePosition+0x154>
	//Звдняя левая
	case 6:
	PCA9685_SetServoAngle(6, relPos - 10);
 8001af4:	edd7 7a00 	vldr	s15, [r7]
 8001af8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001afc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b00:	eeb0 0a67 	vmov.f32	s0, s15
 8001b04:	2006      	movs	r0, #6
 8001b06:	f7ff fa5f 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR3 = relPos + 750 - 150;
		break;
 8001b0a:	e035      	b.n	8001b78 <UpdatePosition+0x154>
	case 7:
	PCA9685_SetServoAngle(7, relPos + 70);
 8001b0c:	edd7 7a00 	vldr	s15, [r7]
 8001b10:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001b84 <UpdatePosition+0x160>
 8001b14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b18:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1c:	2007      	movs	r0, #7
 8001b1e:	f7ff fa53 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR4 = relPos + 750 + 250;
		break;
 8001b22:	e029      	b.n	8001b78 <UpdatePosition+0x154>
	case 8:
	PCA9685_SetServoAngle(8, relPos - 75);
 8001b24:	edd7 7a00 	vldr	s15, [r7]
 8001b28:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001b88 <UpdatePosition+0x164>
 8001b2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b30:	eeb0 0a67 	vmov.f32	s0, s15
 8001b34:	2008      	movs	r0, #8
 8001b36:	f7ff fa47 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM4 ->CCR1 = relPos + 750 - 600;
		break;
 8001b3a:	e01d      	b.n	8001b78 <UpdatePosition+0x154>
	//Задняя правая
	case 9:
	PCA9685_SetServoAngle(9, relPos);
 8001b3c:	ed97 0a00 	vldr	s0, [r7]
 8001b40:	2009      	movs	r0, #9
 8001b42:	f7ff fa41 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM4 ->CCR2 = relPos + 750 - 350;
		break;
 8001b46:	e017      	b.n	8001b78 <UpdatePosition+0x154>
	case 10:
	PCA9685_SetServoAngle(10, relPos - 20);
 8001b48:	edd7 7a00 	vldr	s15, [r7]
 8001b4c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001b50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b54:	eeb0 0a67 	vmov.f32	s0, s15
 8001b58:	200a      	movs	r0, #10
 8001b5a:	f7ff fa35 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM4 ->CCR3 = relPos + 750 - 450;
		break;
 8001b5e:	e00b      	b.n	8001b78 <UpdatePosition+0x154>
	case 11:
	PCA9685_SetServoAngle(11, relPos - 20);
 8001b60:	edd7 7a00 	vldr	s15, [r7]
 8001b64:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b70:	200b      	movs	r0, #11
 8001b72:	f7ff fa29 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM5 ->CCR1 = relPos + 750 + 200;
		//TIM4 ->CCR1 = relPos + 750;
		break;
 8001b76:	bf00      	nop

	TIM4 ->CCR2 = theta_abad_PWM;
	TIM4 ->CCR3 = 0;
	TIM4 ->CCR4 = 0;*/
	    //TIM2 ->CCR1 = 900;
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	43070000 	.word	0x43070000
 8001b84:	428c0000 	.word	0x428c0000
 8001b88:	42960000 	.word	0x42960000

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b90:	f000 fe36 	bl	8002800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b94:	f000 f868 	bl	8001c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b98:	f000 fb18 	bl	80021cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b9c:	f000 faee 	bl	800217c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ba0:	f000 fac2 	bl	8002128 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001ba4:	f000 f8f8 	bl	8001d98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ba8:	f000 f970 	bl	8001e8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001bac:	f000 f9e8 	bl	8001f80 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001bb0:	f000 fa60 	bl	8002074 <MX_TIM5_Init>
  MX_I2C1_Init();
 8001bb4:	f000 f8c2 	bl	8001d3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  /*I2C1------------------------------------------------------------------------*/
  PCA9685_Init(50); // 50Hz for servo
 8001bb8:	2032      	movs	r0, #50	@ 0x32
 8001bba:	f7ff f9c1 	bl	8000f40 <PCA9685_Init>





  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001bbe:	4b23      	ldr	r3, [pc, #140]	@ (8001c4c <main+0xc0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <main+0xc0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0210 	orr.w	r2, r2, #16
 8001bcc:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, rx_buff, bufferUART);
 8001bce:	4b20      	ldr	r3, [pc, #128]	@ (8001c50 <main+0xc4>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	491f      	ldr	r1, [pc, #124]	@ (8001c54 <main+0xc8>)
 8001bd6:	481d      	ldr	r0, [pc, #116]	@ (8001c4c <main+0xc0>)
 8001bd8:	f003 ff93 	bl	8005b02 <HAL_UART_Receive_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);///////////////////////////////////////////////////////////////////////////////////
 8001bdc:	2100      	movs	r1, #0
 8001bde:	481e      	ldr	r0, [pc, #120]	@ (8001c58 <main+0xcc>)
 8001be0:	f003 fa2c 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001be4:	2104      	movs	r1, #4
 8001be6:	481c      	ldr	r0, [pc, #112]	@ (8001c58 <main+0xcc>)
 8001be8:	f003 fa28 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001bec:	2108      	movs	r1, #8
 8001bee:	481a      	ldr	r0, [pc, #104]	@ (8001c58 <main+0xcc>)
 8001bf0:	f003 fa24 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001bf4:	210c      	movs	r1, #12
 8001bf6:	4818      	ldr	r0, [pc, #96]	@ (8001c58 <main+0xcc>)
 8001bf8:	f003 fa20 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4817      	ldr	r0, [pc, #92]	@ (8001c5c <main+0xd0>)
 8001c00:	f003 fa1c 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c04:	2104      	movs	r1, #4
 8001c06:	4815      	ldr	r0, [pc, #84]	@ (8001c5c <main+0xd0>)
 8001c08:	f003 fa18 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001c0c:	2108      	movs	r1, #8
 8001c0e:	4813      	ldr	r0, [pc, #76]	@ (8001c5c <main+0xd0>)
 8001c10:	f003 fa14 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c14:	210c      	movs	r1, #12
 8001c16:	4811      	ldr	r0, [pc, #68]	@ (8001c5c <main+0xd0>)
 8001c18:	f003 fa10 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4810      	ldr	r0, [pc, #64]	@ (8001c60 <main+0xd4>)
 8001c20:	f003 fa0c 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001c24:	2104      	movs	r1, #4
 8001c26:	480e      	ldr	r0, [pc, #56]	@ (8001c60 <main+0xd4>)
 8001c28:	f003 fa08 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c2c:	2108      	movs	r1, #8
 8001c2e:	480c      	ldr	r0, [pc, #48]	@ (8001c60 <main+0xd4>)
 8001c30:	f003 fa04 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001c34:	210c      	movs	r1, #12
 8001c36:	480a      	ldr	r0, [pc, #40]	@ (8001c60 <main+0xd4>)
 8001c38:	f003 fa00 	bl	800503c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <main+0xd8>)
 8001c40:	f003 f9fc 	bl	800503c <HAL_TIM_PWM_Start>
	        PCA9685_SetServoAngle(9, 36);
	        PCA9685_SetServoAngle(11, 72);
	        PCA9685_SetServoAngle(13, 108);
	        PCA9685_SetServoAngle(15, 144);
	        HAL_Delay(1000);*/
	  step();
 8001c44:	f7ff fcf8 	bl	8001638 <step>
 8001c48:	e7fc      	b.n	8001c44 <main+0xb8>
 8001c4a:	bf00      	nop
 8001c4c:	20000200 	.word	0x20000200
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000308 	.word	0x20000308
 8001c58:	200000e0 	.word	0x200000e0
 8001c5c:	20000128 	.word	0x20000128
 8001c60:	20000170 	.word	0x20000170
 8001c64:	200001b8 	.word	0x200001b8

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b094      	sub	sp, #80	@ 0x50
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 0320 	add.w	r3, r7, #32
 8001c72:	2230      	movs	r2, #48	@ 0x30
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f005 fa74 	bl	8007164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <SystemClock_Config+0xcc>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	4a27      	ldr	r2, [pc, #156]	@ (8001d34 <SystemClock_Config+0xcc>)
 8001c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9c:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <SystemClock_Config+0xcc>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	4b22      	ldr	r3, [pc, #136]	@ (8001d38 <SystemClock_Config+0xd0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <SystemClock_Config+0xd0>)
 8001cb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <SystemClock_Config+0xd0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ccc:	2310      	movs	r3, #16
 8001cce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001cd8:	2310      	movs	r3, #16
 8001cda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001cdc:	23c0      	movs	r3, #192	@ 0xc0
 8001cde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 fcfd 	bl	80046ec <HAL_RCC_OscConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cf8:	f000 fa9e 	bl	8002238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d00:	2302      	movs	r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2103      	movs	r1, #3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 ff5e 	bl	8004bdc <HAL_RCC_ClockConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d26:	f000 fa87 	bl	8002238 <Error_Handler>
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3750      	adds	r7, #80	@ 0x50
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40007000 	.word	0x40007000

08001d3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <MX_I2C1_Init+0x54>)
 8001d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d48:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <MX_I2C1_Init+0x58>)
 8001d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d7a:	f001 fc93 	bl	80036a4 <HAL_I2C_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d84:	f000 fa58 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	2000008c 	.word	0x2000008c
 8001d90:	40005400 	.word	0x40005400
 8001d94:	000186a0 	.word	0x000186a0

08001d98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	@ 0x28
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dba:	4b33      	ldr	r3, [pc, #204]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001dbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001dc4:	225f      	movs	r2, #95	@ 0x5f
 8001dc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10100;
 8001dce:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001dd0:	f242 7274 	movw	r2, #10100	@ 0x2774
 8001dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001de2:	4829      	ldr	r0, [pc, #164]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001de4:	f003 f8da 	bl	8004f9c <HAL_TIM_PWM_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001dee:	f000 fa23 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dfa:	f107 0320 	add.w	r3, r7, #32
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4821      	ldr	r0, [pc, #132]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001e02:	f003 fd27 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001e0c:	f000 fa14 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e10:	2360      	movs	r3, #96	@ 0x60
 8001e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	4619      	mov	r1, r3
 8001e26:	4818      	ldr	r0, [pc, #96]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001e28:	f003 f9d0 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001e32:	f000 fa01 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4812      	ldr	r0, [pc, #72]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001e3e:	f003 f9c5 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e48:	f000 f9f6 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2208      	movs	r2, #8
 8001e50:	4619      	mov	r1, r3
 8001e52:	480d      	ldr	r0, [pc, #52]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001e54:	f003 f9ba 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001e5e:	f000 f9eb 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	220c      	movs	r2, #12
 8001e66:	4619      	mov	r1, r3
 8001e68:	4807      	ldr	r0, [pc, #28]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001e6a:	f003 f9af 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001e74:	f000 f9e0 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e78:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <MX_TIM2_Init+0xf0>)
 8001e7a:	f000 fab5 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	@ 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200000e0 	.word	0x200000e0

08001e8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	615a      	str	r2, [r3, #20]
 8001eac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eae:	4b32      	ldr	r3, [pc, #200]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001eb0:	4a32      	ldr	r2, [pc, #200]	@ (8001f7c <MX_TIM3_Init+0xf0>)
 8001eb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8001eb4:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001eb6:	225f      	movs	r2, #95	@ 0x5f
 8001eb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b2f      	ldr	r3, [pc, #188]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10100;
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001ec2:	f242 7274 	movw	r2, #10100	@ 0x2774
 8001ec6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b2a      	ldr	r3, [pc, #168]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ed4:	4828      	ldr	r0, [pc, #160]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001ed6:	f003 f861 	bl	8004f9c <HAL_TIM_PWM_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ee0:	f000 f9aa 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4821      	ldr	r0, [pc, #132]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001ef4:	f003 fcae 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001efe:	f000 f99b 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f02:	2360      	movs	r3, #96	@ 0x60
 8001f04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	4817      	ldr	r0, [pc, #92]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001f1a:	f003 f957 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001f24:	f000 f988 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4812      	ldr	r0, [pc, #72]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001f30:	f003 f94c 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f3a:	f000 f97d 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2208      	movs	r2, #8
 8001f42:	4619      	mov	r1, r3
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001f46:	f003 f941 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001f50:	f000 f972 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	220c      	movs	r2, #12
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4807      	ldr	r0, [pc, #28]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001f5c:	f003 f936 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001f66:	f000 f967 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f6a:	4803      	ldr	r0, [pc, #12]	@ (8001f78 <MX_TIM3_Init+0xec>)
 8001f6c:	f000 fa3c 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	@ 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000128 	.word	0x20000128
 8001f7c:	40000400 	.word	0x40000400

08001f80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	@ 0x28
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f86:	f107 0320 	add.w	r3, r7, #32
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	615a      	str	r2, [r3, #20]
 8001fa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fa2:	4b32      	ldr	r3, [pc, #200]	@ (800206c <MX_TIM4_Init+0xec>)
 8001fa4:	4a32      	ldr	r2, [pc, #200]	@ (8002070 <MX_TIM4_Init+0xf0>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8001fa8:	4b30      	ldr	r3, [pc, #192]	@ (800206c <MX_TIM4_Init+0xec>)
 8001faa:	225f      	movs	r2, #95	@ 0x5f
 8001fac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b2f      	ldr	r3, [pc, #188]	@ (800206c <MX_TIM4_Init+0xec>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10100;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <MX_TIM4_Init+0xec>)
 8001fb6:	f242 7274 	movw	r2, #10100	@ 0x2774
 8001fba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <MX_TIM4_Init+0xec>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <MX_TIM4_Init+0xec>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fc8:	4828      	ldr	r0, [pc, #160]	@ (800206c <MX_TIM4_Init+0xec>)
 8001fca:	f002 ffe7 	bl	8004f9c <HAL_TIM_PWM_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001fd4:	f000 f930 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fe0:	f107 0320 	add.w	r3, r7, #32
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4821      	ldr	r0, [pc, #132]	@ (800206c <MX_TIM4_Init+0xec>)
 8001fe8:	f003 fc34 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001ff2:	f000 f921 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff6:	2360      	movs	r3, #96	@ 0x60
 8001ff8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2200      	movs	r2, #0
 800200a:	4619      	mov	r1, r3
 800200c:	4817      	ldr	r0, [pc, #92]	@ (800206c <MX_TIM4_Init+0xec>)
 800200e:	f003 f8dd 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002018:	f000 f90e 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	2204      	movs	r2, #4
 8002020:	4619      	mov	r1, r3
 8002022:	4812      	ldr	r0, [pc, #72]	@ (800206c <MX_TIM4_Init+0xec>)
 8002024:	f003 f8d2 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800202e:	f000 f903 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2208      	movs	r2, #8
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <MX_TIM4_Init+0xec>)
 800203a:	f003 f8c7 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002044:	f000 f8f8 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	220c      	movs	r2, #12
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	@ (800206c <MX_TIM4_Init+0xec>)
 8002050:	f003 f8bc 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800205a:	f000 f8ed 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800205e:	4803      	ldr	r0, [pc, #12]	@ (800206c <MX_TIM4_Init+0xec>)
 8002060:	f000 f9c2 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	@ 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000170 	.word	0x20000170
 8002070:	40000800 	.word	0x40000800

08002074 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	@ 0x28
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207a:	f107 0320 	add.w	r3, r7, #32
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	615a      	str	r2, [r3, #20]
 8002094:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002096:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <MX_TIM5_Init+0xac>)
 8002098:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <MX_TIM5_Init+0xb0>)
 800209a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 800209c:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <MX_TIM5_Init+0xac>)
 800209e:	225f      	movs	r2, #95	@ 0x5f
 80020a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <MX_TIM5_Init+0xac>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10100;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <MX_TIM5_Init+0xac>)
 80020aa:	f242 7274 	movw	r2, #10100	@ 0x2774
 80020ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <MX_TIM5_Init+0xac>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <MX_TIM5_Init+0xac>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020bc:	4818      	ldr	r0, [pc, #96]	@ (8002120 <MX_TIM5_Init+0xac>)
 80020be:	f002 ff6d 	bl	8004f9c <HAL_TIM_PWM_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80020c8:	f000 f8b6 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020d4:	f107 0320 	add.w	r3, r7, #32
 80020d8:	4619      	mov	r1, r3
 80020da:	4811      	ldr	r0, [pc, #68]	@ (8002120 <MX_TIM5_Init+0xac>)
 80020dc:	f003 fbba 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80020e6:	f000 f8a7 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ea:	2360      	movs	r3, #96	@ 0x60
 80020ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	4619      	mov	r1, r3
 8002100:	4807      	ldr	r0, [pc, #28]	@ (8002120 <MX_TIM5_Init+0xac>)
 8002102:	f003 f863 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800210c:	f000 f894 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002110:	4803      	ldr	r0, [pc, #12]	@ (8002120 <MX_TIM5_Init+0xac>)
 8002112:	f000 f969 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 8002116:	bf00      	nop
 8002118:	3728      	adds	r7, #40	@ 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001b8 	.word	0x200001b8
 8002124:	40000c00 	.word	0x40000c00

08002128 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <MX_USART1_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002160:	f003 fbf4 	bl	800594c <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 f865 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000200 	.word	0x20000200
 8002178:	40011000 	.word	0x40011000

0800217c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <MX_DMA_Init+0x4c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a0f      	ldr	r2, [pc, #60]	@ (80021c8 <MX_DMA_Init+0x4c>)
 800218c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <MX_DMA_Init+0x4c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	203a      	movs	r0, #58	@ 0x3a
 80021a4:	f000 fc9d 	bl	8002ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80021a8:	203a      	movs	r0, #58	@ 0x3a
 80021aa:	f000 fcb6 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	2046      	movs	r0, #70	@ 0x46
 80021b4:	f000 fc95 	bl	8002ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021b8:	2046      	movs	r0, #70	@ 0x46
 80021ba:	f000 fcae 	bl	8002b1a <HAL_NVIC_EnableIRQ>

}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800

080021cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <MX_GPIO_Init+0x68>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a16      	ldr	r2, [pc, #88]	@ (8002234 <MX_GPIO_Init+0x68>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <MX_GPIO_Init+0x68>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <MX_GPIO_Init+0x68>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002234 <MX_GPIO_Init+0x68>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <MX_GPIO_Init+0x68>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <MX_GPIO_Init+0x68>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <MX_GPIO_Init+0x68>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <MX_GPIO_Init+0x68>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <Error_Handler+0x8>

08002244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <HAL_MspInit+0x4c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	4a0f      	ldr	r2, [pc, #60]	@ (8002290 <HAL_MspInit+0x4c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002258:	6453      	str	r3, [r2, #68]	@ 0x44
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_MspInit+0x4c>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4a08      	ldr	r2, [pc, #32]	@ (8002290 <HAL_MspInit+0x4c>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	@ 0x40
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a19      	ldr	r2, [pc, #100]	@ (8002318 <HAL_I2C_MspInit+0x84>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12b      	bne.n	800230e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b18      	ldr	r3, [pc, #96]	@ (800231c <HAL_I2C_MspInit+0x88>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a17      	ldr	r2, [pc, #92]	@ (800231c <HAL_I2C_MspInit+0x88>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <HAL_I2C_MspInit+0x88>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022d2:	23c0      	movs	r3, #192	@ 0xc0
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d6:	2312      	movs	r3, #18
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022e2:	2304      	movs	r3, #4
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	480c      	ldr	r0, [pc, #48]	@ (8002320 <HAL_I2C_MspInit+0x8c>)
 80022ee:	f001 f83d 	bl	800336c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_I2C_MspInit+0x88>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	4a08      	ldr	r2, [pc, #32]	@ (800231c <HAL_I2C_MspInit+0x88>)
 80022fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002300:	6413      	str	r3, [r2, #64]	@ 0x40
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_I2C_MspInit+0x88>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	@ 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40005400 	.word	0x40005400
 800231c:	40023800 	.word	0x40023800
 8002320:	40020400 	.word	0x40020400

08002324 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002334:	d10e      	bne.n	8002354 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	4b27      	ldr	r3, [pc, #156]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	4a26      	ldr	r2, [pc, #152]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6413      	str	r3, [r2, #64]	@ 0x40
 8002346:	4b24      	ldr	r3, [pc, #144]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002352:	e03a      	b.n	80023ca <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a20      	ldr	r2, [pc, #128]	@ (80023dc <HAL_TIM_PWM_MspInit+0xb8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10e      	bne.n	800237c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6413      	str	r3, [r2, #64]	@ 0x40
 800236e:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
}
 800237a:	e026      	b.n	80023ca <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a17      	ldr	r2, [pc, #92]	@ (80023e0 <HAL_TIM_PWM_MspInit+0xbc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	4a12      	ldr	r2, [pc, #72]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6413      	str	r3, [r2, #64]	@ 0x40
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
}
 80023a2:	e012      	b.n	80023ca <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM5)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0e      	ldr	r2, [pc, #56]	@ (80023e4 <HAL_TIM_PWM_MspInit+0xc0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10d      	bne.n	80023ca <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 80023b8:	f043 0308 	orr.w	r3, r3, #8
 80023bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_TIM_PWM_MspInit+0xb4>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40000800 	.word	0x40000800
 80023e4:	40000c00 	.word	0x40000c00

080023e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	@ 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002408:	d11e      	bne.n	8002448 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	4b55      	ldr	r3, [pc, #340]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a54      	ldr	r2, [pc, #336]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b52      	ldr	r3, [pc, #328]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002426:	232e      	movs	r3, #46	@ 0x2e
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002436:	2301      	movs	r3, #1
 8002438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	4619      	mov	r1, r3
 8002440:	4849      	ldr	r0, [pc, #292]	@ (8002568 <HAL_TIM_MspPostInit+0x180>)
 8002442:	f000 ff93 	bl	800336c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002446:	e089      	b.n	800255c <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a47      	ldr	r2, [pc, #284]	@ (800256c <HAL_TIM_MspPostInit+0x184>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d13c      	bne.n	80024cc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	4b43      	ldr	r3, [pc, #268]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	4a42      	ldr	r2, [pc, #264]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6313      	str	r3, [r2, #48]	@ 0x30
 8002462:	4b40      	ldr	r3, [pc, #256]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	4b3c      	ldr	r3, [pc, #240]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a3b      	ldr	r2, [pc, #236]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800248a:	23c0      	movs	r3, #192	@ 0xc0
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800249a:	2302      	movs	r3, #2
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249e:	f107 031c 	add.w	r3, r7, #28
 80024a2:	4619      	mov	r1, r3
 80024a4:	4830      	ldr	r0, [pc, #192]	@ (8002568 <HAL_TIM_MspPostInit+0x180>)
 80024a6:	f000 ff61 	bl	800336c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024aa:	2303      	movs	r3, #3
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024ba:	2302      	movs	r3, #2
 80024bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	4619      	mov	r1, r3
 80024c4:	482a      	ldr	r0, [pc, #168]	@ (8002570 <HAL_TIM_MspPostInit+0x188>)
 80024c6:	f000 ff51 	bl	800336c <HAL_GPIO_Init>
}
 80024ca:	e047      	b.n	800255c <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM4)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a28      	ldr	r2, [pc, #160]	@ (8002574 <HAL_TIM_MspPostInit+0x18c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d11f      	bne.n	8002516 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	4a21      	ldr	r2, [pc, #132]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 80024e0:	f043 0308 	orr.w	r3, r3, #8
 80024e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024f2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002504:	2302      	movs	r3, #2
 8002506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	4619      	mov	r1, r3
 800250e:	481a      	ldr	r0, [pc, #104]	@ (8002578 <HAL_TIM_MspPostInit+0x190>)
 8002510:	f000 ff2c 	bl	800336c <HAL_GPIO_Init>
}
 8002514:	e022      	b.n	800255c <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM5)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a18      	ldr	r2, [pc, #96]	@ (800257c <HAL_TIM_MspPostInit+0x194>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d11d      	bne.n	800255c <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	4a0e      	ldr	r2, [pc, #56]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <HAL_TIM_MspPostInit+0x17c>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800253c:	2301      	movs	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800254c:	2302      	movs	r3, #2
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4619      	mov	r1, r3
 8002556:	4804      	ldr	r0, [pc, #16]	@ (8002568 <HAL_TIM_MspPostInit+0x180>)
 8002558:	f000 ff08 	bl	800336c <HAL_GPIO_Init>
}
 800255c:	bf00      	nop
 800255e:	3730      	adds	r7, #48	@ 0x30
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	40020000 	.word	0x40020000
 800256c:	40000400 	.word	0x40000400
 8002570:	40020400 	.word	0x40020400
 8002574:	40000800 	.word	0x40000800
 8002578:	40020c00 	.word	0x40020c00
 800257c:	40000c00 	.word	0x40000c00

08002580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	@ 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a4c      	ldr	r2, [pc, #304]	@ (80026d0 <HAL_UART_MspInit+0x150>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	f040 8091 	bne.w	80026c6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	4b4a      	ldr	r3, [pc, #296]	@ (80026d4 <HAL_UART_MspInit+0x154>)
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	4a49      	ldr	r2, [pc, #292]	@ (80026d4 <HAL_UART_MspInit+0x154>)
 80025ae:	f043 0310 	orr.w	r3, r3, #16
 80025b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b4:	4b47      	ldr	r3, [pc, #284]	@ (80026d4 <HAL_UART_MspInit+0x154>)
 80025b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <HAL_UART_MspInit+0x154>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	4a42      	ldr	r2, [pc, #264]	@ (80026d4 <HAL_UART_MspInit+0x154>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d0:	4b40      	ldr	r3, [pc, #256]	@ (80026d4 <HAL_UART_MspInit+0x154>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80025dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ea:	2302      	movs	r3, #2
 80025ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ee:	2307      	movs	r3, #7
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4619      	mov	r1, r3
 80025f8:	4837      	ldr	r0, [pc, #220]	@ (80026d8 <HAL_UART_MspInit+0x158>)
 80025fa:	f000 feb7 	bl	800336c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80025fe:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 8002600:	4a37      	ldr	r2, [pc, #220]	@ (80026e0 <HAL_UART_MspInit+0x160>)
 8002602:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002604:	4b35      	ldr	r3, [pc, #212]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 8002606:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800260a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800260c:	4b33      	ldr	r3, [pc, #204]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002612:	4b32      	ldr	r3, [pc, #200]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 8002614:	2200      	movs	r2, #0
 8002616:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002618:	4b30      	ldr	r3, [pc, #192]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 800261a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800261e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002620:	4b2e      	ldr	r3, [pc, #184]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002626:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800262c:	4b2b      	ldr	r3, [pc, #172]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002632:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002638:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800263e:	4827      	ldr	r0, [pc, #156]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 8002640:	f000 fa86 	bl	8002b50 <HAL_DMA_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800264a:	f7ff fdf5 	bl	8002238 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a22      	ldr	r2, [pc, #136]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 8002652:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002654:	4a21      	ldr	r2, [pc, #132]	@ (80026dc <HAL_UART_MspInit+0x15c>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800265a:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 800265c:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <HAL_UART_MspInit+0x168>)
 800265e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002660:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 8002662:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002666:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002668:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800266e:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 8002676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800267a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 800267e:	2200      	movs	r2, #0
 8002680:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002682:	4b18      	ldr	r3, [pc, #96]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002688:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002694:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 8002696:	2200      	movs	r2, #0
 8002698:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800269a:	4812      	ldr	r0, [pc, #72]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 800269c:	f000 fa58 	bl	8002b50 <HAL_DMA_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80026a6:	f7ff fdc7 	bl	8002238 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a0d      	ldr	r2, [pc, #52]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 80026ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80026b0:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <HAL_UART_MspInit+0x164>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2025      	movs	r0, #37	@ 0x25
 80026bc:	f000 fa11 	bl	8002ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026c0:	2025      	movs	r0, #37	@ 0x25
 80026c2:	f000 fa2a 	bl	8002b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026c6:	bf00      	nop
 80026c8:	3728      	adds	r7, #40	@ 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40011000 	.word	0x40011000
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	20000248 	.word	0x20000248
 80026e0:	40026440 	.word	0x40026440
 80026e4:	200002a8 	.word	0x200002a8
 80026e8:	400264b8 	.word	0x400264b8

080026ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <NMI_Handler+0x4>

080026f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <HardFault_Handler+0x4>

080026fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <MemManage_Handler+0x4>

08002704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <BusFault_Handler+0x4>

0800270c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <UsageFault_Handler+0x4>

08002714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002742:	f000 f8af 	bl	80028a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <USART1_IRQHandler+0x10>)
 8002752:	f003 fbb3 	bl	8005ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000200 	.word	0x20000200

08002760 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <DMA2_Stream2_IRQHandler+0x10>)
 8002766:	f000 fb8b 	bl	8002e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000248 	.word	0x20000248

08002774 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <DMA2_Stream7_IRQHandler+0x10>)
 800277a:	f000 fb81 	bl	8002e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200002a8 	.word	0x200002a8

08002788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <SystemInit+0x20>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <SystemInit+0x20>)
 8002794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b0:	480d      	ldr	r0, [pc, #52]	@ (80027e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027b2:	490e      	ldr	r1, [pc, #56]	@ (80027ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027b4:	4a0e      	ldr	r2, [pc, #56]	@ (80027f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0b      	ldr	r2, [pc, #44]	@ (80027f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027c8:	4c0b      	ldr	r4, [pc, #44]	@ (80027f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027d6:	f7ff ffd7 	bl	8002788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027da:	f004 fcd1 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027de:	f7ff f9d5 	bl	8001b8c <main>
  bx  lr    
 80027e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80027f0:	08008f48 	.word	0x08008f48
  ldr r2, =_sbss
 80027f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027f8:	20000448 	.word	0x20000448

080027fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC_IRQHandler>
	...

08002800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002804:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <HAL_Init+0x40>)
 800280a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800280e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <HAL_Init+0x40>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800281a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800281c:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a07      	ldr	r2, [pc, #28]	@ (8002840 <HAL_Init+0x40>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f000 f94f 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282e:	200f      	movs	r0, #15
 8002830:	f000 f808 	bl	8002844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002834:	f7ff fd06 	bl	8002244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023c00 	.word	0x40023c00

08002844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_InitTick+0x54>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_InitTick+0x58>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285a:	fbb3 f3f1 	udiv	r3, r3, r1
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f967 	bl	8002b36 <HAL_SYSTICK_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e00e      	b.n	8002890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d80a      	bhi.n	800288e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002878:	2200      	movs	r2, #0
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f000 f92f 	bl	8002ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002884:	4a06      	ldr	r2, [pc, #24]	@ (80028a0 <HAL_InitTick+0x5c>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000004 	.word	0x20000004
 800289c:	2000000c 	.word	0x2000000c
 80028a0:	20000008 	.word	0x20000008

080028a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_IncTick+0x20>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_IncTick+0x24>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	4a04      	ldr	r2, [pc, #16]	@ (80028c8 <HAL_IncTick+0x24>)
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	2000000c 	.word	0x2000000c
 80028c8:	2000030c 	.word	0x2000030c

080028cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return uwTick;
 80028d0:	4b03      	ldr	r3, [pc, #12]	@ (80028e0 <HAL_GetTick+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	2000030c 	.word	0x2000030c

080028e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff ffee 	bl	80028cc <HAL_GetTick>
 80028f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d005      	beq.n	800290a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_Delay+0x44>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800290a:	bf00      	nop
 800290c:	f7ff ffde 	bl	80028cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d8f7      	bhi.n	800290c <HAL_Delay+0x28>
  {
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2000000c 	.word	0x2000000c

0800292c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002948:	4013      	ands	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800295c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295e:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <__NVIC_SetPriorityGrouping+0x44>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	60d3      	str	r3, [r2, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002978:	4b04      	ldr	r3, [pc, #16]	@ (800298c <__NVIC_GetPriorityGrouping+0x18>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 0307 	and.w	r3, r3, #7
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db0b      	blt.n	80029ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	4907      	ldr	r1, [pc, #28]	@ (80029c8 <__NVIC_EnableIRQ+0x38>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	@ (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	@ (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f7ff ff8e 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff29 	bl	800292c <__NVIC_SetPriorityGrouping>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af4:	f7ff ff3e 	bl	8002974 <__NVIC_GetPriorityGrouping>
 8002af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f7ff ff8e 	bl	8002a20 <NVIC_EncodePriority>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff5d 	bl	80029cc <__NVIC_SetPriority>
}
 8002b12:	bf00      	nop
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff31 	bl	8002990 <__NVIC_EnableIRQ>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ffa2 	bl	8002a88 <SysTick_Config>
 8002b44:	4603      	mov	r3, r0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7ff feb6 	bl	80028cc <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e099      	b.n	8002ca0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8c:	e00f      	b.n	8002bae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8e:	f7ff fe9d 	bl	80028cc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d908      	bls.n	8002bae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e078      	b.n	8002ca0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e8      	bne.n	8002b8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <HAL_DMA_Init+0x158>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d107      	bne.n	8002c18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	4313      	orrs	r3, r2
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f023 0307 	bic.w	r3, r3, #7
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d117      	bne.n	8002c72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fb0d 	bl	8003274 <DMA_CheckFifoParam>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2240      	movs	r2, #64	@ 0x40
 8002c64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e016      	b.n	8002ca0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fac4 	bl	8003208 <DMA_CalcBaseAndBitshift>
 8002c80:	4603      	mov	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	223f      	movs	r2, #63	@ 0x3f
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	f010803f 	.word	0xf010803f

08002cac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DMA_Start_IT+0x26>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e040      	b.n	8002d54 <HAL_DMA_Start_IT+0xa8>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d12f      	bne.n	8002d46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fa56 	bl	80031ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	223f      	movs	r2, #63	@ 0x3f
 8002d06:	409a      	lsls	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0216 	orr.w	r2, r2, #22
 8002d1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0208 	orr.w	r2, r2, #8
 8002d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e005      	b.n	8002d52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d6a:	f7ff fdaf 	bl	80028cc <HAL_GetTick>
 8002d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2280      	movs	r2, #128	@ 0x80
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e052      	b.n	8002e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0216 	bic.w	r2, r2, #22
 8002d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <HAL_DMA_Abort+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0208 	bic.w	r2, r2, #8
 8002dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dde:	e013      	b.n	8002e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002de0:	f7ff fd74 	bl	80028cc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d90c      	bls.n	8002e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e015      	b.n	8002e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e4      	bne.n	8002de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1a:	223f      	movs	r2, #63	@ 0x3f
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d004      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2280      	movs	r2, #128	@ 0x80
 8002e54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00c      	b.n	8002e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e8c:	4b8e      	ldr	r3, [pc, #568]	@ (80030c8 <HAL_DMA_IRQHandler+0x248>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a8e      	ldr	r2, [pc, #568]	@ (80030cc <HAL_DMA_IRQHandler+0x24c>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0a9b      	lsrs	r3, r3, #10
 8002e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eaa:	2208      	movs	r2, #8
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01a      	beq.n	8002eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0204 	bic.w	r2, r2, #4
 8002ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed8:	2208      	movs	r2, #8
 8002eda:	409a      	lsls	r2, r3
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0e:	2201      	movs	r2, #1
 8002f10:	409a      	lsls	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f26:	2204      	movs	r2, #4
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f44:	2204      	movs	r2, #4
 8002f46:	409a      	lsls	r2, r3
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d043      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d03c      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d024      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
 8002fae:	e01f      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01b      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
 8002fc0:	e016      	b.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0208 	bic.w	r2, r2, #8
 8002fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 808f 	beq.w	8003120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8087 	beq.w	8003120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003016:	2220      	movs	r2, #32
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b05      	cmp	r3, #5
 8003028:	d136      	bne.n	8003098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0216 	bic.w	r2, r2, #22
 8003038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <HAL_DMA_IRQHandler+0x1da>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0208 	bic.w	r2, r2, #8
 8003068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306e:	223f      	movs	r2, #63	@ 0x3f
 8003070:	409a      	lsls	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800308a:	2b00      	cmp	r3, #0
 800308c:	d07e      	beq.n	800318c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	4798      	blx	r3
        }
        return;
 8003096:	e079      	b.n	800318c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01d      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d031      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
 80030c4:	e02c      	b.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
 80030c6:	bf00      	nop
 80030c8:	20000004 	.word	0x20000004
 80030cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d023      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	4798      	blx	r3
 80030e0:	e01e      	b.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10f      	bne.n	8003110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0210 	bic.w	r2, r2, #16
 80030fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003124:	2b00      	cmp	r3, #0
 8003126:	d032      	beq.n	800318e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d022      	beq.n	800317a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2205      	movs	r2, #5
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	3301      	adds	r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d307      	bcc.n	8003168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f2      	bne.n	800314c <HAL_DMA_IRQHandler+0x2cc>
 8003166:	e000      	b.n	800316a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
 800318a:	e000      	b.n	800318e <HAL_DMA_IRQHandler+0x30e>
        return;
 800318c:	bf00      	nop
    }
  }
}
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b40      	cmp	r3, #64	@ 0x40
 80031d8:	d108      	bne.n	80031ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031ea:	e007      	b.n	80031fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3b10      	subs	r3, #16
 8003218:	4a14      	ldr	r2, [pc, #80]	@ (800326c <DMA_CalcBaseAndBitshift+0x64>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003222:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <DMA_CalcBaseAndBitshift+0x68>)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d909      	bls.n	800324a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	1d1a      	adds	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	659a      	str	r2, [r3, #88]	@ 0x58
 8003248:	e007      	b.n	800325a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	aaaaaaab 	.word	0xaaaaaaab
 8003270:	08008eb8 	.word	0x08008eb8

08003274 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003284:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11f      	bne.n	80032ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d856      	bhi.n	8003342 <DMA_CheckFifoParam+0xce>
 8003294:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <DMA_CheckFifoParam+0x28>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	080032bf 	.word	0x080032bf
 80032a4:	080032ad 	.word	0x080032ad
 80032a8:	08003343 	.word	0x08003343
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d046      	beq.n	8003346 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032bc:	e043      	b.n	8003346 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032c6:	d140      	bne.n	800334a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032cc:	e03d      	b.n	800334a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032d6:	d121      	bne.n	800331c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d837      	bhi.n	800334e <DMA_CheckFifoParam+0xda>
 80032de:	a201      	add	r2, pc, #4	@ (adr r2, 80032e4 <DMA_CheckFifoParam+0x70>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	080032fb 	.word	0x080032fb
 80032ec:	080032f5 	.word	0x080032f5
 80032f0:	0800330d 	.word	0x0800330d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      break;
 80032f8:	e030      	b.n	800335c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d025      	beq.n	8003352 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800330a:	e022      	b.n	8003352 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003314:	d11f      	bne.n	8003356 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800331a:	e01c      	b.n	8003356 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d903      	bls.n	800332a <DMA_CheckFifoParam+0xb6>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d003      	beq.n	8003330 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003328:	e018      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      break;
 800332e:	e015      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
      break;
 8003340:	e00b      	b.n	800335a <DMA_CheckFifoParam+0xe6>
      break;
 8003342:	bf00      	nop
 8003344:	e00a      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 8003346:	bf00      	nop
 8003348:	e008      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 800334a:	bf00      	nop
 800334c:	e006      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 800334e:	bf00      	nop
 8003350:	e004      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 8003352:	bf00      	nop
 8003354:	e002      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;   
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <DMA_CheckFifoParam+0xe8>
      break;
 800335a:	bf00      	nop
    }
  } 
  
  return status; 
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop

0800336c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	@ 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e16b      	b.n	8003660 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003388:	2201      	movs	r2, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f040 815a 	bne.w	800365a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d005      	beq.n	80033be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d130      	bne.n	8003420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 0201 	and.w	r2, r3, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b03      	cmp	r3, #3
 800342a:	d017      	beq.n	800345c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d123      	bne.n	80034b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	220f      	movs	r2, #15
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	08da      	lsrs	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3208      	adds	r2, #8
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0203 	and.w	r2, r3, #3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80b4 	beq.w	800365a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	4b60      	ldr	r3, [pc, #384]	@ (8003678 <HAL_GPIO_Init+0x30c>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003678 <HAL_GPIO_Init+0x30c>)
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003500:	6453      	str	r3, [r2, #68]	@ 0x44
 8003502:	4b5d      	ldr	r3, [pc, #372]	@ (8003678 <HAL_GPIO_Init+0x30c>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350e:	4a5b      	ldr	r2, [pc, #364]	@ (800367c <HAL_GPIO_Init+0x310>)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3302      	adds	r3, #2
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_GPIO_Init+0x314>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d02b      	beq.n	8003592 <HAL_GPIO_Init+0x226>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a51      	ldr	r2, [pc, #324]	@ (8003684 <HAL_GPIO_Init+0x318>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d025      	beq.n	800358e <HAL_GPIO_Init+0x222>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a50      	ldr	r2, [pc, #320]	@ (8003688 <HAL_GPIO_Init+0x31c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01f      	beq.n	800358a <HAL_GPIO_Init+0x21e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4f      	ldr	r2, [pc, #316]	@ (800368c <HAL_GPIO_Init+0x320>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d019      	beq.n	8003586 <HAL_GPIO_Init+0x21a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4e      	ldr	r2, [pc, #312]	@ (8003690 <HAL_GPIO_Init+0x324>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_GPIO_Init+0x216>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4d      	ldr	r2, [pc, #308]	@ (8003694 <HAL_GPIO_Init+0x328>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00d      	beq.n	800357e <HAL_GPIO_Init+0x212>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4c      	ldr	r2, [pc, #304]	@ (8003698 <HAL_GPIO_Init+0x32c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <HAL_GPIO_Init+0x20e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4b      	ldr	r2, [pc, #300]	@ (800369c <HAL_GPIO_Init+0x330>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_GPIO_Init+0x20a>
 8003572:	2307      	movs	r3, #7
 8003574:	e00e      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003576:	2308      	movs	r3, #8
 8003578:	e00c      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800357a:	2306      	movs	r3, #6
 800357c:	e00a      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800357e:	2305      	movs	r3, #5
 8003580:	e008      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003582:	2304      	movs	r3, #4
 8003584:	e006      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003586:	2303      	movs	r3, #3
 8003588:	e004      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800358a:	2302      	movs	r3, #2
 800358c:	e002      	b.n	8003594 <HAL_GPIO_Init+0x228>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_GPIO_Init+0x228>
 8003592:	2300      	movs	r3, #0
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	f002 0203 	and.w	r2, r2, #3
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	4093      	lsls	r3, r2
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a4:	4935      	ldr	r1, [pc, #212]	@ (800367c <HAL_GPIO_Init+0x310>)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035b2:	4b3b      	ldr	r3, [pc, #236]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d6:	4a32      	ldr	r2, [pc, #200]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035dc:	4b30      	ldr	r3, [pc, #192]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003600:	4a27      	ldr	r2, [pc, #156]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003606:	4b26      	ldr	r3, [pc, #152]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800362a:	4a1d      	ldr	r2, [pc, #116]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003630:	4b1b      	ldr	r3, [pc, #108]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003654:	4a12      	ldr	r2, [pc, #72]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3301      	adds	r3, #1
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2b0f      	cmp	r3, #15
 8003664:	f67f ae90 	bls.w	8003388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3724      	adds	r7, #36	@ 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	40013800 	.word	0x40013800
 8003680:	40020000 	.word	0x40020000
 8003684:	40020400 	.word	0x40020400
 8003688:	40020800 	.word	0x40020800
 800368c:	40020c00 	.word	0x40020c00
 8003690:	40021000 	.word	0x40021000
 8003694:	40021400 	.word	0x40021400
 8003698:	40021800 	.word	0x40021800
 800369c:	40021c00 	.word	0x40021c00
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e12b      	b.n	800390e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fe fde2 	bl	8002294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2224      	movs	r2, #36	@ 0x24
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003708:	f001 fc20 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 800370c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4a81      	ldr	r2, [pc, #516]	@ (8003918 <HAL_I2C_Init+0x274>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d807      	bhi.n	8003728 <HAL_I2C_Init+0x84>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a80      	ldr	r2, [pc, #512]	@ (800391c <HAL_I2C_Init+0x278>)
 800371c:	4293      	cmp	r3, r2
 800371e:	bf94      	ite	ls
 8003720:	2301      	movls	r3, #1
 8003722:	2300      	movhi	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	e006      	b.n	8003736 <HAL_I2C_Init+0x92>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a7d      	ldr	r2, [pc, #500]	@ (8003920 <HAL_I2C_Init+0x27c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	bf94      	ite	ls
 8003730:	2301      	movls	r3, #1
 8003732:	2300      	movhi	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0e7      	b.n	800390e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4a78      	ldr	r2, [pc, #480]	@ (8003924 <HAL_I2C_Init+0x280>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0c9b      	lsrs	r3, r3, #18
 8003748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a6a      	ldr	r2, [pc, #424]	@ (8003918 <HAL_I2C_Init+0x274>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d802      	bhi.n	8003778 <HAL_I2C_Init+0xd4>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	3301      	adds	r3, #1
 8003776:	e009      	b.n	800378c <HAL_I2C_Init+0xe8>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	4a69      	ldr	r2, [pc, #420]	@ (8003928 <HAL_I2C_Init+0x284>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	3301      	adds	r3, #1
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	430b      	orrs	r3, r1
 8003792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800379e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	495c      	ldr	r1, [pc, #368]	@ (8003918 <HAL_I2C_Init+0x274>)
 80037a8:	428b      	cmp	r3, r1
 80037aa:	d819      	bhi.n	80037e0 <HAL_I2C_Init+0x13c>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e59      	subs	r1, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037c0:	400b      	ands	r3, r1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_I2C_Init+0x138>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1e59      	subs	r1, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d4:	3301      	adds	r3, #1
 80037d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037da:	e051      	b.n	8003880 <HAL_I2C_Init+0x1dc>
 80037dc:	2304      	movs	r3, #4
 80037de:	e04f      	b.n	8003880 <HAL_I2C_Init+0x1dc>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d111      	bne.n	800380c <HAL_I2C_Init+0x168>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e58      	subs	r0, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	440b      	add	r3, r1
 80037f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e012      	b.n	8003832 <HAL_I2C_Init+0x18e>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1e58      	subs	r0, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	0099      	lsls	r1, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003822:	3301      	adds	r3, #1
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_Init+0x196>
 8003836:	2301      	movs	r3, #1
 8003838:	e022      	b.n	8003880 <HAL_I2C_Init+0x1dc>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10e      	bne.n	8003860 <HAL_I2C_Init+0x1bc>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1e58      	subs	r0, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	440b      	add	r3, r1
 8003850:	fbb0 f3f3 	udiv	r3, r0, r3
 8003854:	3301      	adds	r3, #1
 8003856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800385e:	e00f      	b.n	8003880 <HAL_I2C_Init+0x1dc>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	0099      	lsls	r1, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	6809      	ldr	r1, [r1, #0]
 8003884:	4313      	orrs	r3, r2
 8003886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6911      	ldr	r1, [r2, #16]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68d2      	ldr	r2, [r2, #12]
 80038ba:	4311      	orrs	r1, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695a      	ldr	r2, [r3, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	000186a0 	.word	0x000186a0
 800391c:	001e847f 	.word	0x001e847f
 8003920:	003d08ff 	.word	0x003d08ff
 8003924:	431bde83 	.word	0x431bde83
 8003928:	10624dd3 	.word	0x10624dd3

0800392c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003946:	f7fe ffc1 	bl	80028cc <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b20      	cmp	r3, #32
 8003956:	f040 80d9 	bne.w	8003b0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2319      	movs	r3, #25
 8003960:	2201      	movs	r2, #1
 8003962:	496d      	ldr	r1, [pc, #436]	@ (8003b18 <HAL_I2C_Mem_Write+0x1ec>)
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fc8b 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
 8003972:	e0cc      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_I2C_Mem_Write+0x56>
 800397e:	2302      	movs	r3, #2
 8003980:	e0c5      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d007      	beq.n	80039a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2221      	movs	r2, #33	@ 0x21
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2240      	movs	r2, #64	@ 0x40
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a4d      	ldr	r2, [pc, #308]	@ (8003b1c <HAL_I2C_Mem_Write+0x1f0>)
 80039e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ea:	88f8      	ldrh	r0, [r7, #6]
 80039ec:	893a      	ldrh	r2, [r7, #8]
 80039ee:	8979      	ldrh	r1, [r7, #10]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4603      	mov	r3, r0
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fac2 	bl	8003f84 <I2C_RequestMemoryWrite>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d052      	beq.n	8003aac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e081      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fd50 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d107      	bne.n	8003a32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e06b      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d11b      	bne.n	8003aac <HAL_I2C_Mem_Write+0x180>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d017      	beq.n	8003aac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	781a      	ldrb	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1aa      	bne.n	8003a0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fd43 	bl	8004544 <I2C_WaitOnBTFFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d107      	bne.n	8003adc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ada:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e016      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	00100002 	.word	0x00100002
 8003b1c:	ffff0000 	.word	0xffff0000

08003b20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	@ 0x30
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	4608      	mov	r0, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4603      	mov	r3, r0
 8003b30:	817b      	strh	r3, [r7, #10]
 8003b32:	460b      	mov	r3, r1
 8003b34:	813b      	strh	r3, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b3a:	f7fe fec7 	bl	80028cc <HAL_GetTick>
 8003b3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b20      	cmp	r3, #32
 8003b4a:	f040 8214 	bne.w	8003f76 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2319      	movs	r3, #25
 8003b54:	2201      	movs	r2, #1
 8003b56:	497b      	ldr	r1, [pc, #492]	@ (8003d44 <HAL_I2C_Mem_Read+0x224>)
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fb91 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b64:	2302      	movs	r3, #2
 8003b66:	e207      	b.n	8003f78 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_I2C_Mem_Read+0x56>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e200      	b.n	8003f78 <HAL_I2C_Mem_Read+0x458>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d007      	beq.n	8003b9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2222      	movs	r2, #34	@ 0x22
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2240      	movs	r2, #64	@ 0x40
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a5b      	ldr	r2, [pc, #364]	@ (8003d48 <HAL_I2C_Mem_Read+0x228>)
 8003bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bde:	88f8      	ldrh	r0, [r7, #6]
 8003be0:	893a      	ldrh	r2, [r7, #8]
 8003be2:	8979      	ldrh	r1, [r7, #10]
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	4603      	mov	r3, r0
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fa5e 	bl	80040b0 <I2C_RequestMemoryRead>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e1bc      	b.n	8003f78 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d113      	bne.n	8003c2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	623b      	str	r3, [r7, #32]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	623b      	str	r3, [r7, #32]
 8003c1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	e190      	b.n	8003f50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d11b      	bne.n	8003c6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e170      	b.n	8003f50 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d11b      	bne.n	8003cae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	e150      	b.n	8003f50 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cc4:	e144      	b.n	8003f50 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	f200 80f1 	bhi.w	8003eb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d123      	bne.n	8003d20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fc79 	bl	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e145      	b.n	8003f78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d1e:	e117      	b.n	8003f50 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d14e      	bne.n	8003dc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4906      	ldr	r1, [pc, #24]	@ (8003d4c <HAL_I2C_Mem_Read+0x22c>)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 faa4 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e11a      	b.n	8003f78 <HAL_I2C_Mem_Read+0x458>
 8003d42:	bf00      	nop
 8003d44:	00100002 	.word	0x00100002
 8003d48:	ffff0000 	.word	0xffff0000
 8003d4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dc4:	e0c4      	b.n	8003f50 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dcc:	2200      	movs	r2, #0
 8003dce:	496c      	ldr	r1, [pc, #432]	@ (8003f80 <HAL_I2C_Mem_Read+0x460>)
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fa55 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0cb      	b.n	8003f78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e28:	2200      	movs	r2, #0
 8003e2a:	4955      	ldr	r1, [pc, #340]	@ (8003f80 <HAL_I2C_Mem_Read+0x460>)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fa27 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e09d      	b.n	8003f78 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eb0:	e04e      	b.n	8003f50 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fb8c 	bl	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e058      	b.n	8003f78 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d124      	bne.n	8003f50 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f1c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f47f aeb6 	bne.w	8003cc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3728      	adds	r7, #40	@ 0x28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	00010004 	.word	0x00010004

08003f84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	461a      	mov	r2, r3
 8003f92:	4603      	mov	r3, r0
 8003f94:	817b      	strh	r3, [r7, #10]
 8003f96:	460b      	mov	r3, r1
 8003f98:	813b      	strh	r3, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f960 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00d      	beq.n	8003fe2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd4:	d103      	bne.n	8003fde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e05f      	b.n	80040a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe2:	897b      	ldrh	r3, [r7, #10]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ff0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	6a3a      	ldr	r2, [r7, #32]
 8003ff6:	492d      	ldr	r1, [pc, #180]	@ (80040ac <I2C_RequestMemoryWrite+0x128>)
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f9bb 	bl	8004374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e04c      	b.n	80040a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004020:	6a39      	ldr	r1, [r7, #32]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fa46 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	2b04      	cmp	r3, #4
 8004034:	d107      	bne.n	8004046 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004044:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e02b      	b.n	80040a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004050:	893b      	ldrh	r3, [r7, #8]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	611a      	str	r2, [r3, #16]
 800405a:	e021      	b.n	80040a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800405c:	893b      	ldrh	r3, [r7, #8]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	b29b      	uxth	r3, r3
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	6a39      	ldr	r1, [r7, #32]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fa20 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	2b04      	cmp	r3, #4
 8004080:	d107      	bne.n	8004092 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004090:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e005      	b.n	80040a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004096:	893b      	ldrh	r3, [r7, #8]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	00010002 	.word	0x00010002

080040b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	4608      	mov	r0, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	817b      	strh	r3, [r7, #10]
 80040c2:	460b      	mov	r3, r1
 80040c4:	813b      	strh	r3, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f8c2 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004110:	d103      	bne.n	800411a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004118:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e0aa      	b.n	8004274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800411e:	897b      	ldrh	r3, [r7, #10]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800412c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	4952      	ldr	r1, [pc, #328]	@ (800427c <I2C_RequestMemoryRead+0x1cc>)
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f91d 	bl	8004374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e097      	b.n	8004274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f9a8 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	2b04      	cmp	r3, #4
 8004170:	d107      	bne.n	8004182 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e076      	b.n	8004274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800418c:	893b      	ldrh	r3, [r7, #8]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	611a      	str	r2, [r3, #16]
 8004196:	e021      	b.n	80041dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	b29b      	uxth	r3, r3
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a8:	6a39      	ldr	r1, [r7, #32]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f982 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00d      	beq.n	80041d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d107      	bne.n	80041ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e050      	b.n	8004274 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041d2:	893b      	ldrh	r3, [r7, #8]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041de:	6a39      	ldr	r1, [r7, #32]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f967 	bl	80044b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d107      	bne.n	8004204 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004202:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e035      	b.n	8004274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004216:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	2200      	movs	r2, #0
 8004220:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f82b 	bl	8004280 <I2C_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00d      	beq.n	800424c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800423e:	d103      	bne.n	8004248 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e013      	b.n	8004274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800424c:	897b      	ldrh	r3, [r7, #10]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	6a3a      	ldr	r2, [r7, #32]
 8004260:	4906      	ldr	r1, [pc, #24]	@ (800427c <I2C_RequestMemoryRead+0x1cc>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f886 	bl	8004374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	00010002 	.word	0x00010002

08004280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004290:	e048      	b.n	8004324 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d044      	beq.n	8004324 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429a:	f7fe fb17 	bl	80028cc <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d139      	bne.n	8004324 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10d      	bne.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	43da      	mvns	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	4013      	ands	r3, r2
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	e00c      	b.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	43da      	mvns	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4013      	ands	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d116      	bne.n	8004324 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004310:	f043 0220 	orr.w	r2, r3, #32
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e023      	b.n	800436c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	d10d      	bne.n	800434a <I2C_WaitOnFlagUntilTimeout+0xca>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	43da      	mvns	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4013      	ands	r3, r2
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	e00c      	b.n	8004364 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	43da      	mvns	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4013      	ands	r3, r2
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	429a      	cmp	r2, r3
 8004368:	d093      	beq.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004382:	e071      	b.n	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800438e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004392:	d123      	bne.n	80043dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	f043 0204 	orr.w	r2, r3, #4
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e067      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d041      	beq.n	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e4:	f7fe fa72 	bl	80028cc <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d136      	bne.n	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d10c      	bne.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	43da      	mvns	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	bf14      	ite	ne
 8004416:	2301      	movne	r3, #1
 8004418:	2300      	moveq	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e00b      	b.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	43da      	mvns	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4013      	ands	r3, r2
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e021      	b.n	80044ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d10c      	bne.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	43da      	mvns	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e00b      	b.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	43da      	mvns	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4013      	ands	r3, r2
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	bf14      	ite	ne
 800449e:	2301      	movne	r3, #1
 80044a0:	2300      	moveq	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f47f af6d 	bne.w	8004384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c0:	e034      	b.n	800452c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f8e3 	bl	800468e <I2C_IsAcknowledgeFailed>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e034      	b.n	800453c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d028      	beq.n	800452c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fe f9f7 	bl	80028cc <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11d      	bne.n	800452c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fa:	2b80      	cmp	r3, #128	@ 0x80
 80044fc:	d016      	beq.n	800452c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e007      	b.n	800453c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004536:	2b80      	cmp	r3, #128	@ 0x80
 8004538:	d1c3      	bne.n	80044c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004550:	e034      	b.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f89b 	bl	800468e <I2C_IsAcknowledgeFailed>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e034      	b.n	80045cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d028      	beq.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456a:	f7fe f9af 	bl	80028cc <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	429a      	cmp	r2, r3
 8004578:	d302      	bcc.n	8004580 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d11d      	bne.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b04      	cmp	r3, #4
 800458c:	d016      	beq.n	80045bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e007      	b.n	80045cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d1c3      	bne.n	8004552 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045e0:	e049      	b.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d119      	bne.n	8004624 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0210 	mvn.w	r2, #16
 80045f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e030      	b.n	8004686 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004624:	f7fe f952 	bl	80028cc <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d11d      	bne.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004644:	2b40      	cmp	r3, #64	@ 0x40
 8004646:	d016      	beq.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e007      	b.n	8004686 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004680:	2b40      	cmp	r3, #64	@ 0x40
 8004682:	d1ae      	bne.n	80045e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a4:	d11b      	bne.n	80046de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	f043 0204 	orr.w	r2, r3, #4
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e267      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d075      	beq.n	80047f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470a:	4b88      	ldr	r3, [pc, #544]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b04      	cmp	r3, #4
 8004714:	d00c      	beq.n	8004730 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004716:	4b85      	ldr	r3, [pc, #532]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800471e:	2b08      	cmp	r3, #8
 8004720:	d112      	bne.n	8004748 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004722:	4b82      	ldr	r3, [pc, #520]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800472a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800472e:	d10b      	bne.n	8004748 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004730:	4b7e      	ldr	r3, [pc, #504]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d05b      	beq.n	80047f4 <HAL_RCC_OscConfig+0x108>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d157      	bne.n	80047f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e242      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004750:	d106      	bne.n	8004760 <HAL_RCC_OscConfig+0x74>
 8004752:	4b76      	ldr	r3, [pc, #472]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a75      	ldr	r2, [pc, #468]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e01d      	b.n	800479c <HAL_RCC_OscConfig+0xb0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004768:	d10c      	bne.n	8004784 <HAL_RCC_OscConfig+0x98>
 800476a:	4b70      	ldr	r3, [pc, #448]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a6f      	ldr	r2, [pc, #444]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b6d      	ldr	r3, [pc, #436]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a6c      	ldr	r2, [pc, #432]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e00b      	b.n	800479c <HAL_RCC_OscConfig+0xb0>
 8004784:	4b69      	ldr	r3, [pc, #420]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a68      	ldr	r2, [pc, #416]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 800478a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	4b66      	ldr	r3, [pc, #408]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a65      	ldr	r2, [pc, #404]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800479a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d013      	beq.n	80047cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fe f892 	bl	80028cc <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fe f88e 	bl	80028cc <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	@ 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e207      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b5b      	ldr	r3, [pc, #364]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0xc0>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fe f87e 	bl	80028cc <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fe f87a 	bl	80028cc <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	@ 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e1f3      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e6:	4b51      	ldr	r3, [pc, #324]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0xe8>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d063      	beq.n	80048ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004802:	4b4a      	ldr	r3, [pc, #296]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480e:	4b47      	ldr	r3, [pc, #284]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004816:	2b08      	cmp	r3, #8
 8004818:	d11c      	bne.n	8004854 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481a:	4b44      	ldr	r3, [pc, #272]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	4b41      	ldr	r3, [pc, #260]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_RCC_OscConfig+0x152>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d001      	beq.n	800483e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e1c7      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b3b      	ldr	r3, [pc, #236]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4937      	ldr	r1, [pc, #220]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	e03a      	b.n	80048ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800485c:	4b34      	ldr	r3, [pc, #208]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 800485e:	2201      	movs	r2, #1
 8004860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fe f833 	bl	80028cc <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800486a:	f7fe f82f 	bl	80028cc <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e1a8      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487c:	4b2b      	ldr	r3, [pc, #172]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f0      	beq.n	800486a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b28      	ldr	r3, [pc, #160]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	4925      	ldr	r1, [pc, #148]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
 800489c:	e015      	b.n	80048ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489e:	4b24      	ldr	r3, [pc, #144]	@ (8004930 <HAL_RCC_OscConfig+0x244>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fe f812 	bl	80028cc <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ac:	f7fe f80e 	bl	80028cc <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e187      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d036      	beq.n	8004944 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d016      	beq.n	800490c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <HAL_RCC_OscConfig+0x248>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fd fff2 	bl	80028cc <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ec:	f7fd ffee 	bl	80028cc <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e167      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fe:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_OscConfig+0x240>)
 8004900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x200>
 800490a:	e01b      	b.n	8004944 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490c:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <HAL_RCC_OscConfig+0x248>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004912:	f7fd ffdb 	bl	80028cc <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	e00e      	b.n	8004938 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491a:	f7fd ffd7 	bl	80028cc <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d907      	bls.n	8004938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e150      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
 800492c:	40023800 	.word	0x40023800
 8004930:	42470000 	.word	0x42470000
 8004934:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004938:	4b88      	ldr	r3, [pc, #544]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 800493a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1ea      	bne.n	800491a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8097 	beq.w	8004a80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004952:	2300      	movs	r3, #0
 8004954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004956:	4b81      	ldr	r3, [pc, #516]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	4b7d      	ldr	r3, [pc, #500]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004970:	6413      	str	r3, [r2, #64]	@ 0x40
 8004972:	4b7a      	ldr	r3, [pc, #488]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004982:	4b77      	ldr	r3, [pc, #476]	@ (8004b60 <HAL_RCC_OscConfig+0x474>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d118      	bne.n	80049c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800498e:	4b74      	ldr	r3, [pc, #464]	@ (8004b60 <HAL_RCC_OscConfig+0x474>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a73      	ldr	r2, [pc, #460]	@ (8004b60 <HAL_RCC_OscConfig+0x474>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499a:	f7fd ff97 	bl	80028cc <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a2:	f7fd ff93 	bl	80028cc <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e10c      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004b60 <HAL_RCC_OscConfig+0x474>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d106      	bne.n	80049d6 <HAL_RCC_OscConfig+0x2ea>
 80049c8:	4b64      	ldr	r3, [pc, #400]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049cc:	4a63      	ldr	r2, [pc, #396]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d4:	e01c      	b.n	8004a10 <HAL_RCC_OscConfig+0x324>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x30c>
 80049de:	4b5f      	ldr	r3, [pc, #380]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049e4:	f043 0304 	orr.w	r3, r3, #4
 80049e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ea:	4b5c      	ldr	r3, [pc, #368]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ee:	4a5b      	ldr	r2, [pc, #364]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f6:	e00b      	b.n	8004a10 <HAL_RCC_OscConfig+0x324>
 80049f8:	4b58      	ldr	r3, [pc, #352]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fc:	4a57      	ldr	r2, [pc, #348]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a04:	4b55      	ldr	r3, [pc, #340]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a08:	4a54      	ldr	r2, [pc, #336]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a0a:	f023 0304 	bic.w	r3, r3, #4
 8004a0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fd ff58 	bl	80028cc <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fd ff54 	bl	80028cc <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0cb      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a36:	4b49      	ldr	r3, [pc, #292]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0ee      	beq.n	8004a20 <HAL_RCC_OscConfig+0x334>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a44:	f7fd ff42 	bl	80028cc <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fd ff3e 	bl	80028cc <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e0b5      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a62:	4b3e      	ldr	r3, [pc, #248]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ee      	bne.n	8004a4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d105      	bne.n	8004a80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a74:	4b39      	ldr	r3, [pc, #228]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	4a38      	ldr	r2, [pc, #224]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a1 	beq.w	8004bcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a8a:	4b34      	ldr	r3, [pc, #208]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d05c      	beq.n	8004b50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d141      	bne.n	8004b22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9e:	4b31      	ldr	r3, [pc, #196]	@ (8004b64 <HAL_RCC_OscConfig+0x478>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa4:	f7fd ff12 	bl	80028cc <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fd ff0e 	bl	80028cc <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e087      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	4b27      	ldr	r3, [pc, #156]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	019b      	lsls	r3, r3, #6
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	491b      	ldr	r1, [pc, #108]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b64 <HAL_RCC_OscConfig+0x478>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afa:	f7fd fee7 	bl	80028cc <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b02:	f7fd fee3 	bl	80028cc <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e05c      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b14:	4b11      	ldr	r3, [pc, #68]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x416>
 8004b20:	e054      	b.n	8004bcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b22:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <HAL_RCC_OscConfig+0x478>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b28:	f7fd fed0 	bl	80028cc <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fd fecc 	bl	80028cc <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e045      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b42:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <HAL_RCC_OscConfig+0x470>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x444>
 8004b4e:	e03d      	b.n	8004bcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d107      	bne.n	8004b68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e038      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40007000 	.word	0x40007000
 8004b64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b68:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ec>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d028      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d121      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d11a      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b98:	4013      	ands	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d111      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d107      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023800 	.word	0x40023800

08004bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0cc      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b68      	ldr	r3, [pc, #416]	@ (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d90c      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b65      	ldr	r3, [pc, #404]	@ (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b63      	ldr	r3, [pc, #396]	@ (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0b8      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b59      	ldr	r3, [pc, #356]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a58      	ldr	r2, [pc, #352]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c48:	4b53      	ldr	r3, [pc, #332]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c54:	4b50      	ldr	r3, [pc, #320]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	494d      	ldr	r1, [pc, #308]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d044      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d119      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d003      	beq.n	8004c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d107      	bne.n	8004caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d109      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e06f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004caa:	4b3b      	ldr	r3, [pc, #236]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e067      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cba:	4b37      	ldr	r3, [pc, #220]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f023 0203 	bic.w	r2, r3, #3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4934      	ldr	r1, [pc, #208]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ccc:	f7fd fdfe 	bl	80028cc <HAL_GetTick>
 8004cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd4:	f7fd fdfa 	bl	80028cc <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e04f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	4b2b      	ldr	r3, [pc, #172]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 020c 	and.w	r2, r3, #12
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d1eb      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfc:	4b25      	ldr	r3, [pc, #148]	@ (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d20c      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0a:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	@ (8004d94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e032      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b19      	ldr	r3, [pc, #100]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4916      	ldr	r1, [pc, #88]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4e:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490e      	ldr	r1, [pc, #56]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d62:	f000 f821 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490a      	ldr	r1, [pc, #40]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	4a09      	ldr	r2, [pc, #36]	@ (8004da0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	@ (8004da4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fd fd5e 	bl	8002844 <HAL_InitTick>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40023c00 	.word	0x40023c00
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	08008ea0 	.word	0x08008ea0
 8004da0:	20000004 	.word	0x20000004
 8004da4:	20000008 	.word	0x20000008

08004da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dac:	b090      	sub	sp, #64	@ 0x40
 8004dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db4:	2300      	movs	r3, #0
 8004db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004db8:	2300      	movs	r3, #0
 8004dba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dc0:	4b59      	ldr	r3, [pc, #356]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x40>
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	f200 80a1 	bhi.w	8004f14 <HAL_RCC_GetSysClockFreq+0x16c>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x34>
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dda:	e09b      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ddc:	4b53      	ldr	r3, [pc, #332]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8004dde:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004de0:	e09b      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004de2:	4b53      	ldr	r3, [pc, #332]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8004de4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004de6:	e098      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de8:	4b4f      	ldr	r3, [pc, #316]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004df0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004df2:	4b4d      	ldr	r3, [pc, #308]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d028      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	099b      	lsrs	r3, r3, #6
 8004e04:	2200      	movs	r2, #0
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e10:	2100      	movs	r1, #0
 8004e12:	4b47      	ldr	r3, [pc, #284]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e14:	fb03 f201 	mul.w	r2, r3, r1
 8004e18:	2300      	movs	r3, #0
 8004e1a:	fb00 f303 	mul.w	r3, r0, r3
 8004e1e:	4413      	add	r3, r2
 8004e20:	4a43      	ldr	r2, [pc, #268]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e22:	fba0 1202 	umull	r1, r2, r0, r2
 8004e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e28:	460a      	mov	r2, r1
 8004e2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e2e:	4413      	add	r3, r2
 8004e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e34:	2200      	movs	r2, #0
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	61fa      	str	r2, [r7, #28]
 8004e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e42:	f7fb fe7d 	bl	8000b40 <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e4e:	e053      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e50:	4b35      	ldr	r3, [pc, #212]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	2200      	movs	r2, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	617a      	str	r2, [r7, #20]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e62:	f04f 0b00 	mov.w	fp, #0
 8004e66:	4652      	mov	r2, sl
 8004e68:	465b      	mov	r3, fp
 8004e6a:	f04f 0000 	mov.w	r0, #0
 8004e6e:	f04f 0100 	mov.w	r1, #0
 8004e72:	0159      	lsls	r1, r3, #5
 8004e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e78:	0150      	lsls	r0, r2, #5
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	ebb2 080a 	subs.w	r8, r2, sl
 8004e82:	eb63 090b 	sbc.w	r9, r3, fp
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e9a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e9e:	eb63 0509 	sbc.w	r5, r3, r9
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	00eb      	lsls	r3, r5, #3
 8004eac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eb0:	00e2      	lsls	r2, r4, #3
 8004eb2:	4614      	mov	r4, r2
 8004eb4:	461d      	mov	r5, r3
 8004eb6:	eb14 030a 	adds.w	r3, r4, sl
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	eb45 030b 	adc.w	r3, r5, fp
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ece:	4629      	mov	r1, r5
 8004ed0:	028b      	lsls	r3, r1, #10
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ed8:	4621      	mov	r1, r4
 8004eda:	028a      	lsls	r2, r1, #10
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	60fa      	str	r2, [r7, #12]
 8004ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eec:	f7fb fe28 	bl	8000b40 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	3301      	adds	r3, #1
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004f08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f12:	e002      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3740      	adds	r7, #64	@ 0x40
 8004f20:	46bd      	mov	sp, r7
 8004f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f26:	bf00      	nop
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	00f42400 	.word	0x00f42400
 8004f30:	017d7840 	.word	0x017d7840

08004f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f38:	4b03      	ldr	r3, [pc, #12]	@ (8004f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000004 	.word	0x20000004

08004f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f50:	f7ff fff0 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	0a9b      	lsrs	r3, r3, #10
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	4903      	ldr	r1, [pc, #12]	@ (8004f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f62:	5ccb      	ldrb	r3, [r1, r3]
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	08008eb0 	.word	0x08008eb0

08004f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f78:	f7ff ffdc 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	0b5b      	lsrs	r3, r3, #13
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4903      	ldr	r1, [pc, #12]	@ (8004f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40023800 	.word	0x40023800
 8004f98:	08008eb0 	.word	0x08008eb0

08004f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e041      	b.n	8005032 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fd f9ae 	bl	8002324 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f000 f9b8 	bl	8005350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d109      	bne.n	8005060 <HAL_TIM_PWM_Start+0x24>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	e022      	b.n	80050a6 <HAL_TIM_PWM_Start+0x6a>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b04      	cmp	r3, #4
 8005064:	d109      	bne.n	800507a <HAL_TIM_PWM_Start+0x3e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e015      	b.n	80050a6 <HAL_TIM_PWM_Start+0x6a>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d109      	bne.n	8005094 <HAL_TIM_PWM_Start+0x58>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	bf14      	ite	ne
 800508c:	2301      	movne	r3, #1
 800508e:	2300      	moveq	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e008      	b.n	80050a6 <HAL_TIM_PWM_Start+0x6a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e07c      	b.n	80051a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_TIM_PWM_Start+0x82>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050bc:	e013      	b.n	80050e6 <HAL_TIM_PWM_Start+0xaa>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Start+0x92>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050cc:	e00b      	b.n	80050e6 <HAL_TIM_PWM_Start+0xaa>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Start+0xa2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050dc:	e003      	b.n	80050e6 <HAL_TIM_PWM_Start+0xaa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fb8a 	bl	8005808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2d      	ldr	r2, [pc, #180]	@ (80051b0 <HAL_TIM_PWM_Start+0x174>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_TIM_PWM_Start+0xcc>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2c      	ldr	r2, [pc, #176]	@ (80051b4 <HAL_TIM_PWM_Start+0x178>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_TIM_PWM_Start+0xd0>
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_TIM_PWM_Start+0xd2>
 800510c:	2300      	movs	r3, #0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005120:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a22      	ldr	r2, [pc, #136]	@ (80051b0 <HAL_TIM_PWM_Start+0x174>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_TIM_PWM_Start+0x136>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005134:	d01d      	beq.n	8005172 <HAL_TIM_PWM_Start+0x136>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1f      	ldr	r2, [pc, #124]	@ (80051b8 <HAL_TIM_PWM_Start+0x17c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_TIM_PWM_Start+0x136>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1d      	ldr	r2, [pc, #116]	@ (80051bc <HAL_TIM_PWM_Start+0x180>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_TIM_PWM_Start+0x136>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1c      	ldr	r2, [pc, #112]	@ (80051c0 <HAL_TIM_PWM_Start+0x184>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_TIM_PWM_Start+0x136>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <HAL_TIM_PWM_Start+0x178>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_TIM_PWM_Start+0x136>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <HAL_TIM_PWM_Start+0x188>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIM_PWM_Start+0x136>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a16      	ldr	r2, [pc, #88]	@ (80051c8 <HAL_TIM_PWM_Start+0x18c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d111      	bne.n	8005196 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b06      	cmp	r3, #6
 8005182:	d010      	beq.n	80051a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	e007      	b.n	80051a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40001800 	.word	0x40001800

080051cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e0ae      	b.n	8005348 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b0c      	cmp	r3, #12
 80051f6:	f200 809f 	bhi.w	8005338 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005200 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005235 	.word	0x08005235
 8005204:	08005339 	.word	0x08005339
 8005208:	08005339 	.word	0x08005339
 800520c:	08005339 	.word	0x08005339
 8005210:	08005275 	.word	0x08005275
 8005214:	08005339 	.word	0x08005339
 8005218:	08005339 	.word	0x08005339
 800521c:	08005339 	.word	0x08005339
 8005220:	080052b7 	.word	0x080052b7
 8005224:	08005339 	.word	0x08005339
 8005228:	08005339 	.word	0x08005339
 800522c:	08005339 	.word	0x08005339
 8005230:	080052f7 	.word	0x080052f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f934 	bl	80054a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0208 	orr.w	r2, r2, #8
 800524e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6999      	ldr	r1, [r3, #24]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	619a      	str	r2, [r3, #24]
      break;
 8005272:	e064      	b.n	800533e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f984 	bl	8005588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800528e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6999      	ldr	r1, [r3, #24]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	021a      	lsls	r2, r3, #8
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	619a      	str	r2, [r3, #24]
      break;
 80052b4:	e043      	b.n	800533e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 f9d9 	bl	8005674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0208 	orr.w	r2, r2, #8
 80052d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0204 	bic.w	r2, r2, #4
 80052e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69d9      	ldr	r1, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	61da      	str	r2, [r3, #28]
      break;
 80052f4:	e023      	b.n	800533e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fa2d 	bl	800575c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69da      	ldr	r2, [r3, #28]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69d9      	ldr	r1, [r3, #28]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	021a      	lsls	r2, r3, #8
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	61da      	str	r2, [r3, #28]
      break;
 8005336:	e002      	b.n	800533e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	75fb      	strb	r3, [r7, #23]
      break;
 800533c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005346:	7dfb      	ldrb	r3, [r7, #23]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a46      	ldr	r2, [pc, #280]	@ (800547c <TIM_Base_SetConfig+0x12c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536e:	d00f      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a43      	ldr	r2, [pc, #268]	@ (8005480 <TIM_Base_SetConfig+0x130>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00b      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a42      	ldr	r2, [pc, #264]	@ (8005484 <TIM_Base_SetConfig+0x134>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d007      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a41      	ldr	r2, [pc, #260]	@ (8005488 <TIM_Base_SetConfig+0x138>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a40      	ldr	r2, [pc, #256]	@ (800548c <TIM_Base_SetConfig+0x13c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d108      	bne.n	80053a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a35      	ldr	r2, [pc, #212]	@ (800547c <TIM_Base_SetConfig+0x12c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d02b      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b0:	d027      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a32      	ldr	r2, [pc, #200]	@ (8005480 <TIM_Base_SetConfig+0x130>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d023      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a31      	ldr	r2, [pc, #196]	@ (8005484 <TIM_Base_SetConfig+0x134>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01f      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a30      	ldr	r2, [pc, #192]	@ (8005488 <TIM_Base_SetConfig+0x138>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01b      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2f      	ldr	r2, [pc, #188]	@ (800548c <TIM_Base_SetConfig+0x13c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d017      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005490 <TIM_Base_SetConfig+0x140>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005494 <TIM_Base_SetConfig+0x144>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005498 <TIM_Base_SetConfig+0x148>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2b      	ldr	r2, [pc, #172]	@ (800549c <TIM_Base_SetConfig+0x14c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2a      	ldr	r2, [pc, #168]	@ (80054a0 <TIM_Base_SetConfig+0x150>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a29      	ldr	r2, [pc, #164]	@ (80054a4 <TIM_Base_SetConfig+0x154>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a10      	ldr	r2, [pc, #64]	@ (800547c <TIM_Base_SetConfig+0x12c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_Base_SetConfig+0xf8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a12      	ldr	r2, [pc, #72]	@ (800548c <TIM_Base_SetConfig+0x13c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d103      	bne.n	8005450 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f023 0201 	bic.w	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	611a      	str	r2, [r3, #16]
  }
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40010000 	.word	0x40010000
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40010400 	.word	0x40010400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800
 800549c:	40001800 	.word	0x40001800
 80054a0:	40001c00 	.word	0x40001c00
 80054a4:	40002000 	.word	0x40002000

080054a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f023 0201 	bic.w	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 0302 	bic.w	r3, r3, #2
 80054f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a20      	ldr	r2, [pc, #128]	@ (8005580 <TIM_OC1_SetConfig+0xd8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_OC1_SetConfig+0x64>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <TIM_OC1_SetConfig+0xdc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d10c      	bne.n	8005526 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f023 0308 	bic.w	r3, r3, #8
 8005512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 0304 	bic.w	r3, r3, #4
 8005524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a15      	ldr	r2, [pc, #84]	@ (8005580 <TIM_OC1_SetConfig+0xd8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_OC1_SetConfig+0x8e>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a14      	ldr	r2, [pc, #80]	@ (8005584 <TIM_OC1_SetConfig+0xdc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d111      	bne.n	800555a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800553c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	621a      	str	r2, [r3, #32]
}
 8005574:	bf00      	nop
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400

08005588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	f023 0210 	bic.w	r2, r3, #16
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0320 	bic.w	r3, r3, #32
 80055d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a22      	ldr	r2, [pc, #136]	@ (800566c <TIM_OC2_SetConfig+0xe4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_OC2_SetConfig+0x68>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a21      	ldr	r2, [pc, #132]	@ (8005670 <TIM_OC2_SetConfig+0xe8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d10d      	bne.n	800560c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800560a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a17      	ldr	r2, [pc, #92]	@ (800566c <TIM_OC2_SetConfig+0xe4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d003      	beq.n	800561c <TIM_OC2_SetConfig+0x94>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a16      	ldr	r2, [pc, #88]	@ (8005670 <TIM_OC2_SetConfig+0xe8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d113      	bne.n	8005644 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800562a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40010000 	.word	0x40010000
 8005670:	40010400 	.word	0x40010400

08005674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a21      	ldr	r2, [pc, #132]	@ (8005754 <TIM_OC3_SetConfig+0xe0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_OC3_SetConfig+0x66>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a20      	ldr	r2, [pc, #128]	@ (8005758 <TIM_OC3_SetConfig+0xe4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10d      	bne.n	80056f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a16      	ldr	r2, [pc, #88]	@ (8005754 <TIM_OC3_SetConfig+0xe0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC3_SetConfig+0x92>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a15      	ldr	r2, [pc, #84]	@ (8005758 <TIM_OC3_SetConfig+0xe4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d113      	bne.n	800572e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800570c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	621a      	str	r2, [r3, #32]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40010000 	.word	0x40010000
 8005758:	40010400 	.word	0x40010400

0800575c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800578a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	031b      	lsls	r3, r3, #12
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a12      	ldr	r2, [pc, #72]	@ (8005800 <TIM_OC4_SetConfig+0xa4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC4_SetConfig+0x68>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a11      	ldr	r2, [pc, #68]	@ (8005804 <TIM_OC4_SetConfig+0xa8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d109      	bne.n	80057d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	019b      	lsls	r3, r3, #6
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40010000 	.word	0x40010000
 8005804:	40010400 	.word	0x40010400

08005808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2201      	movs	r2, #1
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a1a      	ldr	r2, [r3, #32]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	43db      	mvns	r3, r3
 800582a:	401a      	ands	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005868:	2302      	movs	r3, #2
 800586a:	e05a      	b.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a21      	ldr	r2, [pc, #132]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b8:	d01d      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1d      	ldr	r2, [pc, #116]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1a      	ldr	r2, [pc, #104]	@ (800593c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a18      	ldr	r2, [pc, #96]	@ (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a17      	ldr	r2, [pc, #92]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a15      	ldr	r2, [pc, #84]	@ (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10c      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	4313      	orrs	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40010000 	.word	0x40010000
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40010400 	.word	0x40010400
 8005944:	40014000 	.word	0x40014000
 8005948:	40001800 	.word	0x40001800

0800594c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e042      	b.n	80059e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fc fe04 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	@ 0x24
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800598e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f973 	bl	8006c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	@ 0x28
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d175      	bne.n	8005af8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_UART_Transmit+0x2c>
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e06e      	b.n	8005afa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2221      	movs	r2, #33	@ 0x21
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a2a:	f7fc ff4f 	bl	80028cc <HAL_GetTick>
 8005a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	88fa      	ldrh	r2, [r7, #6]
 8005a34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	88fa      	ldrh	r2, [r7, #6]
 8005a3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a44:	d108      	bne.n	8005a58 <HAL_UART_Transmit+0x6c>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e003      	b.n	8005a60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a60:	e02e      	b.n	8005ac0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2180      	movs	r1, #128	@ 0x80
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fdeb 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e03a      	b.n	8005afa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10b      	bne.n	8005aa2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	61bb      	str	r3, [r7, #24]
 8005aa0:	e007      	b.n	8005ab2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1cb      	bne.n	8005a62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2140      	movs	r1, #64	@ 0x40
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fdb7 	bl	8006648 <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e006      	b.n	8005afa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d112      	bne.n	8005b42 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_UART_Receive_DMA+0x26>
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e00b      	b.n	8005b44 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	461a      	mov	r2, r3
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fddf 	bl	80066fc <UART_Start_Receive_DMA>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	e000      	b.n	8005b44 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b09a      	sub	sp, #104	@ 0x68
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005b74:	657a      	str	r2, [r7, #84]	@ 0x54
 8005b76:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005b82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e5      	bne.n	8005b54 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3314      	adds	r3, #20
 8005b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3314      	adds	r3, #20
 8005ba6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ba8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d119      	bne.n	8005bf8 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f023 0310 	bic.w	r3, r3, #16
 8005bda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e5      	bne.n	8005bc4 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c02:	2b40      	cmp	r3, #64	@ 0x40
 8005c04:	d136      	bne.n	8005c74 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3314      	adds	r3, #20
 8005c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c26:	61ba      	str	r2, [r7, #24]
 8005c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6979      	ldr	r1, [r7, #20]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	613b      	str	r3, [r7, #16]
   return(result);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d018      	beq.n	8005c74 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c46:	2200      	movs	r2, #0
 8005c48:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fd f884 	bl	8002d5c <HAL_DMA_Abort>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fd fa98 	bl	8003194 <HAL_DMA_GetError>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d104      	bne.n	8005c74 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2210      	movs	r2, #16
 8005c6e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e00a      	b.n	8005c8a <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3768      	adds	r7, #104	@ 0x68
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b0a2      	sub	sp, #136	@ 0x88
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cb4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8005cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ccc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e3      	bne.n	8005ca2 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3314      	adds	r3, #20
 8005ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cec:	f023 0301 	bic.w	r3, r3, #1
 8005cf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005cfa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cfc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e5      	bne.n	8005cda <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d119      	bne.n	8005d4a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d28:	f023 0310 	bic.w	r3, r3, #16
 8005d2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005d36:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e5      	bne.n	8005d16 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00f      	beq.n	8005d72 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5c:	2b80      	cmp	r3, #128	@ 0x80
 8005d5e:	d104      	bne.n	8005d6a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	4a53      	ldr	r2, [pc, #332]	@ (8005eb4 <HAL_UART_Abort_IT+0x220>)
 8005d66:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d68:	e003      	b.n	8005d72 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6e:	2200      	movs	r2, #0
 8005d70:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d84:	2b40      	cmp	r3, #64	@ 0x40
 8005d86:	d104      	bne.n	8005d92 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8005eb8 <HAL_UART_Abort_IT+0x224>)
 8005d8e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d90:	e003      	b.n	8005d9a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d96:	2200      	movs	r2, #0
 8005d98:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da4:	2b80      	cmp	r3, #128	@ 0x80
 8005da6:	d12d      	bne.n	8005e04 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	623b      	str	r3, [r7, #32]
   return(result);
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3314      	adds	r3, #20
 8005dc6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005dc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e5      	bne.n	8005da8 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00f      	beq.n	8005e04 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fd f827 	bl	8002e3c <HAL_DMA_Abort_IT>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	2200      	movs	r2, #0
 8005dfa:	651a      	str	r2, [r3, #80]	@ 0x50
 8005dfc:	e002      	b.n	8005e04 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0e:	2b40      	cmp	r3, #64	@ 0x40
 8005e10:	d130      	bne.n	8005e74 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e28:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005e32:	61fa      	str	r2, [r7, #28]
 8005e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	69b9      	ldr	r1, [r7, #24]
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e5      	bne.n	8005e12 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d012      	beq.n	8005e74 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fc fff2 	bl	8002e3c <HAL_DMA_Abort_IT>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e62:	2200      	movs	r2, #0
 8005e64:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e6c:	e002      	b.n	8005e74 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8005e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d116      	bne.n	8005eaa <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 faaf 	bl	8006408 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3788      	adds	r7, #136	@ 0x88
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	0800696f 	.word	0x0800696f
 8005eb8:	080069cf 	.word	0x080069cf

08005ebc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b0ba      	sub	sp, #232	@ 0xe8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10f      	bne.n	8005f22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_UART_IRQHandler+0x66>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fdef 	bl	8006afe <UART_Receive_IT>
      return;
 8005f20:	e25b      	b.n	80063da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80de 	beq.w	80060e8 <HAL_UART_IRQHandler+0x22c>
 8005f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80d1 	beq.w	80060e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <HAL_UART_IRQHandler+0xae>
 8005f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f62:	f043 0201 	orr.w	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <HAL_UART_IRQHandler+0xd2>
 8005f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f86:	f043 0202 	orr.w	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <HAL_UART_IRQHandler+0xf6>
 8005f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005faa:	f043 0204 	orr.w	r2, r3, #4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x126>
 8005fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d105      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	f043 0208 	orr.w	r2, r3, #8
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 81f2 	beq.w	80063d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_UART_IRQHandler+0x14e>
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fd7a 	bl	8006afe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006014:	2b40      	cmp	r3, #64	@ 0x40
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d103      	bne.n	8006036 <HAL_UART_IRQHandler+0x17a>
 800602e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006032:	2b00      	cmp	r3, #0
 8006034:	d04f      	beq.n	80060d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fc22 	bl	8006880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d141      	bne.n	80060ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3314      	adds	r3, #20
 8006050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006054:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006060:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3314      	adds	r3, #20
 8006072:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006076:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800607a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800608e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1d9      	bne.n	800604a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d013      	beq.n	80060c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a2:	4a7e      	ldr	r2, [pc, #504]	@ (800629c <HAL_UART_IRQHandler+0x3e0>)
 80060a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fc fec6 	bl	8002e3c <HAL_DMA_Abort_IT>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	e00e      	b.n	80060e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fa fff0 	bl	80010ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	e00a      	b.n	80060e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fa ffec 	bl	80010ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d4:	e006      	b.n	80060e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fa ffe8 	bl	80010ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80060e2:	e175      	b.n	80063d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e4:	bf00      	nop
    return;
 80060e6:	e173      	b.n	80063d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 814f 	bne.w	8006390 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 8148 	beq.w	8006390 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 8141 	beq.w	8006390 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800610e:	2300      	movs	r3, #0
 8006110:	60bb      	str	r3, [r7, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60bb      	str	r3, [r7, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612e:	2b40      	cmp	r3, #64	@ 0x40
 8006130:	f040 80b6 	bne.w	80062a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006140:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 8145 	beq.w	80063d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800614e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006152:	429a      	cmp	r2, r3
 8006154:	f080 813e 	bcs.w	80063d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800615e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800616a:	f000 8088 	beq.w	800627e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006184:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800618c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	330c      	adds	r3, #12
 8006196:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800619a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800619e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1d9      	bne.n	800616e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3314      	adds	r3, #20
 80061c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3314      	adds	r3, #20
 80061da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e1      	bne.n	80061ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3314      	adds	r3, #20
 80061fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006206:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800620c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3314      	adds	r3, #20
 8006216:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800621a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800621c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006220:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e3      	bne.n	80061f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2220      	movs	r2, #32
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006246:	e853 3f00 	ldrex	r3, [r3]
 800624a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800624c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800624e:	f023 0310 	bic.w	r3, r3, #16
 8006252:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	330c      	adds	r3, #12
 800625c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006260:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006262:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006266:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800626e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e3      	bne.n	800623c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006278:	4618      	mov	r0, r3
 800627a:	f7fc fd6f 	bl	8002d5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800628c:	b29b      	uxth	r3, r3
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	b29b      	uxth	r3, r3
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f8c1 	bl	800641c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800629a:	e09b      	b.n	80063d4 <HAL_UART_IRQHandler+0x518>
 800629c:	08006947 	.word	0x08006947
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 808e 	beq.w	80063d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80062bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 8089 	beq.w	80063d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	330c      	adds	r3, #12
 80062cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80062ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80062ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e3      	bne.n	80062c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3314      	adds	r3, #20
 8006304:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	623b      	str	r3, [r7, #32]
   return(result);
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3314      	adds	r3, #20
 800631e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006322:	633a      	str	r2, [r7, #48]	@ 0x30
 8006324:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e3      	bne.n	80062fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	60fb      	str	r3, [r7, #12]
   return(result);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0310 	bic.w	r3, r3, #16
 800635a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	330c      	adds	r3, #12
 8006364:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006368:	61fa      	str	r2, [r7, #28]
 800636a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	69b9      	ldr	r1, [r7, #24]
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	617b      	str	r3, [r7, #20]
   return(result);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e3      	bne.n	8006344 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006382:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f847 	bl	800641c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800638e:	e023      	b.n	80063d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <HAL_UART_IRQHandler+0x4f4>
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fb40 	bl	8006a2e <UART_Transmit_IT>
    return;
 80063ae:	e014      	b.n	80063da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00e      	beq.n	80063da <HAL_UART_IRQHandler+0x51e>
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fb80 	bl	8006ace <UART_EndTransmit_IT>
    return;
 80063ce:	e004      	b.n	80063da <HAL_UART_IRQHandler+0x51e>
    return;
 80063d0:	bf00      	nop
 80063d2:	e002      	b.n	80063da <HAL_UART_IRQHandler+0x51e>
      return;
 80063d4:	bf00      	nop
 80063d6:	e000      	b.n	80063da <HAL_UART_IRQHandler+0x51e>
      return;
 80063d8:	bf00      	nop
  }
}
 80063da:	37e8      	adds	r7, #232	@ 0xe8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b09c      	sub	sp, #112	@ 0x70
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d172      	bne.n	800654e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800646a:	2200      	movs	r2, #0
 800646c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800646e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800647e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	330c      	adds	r3, #12
 800648c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800648e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006490:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800649c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e5      	bne.n	800646e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80064ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3314      	adds	r3, #20
 80064c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80064c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80064c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e5      	bne.n	80064a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3314      	adds	r3, #20
 80064dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	623b      	str	r3, [r7, #32]
   return(result);
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3314      	adds	r3, #20
 80064f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80064f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80064f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e5      	bne.n	80064d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800650a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800650c:	2220      	movs	r2, #32
 800650e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006516:	2b01      	cmp	r3, #1
 8006518:	d119      	bne.n	800654e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	60fb      	str	r3, [r7, #12]
   return(result);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f023 0310 	bic.w	r3, r3, #16
 8006530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	330c      	adds	r3, #12
 8006538:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800653a:	61fa      	str	r2, [r7, #28]
 800653c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	69b9      	ldr	r1, [r7, #24]
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	617b      	str	r3, [r7, #20]
   return(result);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e5      	bne.n	800651a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800654e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006550:	2200      	movs	r2, #0
 8006552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006558:	2b01      	cmp	r3, #1
 800655a:	d106      	bne.n	800656a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800655c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800655e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006560:	4619      	mov	r1, r3
 8006562:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006564:	f7ff ff5a 	bl	800641c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006568:	e002      	b.n	8006570 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800656a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800656c:	f7fa fd72 	bl	8001054 <HAL_UART_RxCpltCallback>
}
 8006570:	bf00      	nop
 8006572:	3770      	adds	r7, #112	@ 0x70
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006590:	2b01      	cmp	r3, #1
 8006592:	d108      	bne.n	80065a6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006598:	085b      	lsrs	r3, r3, #1
 800659a:	b29b      	uxth	r3, r3
 800659c:	4619      	mov	r1, r3
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f7ff ff3c 	bl	800641c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065a4:	e002      	b.n	80065ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff ff24 	bl	80063f4 <HAL_UART_RxHalfCpltCallback>
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d0:	2b80      	cmp	r3, #128	@ 0x80
 80065d2:	bf0c      	ite	eq
 80065d4:	2301      	moveq	r3, #1
 80065d6:	2300      	movne	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b21      	cmp	r3, #33	@ 0x21
 80065e6:	d108      	bne.n	80065fa <UART_DMAError+0x46>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2200      	movs	r2, #0
 80065f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80065f4:	68b8      	ldr	r0, [r7, #8]
 80065f6:	f000 f91b 	bl	8006830 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006604:	2b40      	cmp	r3, #64	@ 0x40
 8006606:	bf0c      	ite	eq
 8006608:	2301      	moveq	r3, #1
 800660a:	2300      	movne	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b22      	cmp	r3, #34	@ 0x22
 800661a:	d108      	bne.n	800662e <UART_DMAError+0x7a>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2200      	movs	r2, #0
 8006626:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006628:	68b8      	ldr	r0, [r7, #8]
 800662a:	f000 f929 	bl	8006880 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006632:	f043 0210 	orr.w	r2, r3, #16
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800663a:	68b8      	ldr	r0, [r7, #8]
 800663c:	f7fa fd36 	bl	80010ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006658:	e03b      	b.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006660:	d037      	beq.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006662:	f7fc f933 	bl	80028cc <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	6a3a      	ldr	r2, [r7, #32]
 800666e:	429a      	cmp	r2, r3
 8006670:	d302      	bcc.n	8006678 <UART_WaitOnFlagUntilTimeout+0x30>
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e03a      	b.n	80066f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d023      	beq.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b80      	cmp	r3, #128	@ 0x80
 800668e:	d020      	beq.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b40      	cmp	r3, #64	@ 0x40
 8006694:	d01d      	beq.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d116      	bne.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f8e0 	bl	8006880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2208      	movs	r2, #8
 80066c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e00f      	b.n	80066f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4013      	ands	r3, r2
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	bf0c      	ite	eq
 80066e2:	2301      	moveq	r3, #1
 80066e4:	2300      	movne	r3, #0
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d0b4      	beq.n	800665a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b098      	sub	sp, #96	@ 0x60
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2222      	movs	r2, #34	@ 0x22
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006728:	4a3e      	ldr	r2, [pc, #248]	@ (8006824 <UART_Start_Receive_DMA+0x128>)
 800672a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006730:	4a3d      	ldr	r2, [pc, #244]	@ (8006828 <UART_Start_Receive_DMA+0x12c>)
 8006732:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006738:	4a3c      	ldr	r2, [pc, #240]	@ (800682c <UART_Start_Receive_DMA+0x130>)
 800673a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006740:	2200      	movs	r2, #0
 8006742:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3304      	adds	r3, #4
 8006754:	4619      	mov	r1, r3
 8006756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	f7fc faa6 	bl	8002cac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d019      	beq.n	80067b2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	330c      	adds	r3, #12
 8006784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800678e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006794:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	330c      	adds	r3, #12
 800679c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800679e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80067a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80067a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e5      	bne.n	800677e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3314      	adds	r3, #20
 80067d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067d2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80067d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80067d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e5      	bne.n	80067b2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	617b      	str	r3, [r7, #20]
   return(result);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3314      	adds	r3, #20
 8006804:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006806:	627a      	str	r2, [r7, #36]	@ 0x24
 8006808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	6a39      	ldr	r1, [r7, #32]
 800680c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	61fb      	str	r3, [r7, #28]
   return(result);
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1e5      	bne.n	80067e6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3760      	adds	r7, #96	@ 0x60
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	0800644d 	.word	0x0800644d
 8006828:	08006579 	.word	0x08006579
 800682c:	080065b5 	.word	0x080065b5

08006830 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b089      	sub	sp, #36	@ 0x24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	330c      	adds	r3, #12
 800683e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	e853 3f00 	ldrex	r3, [r3]
 8006846:	60bb      	str	r3, [r7, #8]
   return(result);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	330c      	adds	r3, #12
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	61ba      	str	r2, [r7, #24]
 800685a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685c:	6979      	ldr	r1, [r7, #20]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	e841 2300 	strex	r3, r2, [r1]
 8006864:	613b      	str	r3, [r7, #16]
   return(result);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1e5      	bne.n	8006838 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006874:	bf00      	nop
 8006876:	3724      	adds	r7, #36	@ 0x24
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b095      	sub	sp, #84	@ 0x54
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	330c      	adds	r3, #12
 800688e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800689e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	330c      	adds	r3, #12
 80068a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80068aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e5      	bne.n	8006888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3314      	adds	r3, #20
 80068c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3314      	adds	r3, #20
 80068da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e5      	bne.n	80068bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d119      	bne.n	800692c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	330c      	adds	r3, #12
 80068fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	60bb      	str	r3, [r7, #8]
   return(result);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f023 0310 	bic.w	r3, r3, #16
 800690e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006918:	61ba      	str	r2, [r7, #24]
 800691a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6979      	ldr	r1, [r7, #20]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	613b      	str	r3, [r7, #16]
   return(result);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e5      	bne.n	80068f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800693a:	bf00      	nop
 800693c:	3754      	adds	r7, #84	@ 0x54
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006952:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f7fa fba3 	bl	80010ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006980:	2200      	movs	r2, #0
 8006982:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006992:	2b00      	cmp	r3, #0
 8006994:	d117      	bne.n	80069c6 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7ff fd22 	bl	8006408 <HAL_UART_AbortCpltCallback>
 80069c4:	e000      	b.n	80069c8 <UART_DMATxAbortCallback+0x5a>
      return;
 80069c6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069da:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e0:	2200      	movs	r2, #0
 80069e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d117      	bne.n	8006a26 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7ff fcf2 	bl	8006408 <HAL_UART_AbortCpltCallback>
 8006a24:	e000      	b.n	8006a28 <UART_DMARxAbortCallback+0x5a>
      return;
 8006a26:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b21      	cmp	r3, #33	@ 0x21
 8006a40:	d13e      	bne.n	8006ac0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a4a:	d114      	bne.n	8006a76 <UART_Transmit_IT+0x48>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d110      	bne.n	8006a76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	1c9a      	adds	r2, r3, #2
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	621a      	str	r2, [r3, #32]
 8006a74:	e008      	b.n	8006a88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	1c59      	adds	r1, r3, #1
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6211      	str	r1, [r2, #32]
 8006a80:	781a      	ldrb	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	4619      	mov	r1, r3
 8006a96:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10f      	bne.n	8006abc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006aaa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006aba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	e000      	b.n	8006ac2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ac0:	2302      	movs	r3, #2
  }
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ae4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fc76 	bl	80063e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b08c      	sub	sp, #48	@ 0x30
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b22      	cmp	r3, #34	@ 0x22
 8006b10:	f040 80ae 	bne.w	8006c70 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b1c:	d117      	bne.n	8006b4e <UART_Receive_IT+0x50>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d113      	bne.n	8006b4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b46:	1c9a      	adds	r2, r3, #2
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b4c:	e026      	b.n	8006b9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b60:	d007      	beq.n	8006b72 <UART_Receive_IT+0x74>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <UART_Receive_IT+0x82>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e008      	b.n	8006b92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d15d      	bne.n	8006c6c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0220 	bic.w	r2, r2, #32
 8006bbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006bce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d135      	bne.n	8006c62 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f023 0310 	bic.w	r3, r3, #16
 8006c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c1c:	623a      	str	r2, [r7, #32]
 8006c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	69f9      	ldr	r1, [r7, #28]
 8006c22:	6a3a      	ldr	r2, [r7, #32]
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e5      	bne.n	8006bfc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b10      	cmp	r3, #16
 8006c3c:	d10a      	bne.n	8006c54 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff fbde 	bl	800641c <HAL_UARTEx_RxEventCallback>
 8006c60:	e002      	b.n	8006c68 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fa f9f6 	bl	8001054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e002      	b.n	8006c72 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e000      	b.n	8006c72 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c70:	2302      	movs	r3, #2
  }
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3730      	adds	r7, #48	@ 0x30
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c80:	b0c0      	sub	sp, #256	@ 0x100
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c98:	68d9      	ldr	r1, [r3, #12]
 8006c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	ea40 0301 	orr.w	r3, r0, r1
 8006ca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006cd4:	f021 010c 	bic.w	r1, r1, #12
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ce2:	430b      	orrs	r3, r1
 8006ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf6:	6999      	ldr	r1, [r3, #24]
 8006cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	ea40 0301 	orr.w	r3, r0, r1
 8006d02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4b8f      	ldr	r3, [pc, #572]	@ (8006f48 <UART_SetConfig+0x2cc>)
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d005      	beq.n	8006d1c <UART_SetConfig+0xa0>
 8006d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4b8d      	ldr	r3, [pc, #564]	@ (8006f4c <UART_SetConfig+0x2d0>)
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d104      	bne.n	8006d26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d1c:	f7fe f92a 	bl	8004f74 <HAL_RCC_GetPCLK2Freq>
 8006d20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d24:	e003      	b.n	8006d2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d26:	f7fe f911 	bl	8004f4c <HAL_RCC_GetPCLK1Freq>
 8006d2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d38:	f040 810c 	bne.w	8006f54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d4e:	4622      	mov	r2, r4
 8006d50:	462b      	mov	r3, r5
 8006d52:	1891      	adds	r1, r2, r2
 8006d54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d56:	415b      	adcs	r3, r3
 8006d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d5e:	4621      	mov	r1, r4
 8006d60:	eb12 0801 	adds.w	r8, r2, r1
 8006d64:	4629      	mov	r1, r5
 8006d66:	eb43 0901 	adc.w	r9, r3, r1
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d7e:	4690      	mov	r8, r2
 8006d80:	4699      	mov	r9, r3
 8006d82:	4623      	mov	r3, r4
 8006d84:	eb18 0303 	adds.w	r3, r8, r3
 8006d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	eb49 0303 	adc.w	r3, r9, r3
 8006d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006da2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006daa:	460b      	mov	r3, r1
 8006dac:	18db      	adds	r3, r3, r3
 8006dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006db0:	4613      	mov	r3, r2
 8006db2:	eb42 0303 	adc.w	r3, r2, r3
 8006db6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006db8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006dbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006dc0:	f7f9 febe 	bl	8000b40 <__aeabi_uldivmod>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4b61      	ldr	r3, [pc, #388]	@ (8006f50 <UART_SetConfig+0x2d4>)
 8006dca:	fba3 2302 	umull	r2, r3, r3, r2
 8006dce:	095b      	lsrs	r3, r3, #5
 8006dd0:	011c      	lsls	r4, r3, #4
 8006dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ddc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006de0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006de4:	4642      	mov	r2, r8
 8006de6:	464b      	mov	r3, r9
 8006de8:	1891      	adds	r1, r2, r2
 8006dea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006dec:	415b      	adcs	r3, r3
 8006dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006df0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006df4:	4641      	mov	r1, r8
 8006df6:	eb12 0a01 	adds.w	sl, r2, r1
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	eb43 0b01 	adc.w	fp, r3, r1
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e14:	4692      	mov	sl, r2
 8006e16:	469b      	mov	fp, r3
 8006e18:	4643      	mov	r3, r8
 8006e1a:	eb1a 0303 	adds.w	r3, sl, r3
 8006e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e22:	464b      	mov	r3, r9
 8006e24:	eb4b 0303 	adc.w	r3, fp, r3
 8006e28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e40:	460b      	mov	r3, r1
 8006e42:	18db      	adds	r3, r3, r3
 8006e44:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e46:	4613      	mov	r3, r2
 8006e48:	eb42 0303 	adc.w	r3, r2, r3
 8006e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e56:	f7f9 fe73 	bl	8000b40 <__aeabi_uldivmod>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4611      	mov	r1, r2
 8006e60:	4b3b      	ldr	r3, [pc, #236]	@ (8006f50 <UART_SetConfig+0x2d4>)
 8006e62:	fba3 2301 	umull	r2, r3, r3, r1
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	2264      	movs	r2, #100	@ 0x64
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	1acb      	subs	r3, r1, r3
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e76:	4b36      	ldr	r3, [pc, #216]	@ (8006f50 <UART_SetConfig+0x2d4>)
 8006e78:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7c:	095b      	lsrs	r3, r3, #5
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e84:	441c      	add	r4, r3
 8006e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e98:	4642      	mov	r2, r8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	1891      	adds	r1, r2, r2
 8006e9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ea0:	415b      	adcs	r3, r3
 8006ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ea8:	4641      	mov	r1, r8
 8006eaa:	1851      	adds	r1, r2, r1
 8006eac:	6339      	str	r1, [r7, #48]	@ 0x30
 8006eae:	4649      	mov	r1, r9
 8006eb0:	414b      	adcs	r3, r1
 8006eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ec0:	4659      	mov	r1, fp
 8006ec2:	00cb      	lsls	r3, r1, #3
 8006ec4:	4651      	mov	r1, sl
 8006ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eca:	4651      	mov	r1, sl
 8006ecc:	00ca      	lsls	r2, r1, #3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4642      	mov	r2, r8
 8006ed6:	189b      	adds	r3, r3, r2
 8006ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006edc:	464b      	mov	r3, r9
 8006ede:	460a      	mov	r2, r1
 8006ee0:	eb42 0303 	adc.w	r3, r2, r3
 8006ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ef4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006efc:	460b      	mov	r3, r1
 8006efe:	18db      	adds	r3, r3, r3
 8006f00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f02:	4613      	mov	r3, r2
 8006f04:	eb42 0303 	adc.w	r3, r2, r3
 8006f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f12:	f7f9 fe15 	bl	8000b40 <__aeabi_uldivmod>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <UART_SetConfig+0x2d4>)
 8006f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	2164      	movs	r1, #100	@ 0x64
 8006f24:	fb01 f303 	mul.w	r3, r1, r3
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	3332      	adds	r3, #50	@ 0x32
 8006f2e:	4a08      	ldr	r2, [pc, #32]	@ (8006f50 <UART_SetConfig+0x2d4>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	f003 0207 	and.w	r2, r3, #7
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4422      	add	r2, r4
 8006f42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f44:	e106      	b.n	8007154 <UART_SetConfig+0x4d8>
 8006f46:	bf00      	nop
 8006f48:	40011000 	.word	0x40011000
 8006f4c:	40011400 	.word	0x40011400
 8006f50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f66:	4642      	mov	r2, r8
 8006f68:	464b      	mov	r3, r9
 8006f6a:	1891      	adds	r1, r2, r2
 8006f6c:	6239      	str	r1, [r7, #32]
 8006f6e:	415b      	adcs	r3, r3
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f76:	4641      	mov	r1, r8
 8006f78:	1854      	adds	r4, r2, r1
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	eb43 0501 	adc.w	r5, r3, r1
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	00eb      	lsls	r3, r5, #3
 8006f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f8e:	00e2      	lsls	r2, r4, #3
 8006f90:	4614      	mov	r4, r2
 8006f92:	461d      	mov	r5, r3
 8006f94:	4643      	mov	r3, r8
 8006f96:	18e3      	adds	r3, r4, r3
 8006f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f9c:	464b      	mov	r3, r9
 8006f9e:	eb45 0303 	adc.w	r3, r5, r3
 8006fa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	008b      	lsls	r3, r1, #2
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fcc:	4621      	mov	r1, r4
 8006fce:	008a      	lsls	r2, r1, #2
 8006fd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fd4:	f7f9 fdb4 	bl	8000b40 <__aeabi_uldivmod>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4b60      	ldr	r3, [pc, #384]	@ (8007160 <UART_SetConfig+0x4e4>)
 8006fde:	fba3 2302 	umull	r2, r3, r3, r2
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	011c      	lsls	r4, r3, #4
 8006fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ff0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	1891      	adds	r1, r2, r2
 8006ffe:	61b9      	str	r1, [r7, #24]
 8007000:	415b      	adcs	r3, r3
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007008:	4641      	mov	r1, r8
 800700a:	1851      	adds	r1, r2, r1
 800700c:	6139      	str	r1, [r7, #16]
 800700e:	4649      	mov	r1, r9
 8007010:	414b      	adcs	r3, r1
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007020:	4659      	mov	r1, fp
 8007022:	00cb      	lsls	r3, r1, #3
 8007024:	4651      	mov	r1, sl
 8007026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800702a:	4651      	mov	r1, sl
 800702c:	00ca      	lsls	r2, r1, #3
 800702e:	4610      	mov	r0, r2
 8007030:	4619      	mov	r1, r3
 8007032:	4603      	mov	r3, r0
 8007034:	4642      	mov	r2, r8
 8007036:	189b      	adds	r3, r3, r2
 8007038:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800703c:	464b      	mov	r3, r9
 800703e:	460a      	mov	r2, r1
 8007040:	eb42 0303 	adc.w	r3, r2, r3
 8007044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007052:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007060:	4649      	mov	r1, r9
 8007062:	008b      	lsls	r3, r1, #2
 8007064:	4641      	mov	r1, r8
 8007066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800706a:	4641      	mov	r1, r8
 800706c:	008a      	lsls	r2, r1, #2
 800706e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007072:	f7f9 fd65 	bl	8000b40 <__aeabi_uldivmod>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4611      	mov	r1, r2
 800707c:	4b38      	ldr	r3, [pc, #224]	@ (8007160 <UART_SetConfig+0x4e4>)
 800707e:	fba3 2301 	umull	r2, r3, r3, r1
 8007082:	095b      	lsrs	r3, r3, #5
 8007084:	2264      	movs	r2, #100	@ 0x64
 8007086:	fb02 f303 	mul.w	r3, r2, r3
 800708a:	1acb      	subs	r3, r1, r3
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	3332      	adds	r3, #50	@ 0x32
 8007090:	4a33      	ldr	r2, [pc, #204]	@ (8007160 <UART_SetConfig+0x4e4>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800709c:	441c      	add	r4, r3
 800709e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070a2:	2200      	movs	r2, #0
 80070a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80070a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80070a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80070ac:	4642      	mov	r2, r8
 80070ae:	464b      	mov	r3, r9
 80070b0:	1891      	adds	r1, r2, r2
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	415b      	adcs	r3, r3
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070bc:	4641      	mov	r1, r8
 80070be:	1851      	adds	r1, r2, r1
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	4649      	mov	r1, r9
 80070c4:	414b      	adcs	r3, r1
 80070c6:	607b      	str	r3, [r7, #4]
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	f04f 0300 	mov.w	r3, #0
 80070d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070d4:	4659      	mov	r1, fp
 80070d6:	00cb      	lsls	r3, r1, #3
 80070d8:	4651      	mov	r1, sl
 80070da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070de:	4651      	mov	r1, sl
 80070e0:	00ca      	lsls	r2, r1, #3
 80070e2:	4610      	mov	r0, r2
 80070e4:	4619      	mov	r1, r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	4642      	mov	r2, r8
 80070ea:	189b      	adds	r3, r3, r2
 80070ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ee:	464b      	mov	r3, r9
 80070f0:	460a      	mov	r2, r1
 80070f2:	eb42 0303 	adc.w	r3, r2, r3
 80070f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	663b      	str	r3, [r7, #96]	@ 0x60
 8007102:	667a      	str	r2, [r7, #100]	@ 0x64
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007110:	4649      	mov	r1, r9
 8007112:	008b      	lsls	r3, r1, #2
 8007114:	4641      	mov	r1, r8
 8007116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800711a:	4641      	mov	r1, r8
 800711c:	008a      	lsls	r2, r1, #2
 800711e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007122:	f7f9 fd0d 	bl	8000b40 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <UART_SetConfig+0x4e4>)
 800712c:	fba3 1302 	umull	r1, r3, r3, r2
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	2164      	movs	r1, #100	@ 0x64
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	3332      	adds	r3, #50	@ 0x32
 800713e:	4a08      	ldr	r2, [pc, #32]	@ (8007160 <UART_SetConfig+0x4e4>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	095b      	lsrs	r3, r3, #5
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4422      	add	r2, r4
 8007152:	609a      	str	r2, [r3, #8]
}
 8007154:	bf00      	nop
 8007156:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800715a:	46bd      	mov	sp, r7
 800715c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007160:	51eb851f 	.word	0x51eb851f

08007164 <memset>:
 8007164:	4402      	add	r2, r0
 8007166:	4603      	mov	r3, r0
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	f803 1b01 	strb.w	r1, [r3], #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <__errno>:
 8007174:	4b01      	ldr	r3, [pc, #4]	@ (800717c <__errno+0x8>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000010 	.word	0x20000010

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4d0d      	ldr	r5, [pc, #52]	@ (80071b8 <__libc_init_array+0x38>)
 8007184:	4c0d      	ldr	r4, [pc, #52]	@ (80071bc <__libc_init_array+0x3c>)
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	2600      	movs	r6, #0
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	4d0b      	ldr	r5, [pc, #44]	@ (80071c0 <__libc_init_array+0x40>)
 8007192:	4c0c      	ldr	r4, [pc, #48]	@ (80071c4 <__libc_init_array+0x44>)
 8007194:	f001 fe0c 	bl	8008db0 <_init>
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	2600      	movs	r6, #0
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	08008f40 	.word	0x08008f40
 80071bc:	08008f40 	.word	0x08008f40
 80071c0:	08008f40 	.word	0x08008f40
 80071c4:	08008f44 	.word	0x08008f44

080071c8 <acos>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	ed2d 8b02 	vpush	{d8}
 80071ce:	ec55 4b10 	vmov	r4, r5, d0
 80071d2:	f000 fb8d 	bl	80078f0 <__ieee754_acos>
 80071d6:	4622      	mov	r2, r4
 80071d8:	462b      	mov	r3, r5
 80071da:	4620      	mov	r0, r4
 80071dc:	4629      	mov	r1, r5
 80071de:	eeb0 8a40 	vmov.f32	s16, s0
 80071e2:	eef0 8a60 	vmov.f32	s17, s1
 80071e6:	f7f9 fc45 	bl	8000a74 <__aeabi_dcmpun>
 80071ea:	b9a8      	cbnz	r0, 8007218 <acos+0x50>
 80071ec:	ec45 4b10 	vmov	d0, r4, r5
 80071f0:	f000 fa86 	bl	8007700 <fabs>
 80071f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <acos+0x60>)
 80071f6:	ec51 0b10 	vmov	r0, r1, d0
 80071fa:	2200      	movs	r2, #0
 80071fc:	f7f9 fc30 	bl	8000a60 <__aeabi_dcmpgt>
 8007200:	b150      	cbz	r0, 8007218 <acos+0x50>
 8007202:	f7ff ffb7 	bl	8007174 <__errno>
 8007206:	ecbd 8b02 	vpop	{d8}
 800720a:	2321      	movs	r3, #33	@ 0x21
 800720c:	6003      	str	r3, [r0, #0]
 800720e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007212:	4806      	ldr	r0, [pc, #24]	@ (800722c <acos+0x64>)
 8007214:	f000 ba88 	b.w	8007728 <nan>
 8007218:	eeb0 0a48 	vmov.f32	s0, s16
 800721c:	eef0 0a68 	vmov.f32	s1, s17
 8007220:	ecbd 8b02 	vpop	{d8}
 8007224:	bd38      	pop	{r3, r4, r5, pc}
 8007226:	bf00      	nop
 8007228:	3ff00000 	.word	0x3ff00000
 800722c:	08008ec0 	.word	0x08008ec0

08007230 <asin>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	ed2d 8b02 	vpush	{d8}
 8007236:	ec55 4b10 	vmov	r4, r5, d0
 800723a:	f000 fdb5 	bl	8007da8 <__ieee754_asin>
 800723e:	4622      	mov	r2, r4
 8007240:	462b      	mov	r3, r5
 8007242:	4620      	mov	r0, r4
 8007244:	4629      	mov	r1, r5
 8007246:	eeb0 8a40 	vmov.f32	s16, s0
 800724a:	eef0 8a60 	vmov.f32	s17, s1
 800724e:	f7f9 fc11 	bl	8000a74 <__aeabi_dcmpun>
 8007252:	b9a8      	cbnz	r0, 8007280 <asin+0x50>
 8007254:	ec45 4b10 	vmov	d0, r4, r5
 8007258:	f000 fa52 	bl	8007700 <fabs>
 800725c:	4b0c      	ldr	r3, [pc, #48]	@ (8007290 <asin+0x60>)
 800725e:	ec51 0b10 	vmov	r0, r1, d0
 8007262:	2200      	movs	r2, #0
 8007264:	f7f9 fbfc 	bl	8000a60 <__aeabi_dcmpgt>
 8007268:	b150      	cbz	r0, 8007280 <asin+0x50>
 800726a:	f7ff ff83 	bl	8007174 <__errno>
 800726e:	ecbd 8b02 	vpop	{d8}
 8007272:	2321      	movs	r3, #33	@ 0x21
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800727a:	4806      	ldr	r0, [pc, #24]	@ (8007294 <asin+0x64>)
 800727c:	f000 ba54 	b.w	8007728 <nan>
 8007280:	eeb0 0a48 	vmov.f32	s0, s16
 8007284:	eef0 0a68 	vmov.f32	s1, s17
 8007288:	ecbd 8b02 	vpop	{d8}
 800728c:	bd38      	pop	{r3, r4, r5, pc}
 800728e:	bf00      	nop
 8007290:	3ff00000 	.word	0x3ff00000
 8007294:	08008ec0 	.word	0x08008ec0

08007298 <pow>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	ed2d 8b02 	vpush	{d8}
 800729e:	eeb0 8a40 	vmov.f32	s16, s0
 80072a2:	eef0 8a60 	vmov.f32	s17, s1
 80072a6:	ec55 4b11 	vmov	r4, r5, d1
 80072aa:	f000 ff81 	bl	80081b0 <__ieee754_pow>
 80072ae:	4622      	mov	r2, r4
 80072b0:	462b      	mov	r3, r5
 80072b2:	4620      	mov	r0, r4
 80072b4:	4629      	mov	r1, r5
 80072b6:	ec57 6b10 	vmov	r6, r7, d0
 80072ba:	f7f9 fbdb 	bl	8000a74 <__aeabi_dcmpun>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d13b      	bne.n	800733a <pow+0xa2>
 80072c2:	ec51 0b18 	vmov	r0, r1, d8
 80072c6:	2200      	movs	r2, #0
 80072c8:	2300      	movs	r3, #0
 80072ca:	f7f9 fba1 	bl	8000a10 <__aeabi_dcmpeq>
 80072ce:	b1b8      	cbz	r0, 8007300 <pow+0x68>
 80072d0:	2200      	movs	r2, #0
 80072d2:	2300      	movs	r3, #0
 80072d4:	4620      	mov	r0, r4
 80072d6:	4629      	mov	r1, r5
 80072d8:	f7f9 fb9a 	bl	8000a10 <__aeabi_dcmpeq>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d146      	bne.n	800736e <pow+0xd6>
 80072e0:	ec45 4b10 	vmov	d0, r4, r5
 80072e4:	f000 fa14 	bl	8007710 <finite>
 80072e8:	b338      	cbz	r0, 800733a <pow+0xa2>
 80072ea:	2200      	movs	r2, #0
 80072ec:	2300      	movs	r3, #0
 80072ee:	4620      	mov	r0, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f9 fb97 	bl	8000a24 <__aeabi_dcmplt>
 80072f6:	b300      	cbz	r0, 800733a <pow+0xa2>
 80072f8:	f7ff ff3c 	bl	8007174 <__errno>
 80072fc:	2322      	movs	r3, #34	@ 0x22
 80072fe:	e01b      	b.n	8007338 <pow+0xa0>
 8007300:	ec47 6b10 	vmov	d0, r6, r7
 8007304:	f000 fa04 	bl	8007710 <finite>
 8007308:	b9e0      	cbnz	r0, 8007344 <pow+0xac>
 800730a:	eeb0 0a48 	vmov.f32	s0, s16
 800730e:	eef0 0a68 	vmov.f32	s1, s17
 8007312:	f000 f9fd 	bl	8007710 <finite>
 8007316:	b1a8      	cbz	r0, 8007344 <pow+0xac>
 8007318:	ec45 4b10 	vmov	d0, r4, r5
 800731c:	f000 f9f8 	bl	8007710 <finite>
 8007320:	b180      	cbz	r0, 8007344 <pow+0xac>
 8007322:	4632      	mov	r2, r6
 8007324:	463b      	mov	r3, r7
 8007326:	4630      	mov	r0, r6
 8007328:	4639      	mov	r1, r7
 800732a:	f7f9 fba3 	bl	8000a74 <__aeabi_dcmpun>
 800732e:	2800      	cmp	r0, #0
 8007330:	d0e2      	beq.n	80072f8 <pow+0x60>
 8007332:	f7ff ff1f 	bl	8007174 <__errno>
 8007336:	2321      	movs	r3, #33	@ 0x21
 8007338:	6003      	str	r3, [r0, #0]
 800733a:	ecbd 8b02 	vpop	{d8}
 800733e:	ec47 6b10 	vmov	d0, r6, r7
 8007342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007344:	2200      	movs	r2, #0
 8007346:	2300      	movs	r3, #0
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f9 fb60 	bl	8000a10 <__aeabi_dcmpeq>
 8007350:	2800      	cmp	r0, #0
 8007352:	d0f2      	beq.n	800733a <pow+0xa2>
 8007354:	eeb0 0a48 	vmov.f32	s0, s16
 8007358:	eef0 0a68 	vmov.f32	s1, s17
 800735c:	f000 f9d8 	bl	8007710 <finite>
 8007360:	2800      	cmp	r0, #0
 8007362:	d0ea      	beq.n	800733a <pow+0xa2>
 8007364:	ec45 4b10 	vmov	d0, r4, r5
 8007368:	f000 f9d2 	bl	8007710 <finite>
 800736c:	e7c3      	b.n	80072f6 <pow+0x5e>
 800736e:	4f01      	ldr	r7, [pc, #4]	@ (8007374 <pow+0xdc>)
 8007370:	2600      	movs	r6, #0
 8007372:	e7e2      	b.n	800733a <pow+0xa2>
 8007374:	3ff00000 	.word	0x3ff00000

08007378 <sqrt>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	ed2d 8b02 	vpush	{d8}
 800737e:	ec55 4b10 	vmov	r4, r5, d0
 8007382:	f000 f9d9 	bl	8007738 <__ieee754_sqrt>
 8007386:	4622      	mov	r2, r4
 8007388:	462b      	mov	r3, r5
 800738a:	4620      	mov	r0, r4
 800738c:	4629      	mov	r1, r5
 800738e:	eeb0 8a40 	vmov.f32	s16, s0
 8007392:	eef0 8a60 	vmov.f32	s17, s1
 8007396:	f7f9 fb6d 	bl	8000a74 <__aeabi_dcmpun>
 800739a:	b990      	cbnz	r0, 80073c2 <sqrt+0x4a>
 800739c:	2200      	movs	r2, #0
 800739e:	2300      	movs	r3, #0
 80073a0:	4620      	mov	r0, r4
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7f9 fb3e 	bl	8000a24 <__aeabi_dcmplt>
 80073a8:	b158      	cbz	r0, 80073c2 <sqrt+0x4a>
 80073aa:	f7ff fee3 	bl	8007174 <__errno>
 80073ae:	2321      	movs	r3, #33	@ 0x21
 80073b0:	6003      	str	r3, [r0, #0]
 80073b2:	2200      	movs	r2, #0
 80073b4:	2300      	movs	r3, #0
 80073b6:	4610      	mov	r0, r2
 80073b8:	4619      	mov	r1, r3
 80073ba:	f7f9 f9eb 	bl	8000794 <__aeabi_ddiv>
 80073be:	ec41 0b18 	vmov	d8, r0, r1
 80073c2:	eeb0 0a48 	vmov.f32	s0, s16
 80073c6:	eef0 0a68 	vmov.f32	s1, s17
 80073ca:	ecbd 8b02 	vpop	{d8}
 80073ce:	bd38      	pop	{r3, r4, r5, pc}

080073d0 <atan>:
 80073d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	ec55 4b10 	vmov	r4, r5, d0
 80073d8:	4bbf      	ldr	r3, [pc, #764]	@ (80076d8 <atan+0x308>)
 80073da:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80073de:	429e      	cmp	r6, r3
 80073e0:	46ab      	mov	fp, r5
 80073e2:	d918      	bls.n	8007416 <atan+0x46>
 80073e4:	4bbd      	ldr	r3, [pc, #756]	@ (80076dc <atan+0x30c>)
 80073e6:	429e      	cmp	r6, r3
 80073e8:	d801      	bhi.n	80073ee <atan+0x1e>
 80073ea:	d109      	bne.n	8007400 <atan+0x30>
 80073ec:	b144      	cbz	r4, 8007400 <atan+0x30>
 80073ee:	4622      	mov	r2, r4
 80073f0:	462b      	mov	r3, r5
 80073f2:	4620      	mov	r0, r4
 80073f4:	4629      	mov	r1, r5
 80073f6:	f7f8 feed 	bl	80001d4 <__adddf3>
 80073fa:	4604      	mov	r4, r0
 80073fc:	460d      	mov	r5, r1
 80073fe:	e006      	b.n	800740e <atan+0x3e>
 8007400:	f1bb 0f00 	cmp.w	fp, #0
 8007404:	f340 812b 	ble.w	800765e <atan+0x28e>
 8007408:	a597      	add	r5, pc, #604	@ (adr r5, 8007668 <atan+0x298>)
 800740a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800740e:	ec45 4b10 	vmov	d0, r4, r5
 8007412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007416:	4bb2      	ldr	r3, [pc, #712]	@ (80076e0 <atan+0x310>)
 8007418:	429e      	cmp	r6, r3
 800741a:	d813      	bhi.n	8007444 <atan+0x74>
 800741c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007420:	429e      	cmp	r6, r3
 8007422:	d80c      	bhi.n	800743e <atan+0x6e>
 8007424:	a392      	add	r3, pc, #584	@ (adr r3, 8007670 <atan+0x2a0>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	4620      	mov	r0, r4
 800742c:	4629      	mov	r1, r5
 800742e:	f7f8 fed1 	bl	80001d4 <__adddf3>
 8007432:	4bac      	ldr	r3, [pc, #688]	@ (80076e4 <atan+0x314>)
 8007434:	2200      	movs	r2, #0
 8007436:	f7f9 fb13 	bl	8000a60 <__aeabi_dcmpgt>
 800743a:	2800      	cmp	r0, #0
 800743c:	d1e7      	bne.n	800740e <atan+0x3e>
 800743e:	f04f 3aff 	mov.w	sl, #4294967295
 8007442:	e029      	b.n	8007498 <atan+0xc8>
 8007444:	f000 f95c 	bl	8007700 <fabs>
 8007448:	4ba7      	ldr	r3, [pc, #668]	@ (80076e8 <atan+0x318>)
 800744a:	429e      	cmp	r6, r3
 800744c:	ec55 4b10 	vmov	r4, r5, d0
 8007450:	f200 80bc 	bhi.w	80075cc <atan+0x1fc>
 8007454:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007458:	429e      	cmp	r6, r3
 800745a:	f200 809e 	bhi.w	800759a <atan+0x1ca>
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	f7f8 feb5 	bl	80001d4 <__adddf3>
 800746a:	4b9e      	ldr	r3, [pc, #632]	@ (80076e4 <atan+0x314>)
 800746c:	2200      	movs	r2, #0
 800746e:	f7f8 feaf 	bl	80001d0 <__aeabi_dsub>
 8007472:	2200      	movs	r2, #0
 8007474:	4606      	mov	r6, r0
 8007476:	460f      	mov	r7, r1
 8007478:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	f7f8 fea8 	bl	80001d4 <__adddf3>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f9 f982 	bl	8000794 <__aeabi_ddiv>
 8007490:	f04f 0a00 	mov.w	sl, #0
 8007494:	4604      	mov	r4, r0
 8007496:	460d      	mov	r5, r1
 8007498:	4622      	mov	r2, r4
 800749a:	462b      	mov	r3, r5
 800749c:	4620      	mov	r0, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	f7f9 f84e 	bl	8000540 <__aeabi_dmul>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4680      	mov	r8, r0
 80074aa:	4689      	mov	r9, r1
 80074ac:	f7f9 f848 	bl	8000540 <__aeabi_dmul>
 80074b0:	a371      	add	r3, pc, #452	@ (adr r3, 8007678 <atan+0x2a8>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	4606      	mov	r6, r0
 80074b8:	460f      	mov	r7, r1
 80074ba:	f7f9 f841 	bl	8000540 <__aeabi_dmul>
 80074be:	a370      	add	r3, pc, #448	@ (adr r3, 8007680 <atan+0x2b0>)
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f7f8 fe86 	bl	80001d4 <__adddf3>
 80074c8:	4632      	mov	r2, r6
 80074ca:	463b      	mov	r3, r7
 80074cc:	f7f9 f838 	bl	8000540 <__aeabi_dmul>
 80074d0:	a36d      	add	r3, pc, #436	@ (adr r3, 8007688 <atan+0x2b8>)
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	f7f8 fe7d 	bl	80001d4 <__adddf3>
 80074da:	4632      	mov	r2, r6
 80074dc:	463b      	mov	r3, r7
 80074de:	f7f9 f82f 	bl	8000540 <__aeabi_dmul>
 80074e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007690 <atan+0x2c0>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f7f8 fe74 	bl	80001d4 <__adddf3>
 80074ec:	4632      	mov	r2, r6
 80074ee:	463b      	mov	r3, r7
 80074f0:	f7f9 f826 	bl	8000540 <__aeabi_dmul>
 80074f4:	a368      	add	r3, pc, #416	@ (adr r3, 8007698 <atan+0x2c8>)
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	f7f8 fe6b 	bl	80001d4 <__adddf3>
 80074fe:	4632      	mov	r2, r6
 8007500:	463b      	mov	r3, r7
 8007502:	f7f9 f81d 	bl	8000540 <__aeabi_dmul>
 8007506:	a366      	add	r3, pc, #408	@ (adr r3, 80076a0 <atan+0x2d0>)
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f7f8 fe62 	bl	80001d4 <__adddf3>
 8007510:	4642      	mov	r2, r8
 8007512:	464b      	mov	r3, r9
 8007514:	f7f9 f814 	bl	8000540 <__aeabi_dmul>
 8007518:	a363      	add	r3, pc, #396	@ (adr r3, 80076a8 <atan+0x2d8>)
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	4680      	mov	r8, r0
 8007520:	4689      	mov	r9, r1
 8007522:	4630      	mov	r0, r6
 8007524:	4639      	mov	r1, r7
 8007526:	f7f9 f80b 	bl	8000540 <__aeabi_dmul>
 800752a:	a361      	add	r3, pc, #388	@ (adr r3, 80076b0 <atan+0x2e0>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f7f8 fe4e 	bl	80001d0 <__aeabi_dsub>
 8007534:	4632      	mov	r2, r6
 8007536:	463b      	mov	r3, r7
 8007538:	f7f9 f802 	bl	8000540 <__aeabi_dmul>
 800753c:	a35e      	add	r3, pc, #376	@ (adr r3, 80076b8 <atan+0x2e8>)
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	f7f8 fe45 	bl	80001d0 <__aeabi_dsub>
 8007546:	4632      	mov	r2, r6
 8007548:	463b      	mov	r3, r7
 800754a:	f7f8 fff9 	bl	8000540 <__aeabi_dmul>
 800754e:	a35c      	add	r3, pc, #368	@ (adr r3, 80076c0 <atan+0x2f0>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f7f8 fe3c 	bl	80001d0 <__aeabi_dsub>
 8007558:	4632      	mov	r2, r6
 800755a:	463b      	mov	r3, r7
 800755c:	f7f8 fff0 	bl	8000540 <__aeabi_dmul>
 8007560:	a359      	add	r3, pc, #356	@ (adr r3, 80076c8 <atan+0x2f8>)
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f7f8 fe33 	bl	80001d0 <__aeabi_dsub>
 800756a:	4632      	mov	r2, r6
 800756c:	463b      	mov	r3, r7
 800756e:	f7f8 ffe7 	bl	8000540 <__aeabi_dmul>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4640      	mov	r0, r8
 8007578:	4649      	mov	r1, r9
 800757a:	f7f8 fe2b 	bl	80001d4 <__adddf3>
 800757e:	4622      	mov	r2, r4
 8007580:	462b      	mov	r3, r5
 8007582:	f7f8 ffdd 	bl	8000540 <__aeabi_dmul>
 8007586:	f1ba 3fff 	cmp.w	sl, #4294967295
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	d148      	bne.n	8007622 <atan+0x252>
 8007590:	4620      	mov	r0, r4
 8007592:	4629      	mov	r1, r5
 8007594:	f7f8 fe1c 	bl	80001d0 <__aeabi_dsub>
 8007598:	e72f      	b.n	80073fa <atan+0x2a>
 800759a:	4b52      	ldr	r3, [pc, #328]	@ (80076e4 <atan+0x314>)
 800759c:	2200      	movs	r2, #0
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f8 fe15 	bl	80001d0 <__aeabi_dsub>
 80075a6:	4b4f      	ldr	r3, [pc, #316]	@ (80076e4 <atan+0x314>)
 80075a8:	4606      	mov	r6, r0
 80075aa:	460f      	mov	r7, r1
 80075ac:	2200      	movs	r2, #0
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f8 fe0f 	bl	80001d4 <__adddf3>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f9 f8e9 	bl	8000794 <__aeabi_ddiv>
 80075c2:	f04f 0a01 	mov.w	sl, #1
 80075c6:	4604      	mov	r4, r0
 80075c8:	460d      	mov	r5, r1
 80075ca:	e765      	b.n	8007498 <atan+0xc8>
 80075cc:	4b47      	ldr	r3, [pc, #284]	@ (80076ec <atan+0x31c>)
 80075ce:	429e      	cmp	r6, r3
 80075d0:	d21c      	bcs.n	800760c <atan+0x23c>
 80075d2:	4b47      	ldr	r3, [pc, #284]	@ (80076f0 <atan+0x320>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	4620      	mov	r0, r4
 80075d8:	4629      	mov	r1, r5
 80075da:	f7f8 fdf9 	bl	80001d0 <__aeabi_dsub>
 80075de:	4b44      	ldr	r3, [pc, #272]	@ (80076f0 <atan+0x320>)
 80075e0:	4606      	mov	r6, r0
 80075e2:	460f      	mov	r7, r1
 80075e4:	2200      	movs	r2, #0
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f8 ffa9 	bl	8000540 <__aeabi_dmul>
 80075ee:	4b3d      	ldr	r3, [pc, #244]	@ (80076e4 <atan+0x314>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	f7f8 fdef 	bl	80001d4 <__adddf3>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4630      	mov	r0, r6
 80075fc:	4639      	mov	r1, r7
 80075fe:	f7f9 f8c9 	bl	8000794 <__aeabi_ddiv>
 8007602:	f04f 0a02 	mov.w	sl, #2
 8007606:	4604      	mov	r4, r0
 8007608:	460d      	mov	r5, r1
 800760a:	e745      	b.n	8007498 <atan+0xc8>
 800760c:	4622      	mov	r2, r4
 800760e:	462b      	mov	r3, r5
 8007610:	4938      	ldr	r1, [pc, #224]	@ (80076f4 <atan+0x324>)
 8007612:	2000      	movs	r0, #0
 8007614:	f7f9 f8be 	bl	8000794 <__aeabi_ddiv>
 8007618:	f04f 0a03 	mov.w	sl, #3
 800761c:	4604      	mov	r4, r0
 800761e:	460d      	mov	r5, r1
 8007620:	e73a      	b.n	8007498 <atan+0xc8>
 8007622:	4b35      	ldr	r3, [pc, #212]	@ (80076f8 <atan+0x328>)
 8007624:	4e35      	ldr	r6, [pc, #212]	@ (80076fc <atan+0x32c>)
 8007626:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 fdcf 	bl	80001d0 <__aeabi_dsub>
 8007632:	4622      	mov	r2, r4
 8007634:	462b      	mov	r3, r5
 8007636:	f7f8 fdcb 	bl	80001d0 <__aeabi_dsub>
 800763a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007646:	f7f8 fdc3 	bl	80001d0 <__aeabi_dsub>
 800764a:	f1bb 0f00 	cmp.w	fp, #0
 800764e:	4604      	mov	r4, r0
 8007650:	460d      	mov	r5, r1
 8007652:	f6bf aedc 	bge.w	800740e <atan+0x3e>
 8007656:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800765a:	461d      	mov	r5, r3
 800765c:	e6d7      	b.n	800740e <atan+0x3e>
 800765e:	a51c      	add	r5, pc, #112	@ (adr r5, 80076d0 <atan+0x300>)
 8007660:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007664:	e6d3      	b.n	800740e <atan+0x3e>
 8007666:	bf00      	nop
 8007668:	54442d18 	.word	0x54442d18
 800766c:	3ff921fb 	.word	0x3ff921fb
 8007670:	8800759c 	.word	0x8800759c
 8007674:	7e37e43c 	.word	0x7e37e43c
 8007678:	e322da11 	.word	0xe322da11
 800767c:	3f90ad3a 	.word	0x3f90ad3a
 8007680:	24760deb 	.word	0x24760deb
 8007684:	3fa97b4b 	.word	0x3fa97b4b
 8007688:	a0d03d51 	.word	0xa0d03d51
 800768c:	3fb10d66 	.word	0x3fb10d66
 8007690:	c54c206e 	.word	0xc54c206e
 8007694:	3fb745cd 	.word	0x3fb745cd
 8007698:	920083ff 	.word	0x920083ff
 800769c:	3fc24924 	.word	0x3fc24924
 80076a0:	5555550d 	.word	0x5555550d
 80076a4:	3fd55555 	.word	0x3fd55555
 80076a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80076ac:	bfa2b444 	.word	0xbfa2b444
 80076b0:	52defd9a 	.word	0x52defd9a
 80076b4:	3fadde2d 	.word	0x3fadde2d
 80076b8:	af749a6d 	.word	0xaf749a6d
 80076bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80076c0:	fe231671 	.word	0xfe231671
 80076c4:	3fbc71c6 	.word	0x3fbc71c6
 80076c8:	9998ebc4 	.word	0x9998ebc4
 80076cc:	3fc99999 	.word	0x3fc99999
 80076d0:	54442d18 	.word	0x54442d18
 80076d4:	bff921fb 	.word	0xbff921fb
 80076d8:	440fffff 	.word	0x440fffff
 80076dc:	7ff00000 	.word	0x7ff00000
 80076e0:	3fdbffff 	.word	0x3fdbffff
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	3ff2ffff 	.word	0x3ff2ffff
 80076ec:	40038000 	.word	0x40038000
 80076f0:	3ff80000 	.word	0x3ff80000
 80076f4:	bff00000 	.word	0xbff00000
 80076f8:	08008ec8 	.word	0x08008ec8
 80076fc:	08008ee8 	.word	0x08008ee8

08007700 <fabs>:
 8007700:	ec51 0b10 	vmov	r0, r1, d0
 8007704:	4602      	mov	r2, r0
 8007706:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800770a:	ec43 2b10 	vmov	d0, r2, r3
 800770e:	4770      	bx	lr

08007710 <finite>:
 8007710:	b082      	sub	sp, #8
 8007712:	ed8d 0b00 	vstr	d0, [sp]
 8007716:	9801      	ldr	r0, [sp, #4]
 8007718:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800771c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007720:	0fc0      	lsrs	r0, r0, #31
 8007722:	b002      	add	sp, #8
 8007724:	4770      	bx	lr
	...

08007728 <nan>:
 8007728:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007730 <nan+0x8>
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	00000000 	.word	0x00000000
 8007734:	7ff80000 	.word	0x7ff80000

08007738 <__ieee754_sqrt>:
 8007738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	4a68      	ldr	r2, [pc, #416]	@ (80078e0 <__ieee754_sqrt+0x1a8>)
 800773e:	ec55 4b10 	vmov	r4, r5, d0
 8007742:	43aa      	bics	r2, r5
 8007744:	462b      	mov	r3, r5
 8007746:	4621      	mov	r1, r4
 8007748:	d110      	bne.n	800776c <__ieee754_sqrt+0x34>
 800774a:	4622      	mov	r2, r4
 800774c:	4620      	mov	r0, r4
 800774e:	4629      	mov	r1, r5
 8007750:	f7f8 fef6 	bl	8000540 <__aeabi_dmul>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4620      	mov	r0, r4
 800775a:	4629      	mov	r1, r5
 800775c:	f7f8 fd3a 	bl	80001d4 <__adddf3>
 8007760:	4604      	mov	r4, r0
 8007762:	460d      	mov	r5, r1
 8007764:	ec45 4b10 	vmov	d0, r4, r5
 8007768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776c:	2d00      	cmp	r5, #0
 800776e:	dc0e      	bgt.n	800778e <__ieee754_sqrt+0x56>
 8007770:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007774:	4322      	orrs	r2, r4
 8007776:	d0f5      	beq.n	8007764 <__ieee754_sqrt+0x2c>
 8007778:	b19d      	cbz	r5, 80077a2 <__ieee754_sqrt+0x6a>
 800777a:	4622      	mov	r2, r4
 800777c:	4620      	mov	r0, r4
 800777e:	4629      	mov	r1, r5
 8007780:	f7f8 fd26 	bl	80001d0 <__aeabi_dsub>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	f7f9 f804 	bl	8000794 <__aeabi_ddiv>
 800778c:	e7e8      	b.n	8007760 <__ieee754_sqrt+0x28>
 800778e:	152a      	asrs	r2, r5, #20
 8007790:	d115      	bne.n	80077be <__ieee754_sqrt+0x86>
 8007792:	2000      	movs	r0, #0
 8007794:	e009      	b.n	80077aa <__ieee754_sqrt+0x72>
 8007796:	0acb      	lsrs	r3, r1, #11
 8007798:	3a15      	subs	r2, #21
 800779a:	0549      	lsls	r1, r1, #21
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0fa      	beq.n	8007796 <__ieee754_sqrt+0x5e>
 80077a0:	e7f7      	b.n	8007792 <__ieee754_sqrt+0x5a>
 80077a2:	462a      	mov	r2, r5
 80077a4:	e7fa      	b.n	800779c <__ieee754_sqrt+0x64>
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	3001      	adds	r0, #1
 80077aa:	02dc      	lsls	r4, r3, #11
 80077ac:	d5fb      	bpl.n	80077a6 <__ieee754_sqrt+0x6e>
 80077ae:	1e44      	subs	r4, r0, #1
 80077b0:	1b12      	subs	r2, r2, r4
 80077b2:	f1c0 0420 	rsb	r4, r0, #32
 80077b6:	fa21 f404 	lsr.w	r4, r1, r4
 80077ba:	4323      	orrs	r3, r4
 80077bc:	4081      	lsls	r1, r0
 80077be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80077c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077ca:	07d2      	lsls	r2, r2, #31
 80077cc:	bf5c      	itt	pl
 80077ce:	005b      	lslpl	r3, r3, #1
 80077d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80077d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077d8:	bf58      	it	pl
 80077da:	0049      	lslpl	r1, r1, #1
 80077dc:	2600      	movs	r6, #0
 80077de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80077e2:	106d      	asrs	r5, r5, #1
 80077e4:	0049      	lsls	r1, r1, #1
 80077e6:	2016      	movs	r0, #22
 80077e8:	4632      	mov	r2, r6
 80077ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80077ee:	1917      	adds	r7, r2, r4
 80077f0:	429f      	cmp	r7, r3
 80077f2:	bfde      	ittt	le
 80077f4:	193a      	addle	r2, r7, r4
 80077f6:	1bdb      	suble	r3, r3, r7
 80077f8:	1936      	addle	r6, r6, r4
 80077fa:	0fcf      	lsrs	r7, r1, #31
 80077fc:	3801      	subs	r0, #1
 80077fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007802:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007806:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800780a:	d1f0      	bne.n	80077ee <__ieee754_sqrt+0xb6>
 800780c:	4604      	mov	r4, r0
 800780e:	2720      	movs	r7, #32
 8007810:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007814:	429a      	cmp	r2, r3
 8007816:	eb00 0e0c 	add.w	lr, r0, ip
 800781a:	db02      	blt.n	8007822 <__ieee754_sqrt+0xea>
 800781c:	d113      	bne.n	8007846 <__ieee754_sqrt+0x10e>
 800781e:	458e      	cmp	lr, r1
 8007820:	d811      	bhi.n	8007846 <__ieee754_sqrt+0x10e>
 8007822:	f1be 0f00 	cmp.w	lr, #0
 8007826:	eb0e 000c 	add.w	r0, lr, ip
 800782a:	da42      	bge.n	80078b2 <__ieee754_sqrt+0x17a>
 800782c:	2800      	cmp	r0, #0
 800782e:	db40      	blt.n	80078b2 <__ieee754_sqrt+0x17a>
 8007830:	f102 0801 	add.w	r8, r2, #1
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	458e      	cmp	lr, r1
 8007838:	bf88      	it	hi
 800783a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800783e:	eba1 010e 	sub.w	r1, r1, lr
 8007842:	4464      	add	r4, ip
 8007844:	4642      	mov	r2, r8
 8007846:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800784a:	3f01      	subs	r7, #1
 800784c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007850:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007854:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007858:	d1dc      	bne.n	8007814 <__ieee754_sqrt+0xdc>
 800785a:	4319      	orrs	r1, r3
 800785c:	d01b      	beq.n	8007896 <__ieee754_sqrt+0x15e>
 800785e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80078e4 <__ieee754_sqrt+0x1ac>
 8007862:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80078e8 <__ieee754_sqrt+0x1b0>
 8007866:	e9da 0100 	ldrd	r0, r1, [sl]
 800786a:	e9db 2300 	ldrd	r2, r3, [fp]
 800786e:	f7f8 fcaf 	bl	80001d0 <__aeabi_dsub>
 8007872:	e9da 8900 	ldrd	r8, r9, [sl]
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4640      	mov	r0, r8
 800787c:	4649      	mov	r1, r9
 800787e:	f7f9 f8db 	bl	8000a38 <__aeabi_dcmple>
 8007882:	b140      	cbz	r0, 8007896 <__ieee754_sqrt+0x15e>
 8007884:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007888:	e9da 0100 	ldrd	r0, r1, [sl]
 800788c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007890:	d111      	bne.n	80078b6 <__ieee754_sqrt+0x17e>
 8007892:	3601      	adds	r6, #1
 8007894:	463c      	mov	r4, r7
 8007896:	1072      	asrs	r2, r6, #1
 8007898:	0863      	lsrs	r3, r4, #1
 800789a:	07f1      	lsls	r1, r6, #31
 800789c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80078a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80078a4:	bf48      	it	mi
 80078a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80078aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80078ae:	4618      	mov	r0, r3
 80078b0:	e756      	b.n	8007760 <__ieee754_sqrt+0x28>
 80078b2:	4690      	mov	r8, r2
 80078b4:	e7be      	b.n	8007834 <__ieee754_sqrt+0xfc>
 80078b6:	f7f8 fc8d 	bl	80001d4 <__adddf3>
 80078ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	f7f9 f8ad 	bl	8000a24 <__aeabi_dcmplt>
 80078ca:	b120      	cbz	r0, 80078d6 <__ieee754_sqrt+0x19e>
 80078cc:	1ca0      	adds	r0, r4, #2
 80078ce:	bf08      	it	eq
 80078d0:	3601      	addeq	r6, #1
 80078d2:	3402      	adds	r4, #2
 80078d4:	e7df      	b.n	8007896 <__ieee754_sqrt+0x15e>
 80078d6:	1c63      	adds	r3, r4, #1
 80078d8:	f023 0401 	bic.w	r4, r3, #1
 80078dc:	e7db      	b.n	8007896 <__ieee754_sqrt+0x15e>
 80078de:	bf00      	nop
 80078e0:	7ff00000 	.word	0x7ff00000
 80078e4:	20000068 	.word	0x20000068
 80078e8:	20000060 	.word	0x20000060
 80078ec:	00000000 	.word	0x00000000

080078f0 <__ieee754_acos>:
 80078f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	ec55 4b10 	vmov	r4, r5, d0
 80078f8:	49b7      	ldr	r1, [pc, #732]	@ (8007bd8 <__ieee754_acos+0x2e8>)
 80078fa:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80078fe:	428b      	cmp	r3, r1
 8007900:	d919      	bls.n	8007936 <__ieee754_acos+0x46>
 8007902:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8007906:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800790a:	4323      	orrs	r3, r4
 800790c:	d106      	bne.n	800791c <__ieee754_acos+0x2c>
 800790e:	2d00      	cmp	r5, #0
 8007910:	f340 8210 	ble.w	8007d34 <__ieee754_acos+0x444>
 8007914:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8007b68 <__ieee754_acos+0x278>
 8007918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791c:	4622      	mov	r2, r4
 800791e:	462b      	mov	r3, r5
 8007920:	4620      	mov	r0, r4
 8007922:	4629      	mov	r1, r5
 8007924:	f7f8 fc54 	bl	80001d0 <__aeabi_dsub>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	f7f8 ff32 	bl	8000794 <__aeabi_ddiv>
 8007930:	ec41 0b10 	vmov	d0, r0, r1
 8007934:	e7f0      	b.n	8007918 <__ieee754_acos+0x28>
 8007936:	49a9      	ldr	r1, [pc, #676]	@ (8007bdc <__ieee754_acos+0x2ec>)
 8007938:	428b      	cmp	r3, r1
 800793a:	f200 8085 	bhi.w	8007a48 <__ieee754_acos+0x158>
 800793e:	4aa8      	ldr	r2, [pc, #672]	@ (8007be0 <__ieee754_acos+0x2f0>)
 8007940:	4293      	cmp	r3, r2
 8007942:	f240 81fa 	bls.w	8007d3a <__ieee754_acos+0x44a>
 8007946:	4622      	mov	r2, r4
 8007948:	462b      	mov	r3, r5
 800794a:	4620      	mov	r0, r4
 800794c:	4629      	mov	r1, r5
 800794e:	f7f8 fdf7 	bl	8000540 <__aeabi_dmul>
 8007952:	a387      	add	r3, pc, #540	@ (adr r3, 8007b70 <__ieee754_acos+0x280>)
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	4606      	mov	r6, r0
 800795a:	460f      	mov	r7, r1
 800795c:	f7f8 fdf0 	bl	8000540 <__aeabi_dmul>
 8007960:	a385      	add	r3, pc, #532	@ (adr r3, 8007b78 <__ieee754_acos+0x288>)
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	f7f8 fc35 	bl	80001d4 <__adddf3>
 800796a:	4632      	mov	r2, r6
 800796c:	463b      	mov	r3, r7
 800796e:	f7f8 fde7 	bl	8000540 <__aeabi_dmul>
 8007972:	a383      	add	r3, pc, #524	@ (adr r3, 8007b80 <__ieee754_acos+0x290>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f7f8 fc2a 	bl	80001d0 <__aeabi_dsub>
 800797c:	4632      	mov	r2, r6
 800797e:	463b      	mov	r3, r7
 8007980:	f7f8 fdde 	bl	8000540 <__aeabi_dmul>
 8007984:	a380      	add	r3, pc, #512	@ (adr r3, 8007b88 <__ieee754_acos+0x298>)
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	f7f8 fc23 	bl	80001d4 <__adddf3>
 800798e:	4632      	mov	r2, r6
 8007990:	463b      	mov	r3, r7
 8007992:	f7f8 fdd5 	bl	8000540 <__aeabi_dmul>
 8007996:	a37e      	add	r3, pc, #504	@ (adr r3, 8007b90 <__ieee754_acos+0x2a0>)
 8007998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799c:	f7f8 fc18 	bl	80001d0 <__aeabi_dsub>
 80079a0:	4632      	mov	r2, r6
 80079a2:	463b      	mov	r3, r7
 80079a4:	f7f8 fdcc 	bl	8000540 <__aeabi_dmul>
 80079a8:	a37b      	add	r3, pc, #492	@ (adr r3, 8007b98 <__ieee754_acos+0x2a8>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fc11 	bl	80001d4 <__adddf3>
 80079b2:	4632      	mov	r2, r6
 80079b4:	463b      	mov	r3, r7
 80079b6:	f7f8 fdc3 	bl	8000540 <__aeabi_dmul>
 80079ba:	a379      	add	r3, pc, #484	@ (adr r3, 8007ba0 <__ieee754_acos+0x2b0>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	4680      	mov	r8, r0
 80079c2:	4689      	mov	r9, r1
 80079c4:	4630      	mov	r0, r6
 80079c6:	4639      	mov	r1, r7
 80079c8:	f7f8 fdba 	bl	8000540 <__aeabi_dmul>
 80079cc:	a376      	add	r3, pc, #472	@ (adr r3, 8007ba8 <__ieee754_acos+0x2b8>)
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	f7f8 fbfd 	bl	80001d0 <__aeabi_dsub>
 80079d6:	4632      	mov	r2, r6
 80079d8:	463b      	mov	r3, r7
 80079da:	f7f8 fdb1 	bl	8000540 <__aeabi_dmul>
 80079de:	a374      	add	r3, pc, #464	@ (adr r3, 8007bb0 <__ieee754_acos+0x2c0>)
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f8 fbf6 	bl	80001d4 <__adddf3>
 80079e8:	4632      	mov	r2, r6
 80079ea:	463b      	mov	r3, r7
 80079ec:	f7f8 fda8 	bl	8000540 <__aeabi_dmul>
 80079f0:	a371      	add	r3, pc, #452	@ (adr r3, 8007bb8 <__ieee754_acos+0x2c8>)
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	f7f8 fbeb 	bl	80001d0 <__aeabi_dsub>
 80079fa:	4632      	mov	r2, r6
 80079fc:	463b      	mov	r3, r7
 80079fe:	f7f8 fd9f 	bl	8000540 <__aeabi_dmul>
 8007a02:	4b78      	ldr	r3, [pc, #480]	@ (8007be4 <__ieee754_acos+0x2f4>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	f7f8 fbe5 	bl	80001d4 <__adddf3>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4640      	mov	r0, r8
 8007a10:	4649      	mov	r1, r9
 8007a12:	f7f8 febf 	bl	8000794 <__aeabi_ddiv>
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	f7f8 fd91 	bl	8000540 <__aeabi_dmul>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	a167      	add	r1, pc, #412	@ (adr r1, 8007bc0 <__ieee754_acos+0x2d0>)
 8007a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a28:	f7f8 fbd2 	bl	80001d0 <__aeabi_dsub>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7f8 fbcc 	bl	80001d0 <__aeabi_dsub>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	a162      	add	r1, pc, #392	@ (adr r1, 8007bc8 <__ieee754_acos+0x2d8>)
 8007a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a42:	f7f8 fbc5 	bl	80001d0 <__aeabi_dsub>
 8007a46:	e773      	b.n	8007930 <__ieee754_acos+0x40>
 8007a48:	2d00      	cmp	r5, #0
 8007a4a:	f280 80cf 	bge.w	8007bec <__ieee754_acos+0x2fc>
 8007a4e:	4b65      	ldr	r3, [pc, #404]	@ (8007be4 <__ieee754_acos+0x2f4>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	4620      	mov	r0, r4
 8007a54:	4629      	mov	r1, r5
 8007a56:	f7f8 fbbd 	bl	80001d4 <__adddf3>
 8007a5a:	4b63      	ldr	r3, [pc, #396]	@ (8007be8 <__ieee754_acos+0x2f8>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f7f8 fd6f 	bl	8000540 <__aeabi_dmul>
 8007a62:	a343      	add	r3, pc, #268	@ (adr r3, 8007b70 <__ieee754_acos+0x280>)
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	f7f8 fd68 	bl	8000540 <__aeabi_dmul>
 8007a70:	a341      	add	r3, pc, #260	@ (adr r3, 8007b78 <__ieee754_acos+0x288>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f7f8 fbad 	bl	80001d4 <__adddf3>
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	462b      	mov	r3, r5
 8007a7e:	f7f8 fd5f 	bl	8000540 <__aeabi_dmul>
 8007a82:	a33f      	add	r3, pc, #252	@ (adr r3, 8007b80 <__ieee754_acos+0x290>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f7f8 fba2 	bl	80001d0 <__aeabi_dsub>
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	462b      	mov	r3, r5
 8007a90:	f7f8 fd56 	bl	8000540 <__aeabi_dmul>
 8007a94:	a33c      	add	r3, pc, #240	@ (adr r3, 8007b88 <__ieee754_acos+0x298>)
 8007a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9a:	f7f8 fb9b 	bl	80001d4 <__adddf3>
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	f7f8 fd4d 	bl	8000540 <__aeabi_dmul>
 8007aa6:	a33a      	add	r3, pc, #232	@ (adr r3, 8007b90 <__ieee754_acos+0x2a0>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f8 fb90 	bl	80001d0 <__aeabi_dsub>
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	f7f8 fd44 	bl	8000540 <__aeabi_dmul>
 8007ab8:	a337      	add	r3, pc, #220	@ (adr r3, 8007b98 <__ieee754_acos+0x2a8>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f7f8 fb89 	bl	80001d4 <__adddf3>
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	462b      	mov	r3, r5
 8007ac6:	f7f8 fd3b 	bl	8000540 <__aeabi_dmul>
 8007aca:	a335      	add	r3, pc, #212	@ (adr r3, 8007ba0 <__ieee754_acos+0x2b0>)
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	460f      	mov	r7, r1
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	f7f8 fd32 	bl	8000540 <__aeabi_dmul>
 8007adc:	a332      	add	r3, pc, #200	@ (adr r3, 8007ba8 <__ieee754_acos+0x2b8>)
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	f7f8 fb75 	bl	80001d0 <__aeabi_dsub>
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	462b      	mov	r3, r5
 8007aea:	f7f8 fd29 	bl	8000540 <__aeabi_dmul>
 8007aee:	a330      	add	r3, pc, #192	@ (adr r3, 8007bb0 <__ieee754_acos+0x2c0>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 fb6e 	bl	80001d4 <__adddf3>
 8007af8:	4622      	mov	r2, r4
 8007afa:	462b      	mov	r3, r5
 8007afc:	f7f8 fd20 	bl	8000540 <__aeabi_dmul>
 8007b00:	a32d      	add	r3, pc, #180	@ (adr r3, 8007bb8 <__ieee754_acos+0x2c8>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fb63 	bl	80001d0 <__aeabi_dsub>
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	f7f8 fd17 	bl	8000540 <__aeabi_dmul>
 8007b12:	4b34      	ldr	r3, [pc, #208]	@ (8007be4 <__ieee754_acos+0x2f4>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	f7f8 fb5d 	bl	80001d4 <__adddf3>
 8007b1a:	ec45 4b10 	vmov	d0, r4, r5
 8007b1e:	4680      	mov	r8, r0
 8007b20:	4689      	mov	r9, r1
 8007b22:	f7ff fe09 	bl	8007738 <__ieee754_sqrt>
 8007b26:	ec55 4b10 	vmov	r4, r5, d0
 8007b2a:	4642      	mov	r2, r8
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	4630      	mov	r0, r6
 8007b30:	4639      	mov	r1, r7
 8007b32:	f7f8 fe2f 	bl	8000794 <__aeabi_ddiv>
 8007b36:	4622      	mov	r2, r4
 8007b38:	462b      	mov	r3, r5
 8007b3a:	f7f8 fd01 	bl	8000540 <__aeabi_dmul>
 8007b3e:	a320      	add	r3, pc, #128	@ (adr r3, 8007bc0 <__ieee754_acos+0x2d0>)
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f7f8 fb44 	bl	80001d0 <__aeabi_dsub>
 8007b48:	4622      	mov	r2, r4
 8007b4a:	462b      	mov	r3, r5
 8007b4c:	f7f8 fb42 	bl	80001d4 <__adddf3>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	f7f8 fb3e 	bl	80001d4 <__adddf3>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	a11c      	add	r1, pc, #112	@ (adr r1, 8007bd0 <__ieee754_acos+0x2e0>)
 8007b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b62:	e76e      	b.n	8007a42 <__ieee754_acos+0x152>
 8007b64:	f3af 8000 	nop.w
	...
 8007b70:	0dfdf709 	.word	0x0dfdf709
 8007b74:	3f023de1 	.word	0x3f023de1
 8007b78:	7501b288 	.word	0x7501b288
 8007b7c:	3f49efe0 	.word	0x3f49efe0
 8007b80:	b5688f3b 	.word	0xb5688f3b
 8007b84:	3fa48228 	.word	0x3fa48228
 8007b88:	0e884455 	.word	0x0e884455
 8007b8c:	3fc9c155 	.word	0x3fc9c155
 8007b90:	03eb6f7d 	.word	0x03eb6f7d
 8007b94:	3fd4d612 	.word	0x3fd4d612
 8007b98:	55555555 	.word	0x55555555
 8007b9c:	3fc55555 	.word	0x3fc55555
 8007ba0:	b12e9282 	.word	0xb12e9282
 8007ba4:	3fb3b8c5 	.word	0x3fb3b8c5
 8007ba8:	1b8d0159 	.word	0x1b8d0159
 8007bac:	3fe6066c 	.word	0x3fe6066c
 8007bb0:	9c598ac8 	.word	0x9c598ac8
 8007bb4:	40002ae5 	.word	0x40002ae5
 8007bb8:	1c8a2d4b 	.word	0x1c8a2d4b
 8007bbc:	40033a27 	.word	0x40033a27
 8007bc0:	33145c07 	.word	0x33145c07
 8007bc4:	3c91a626 	.word	0x3c91a626
 8007bc8:	54442d18 	.word	0x54442d18
 8007bcc:	3ff921fb 	.word	0x3ff921fb
 8007bd0:	54442d18 	.word	0x54442d18
 8007bd4:	400921fb 	.word	0x400921fb
 8007bd8:	3fefffff 	.word	0x3fefffff
 8007bdc:	3fdfffff 	.word	0x3fdfffff
 8007be0:	3c600000 	.word	0x3c600000
 8007be4:	3ff00000 	.word	0x3ff00000
 8007be8:	3fe00000 	.word	0x3fe00000
 8007bec:	4622      	mov	r2, r4
 8007bee:	462b      	mov	r3, r5
 8007bf0:	496b      	ldr	r1, [pc, #428]	@ (8007da0 <__ieee754_acos+0x4b0>)
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	f7f8 faec 	bl	80001d0 <__aeabi_dsub>
 8007bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8007da4 <__ieee754_acos+0x4b4>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f7f8 fca0 	bl	8000540 <__aeabi_dmul>
 8007c00:	4604      	mov	r4, r0
 8007c02:	460d      	mov	r5, r1
 8007c04:	ec45 4b10 	vmov	d0, r4, r5
 8007c08:	f7ff fd96 	bl	8007738 <__ieee754_sqrt>
 8007c0c:	a34c      	add	r3, pc, #304	@ (adr r3, 8007d40 <__ieee754_acos+0x450>)
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	4620      	mov	r0, r4
 8007c14:	4629      	mov	r1, r5
 8007c16:	ec59 8b10 	vmov	r8, r9, d0
 8007c1a:	f7f8 fc91 	bl	8000540 <__aeabi_dmul>
 8007c1e:	a34a      	add	r3, pc, #296	@ (adr r3, 8007d48 <__ieee754_acos+0x458>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f7f8 fad6 	bl	80001d4 <__adddf3>
 8007c28:	4622      	mov	r2, r4
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	f7f8 fc88 	bl	8000540 <__aeabi_dmul>
 8007c30:	a347      	add	r3, pc, #284	@ (adr r3, 8007d50 <__ieee754_acos+0x460>)
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f7f8 facb 	bl	80001d0 <__aeabi_dsub>
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	f7f8 fc7f 	bl	8000540 <__aeabi_dmul>
 8007c42:	a345      	add	r3, pc, #276	@ (adr r3, 8007d58 <__ieee754_acos+0x468>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 fac4 	bl	80001d4 <__adddf3>
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	462b      	mov	r3, r5
 8007c50:	f7f8 fc76 	bl	8000540 <__aeabi_dmul>
 8007c54:	a342      	add	r3, pc, #264	@ (adr r3, 8007d60 <__ieee754_acos+0x470>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	f7f8 fab9 	bl	80001d0 <__aeabi_dsub>
 8007c5e:	4622      	mov	r2, r4
 8007c60:	462b      	mov	r3, r5
 8007c62:	f7f8 fc6d 	bl	8000540 <__aeabi_dmul>
 8007c66:	a340      	add	r3, pc, #256	@ (adr r3, 8007d68 <__ieee754_acos+0x478>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f7f8 fab2 	bl	80001d4 <__adddf3>
 8007c70:	4622      	mov	r2, r4
 8007c72:	462b      	mov	r3, r5
 8007c74:	f7f8 fc64 	bl	8000540 <__aeabi_dmul>
 8007c78:	a33d      	add	r3, pc, #244	@ (adr r3, 8007d70 <__ieee754_acos+0x480>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	4682      	mov	sl, r0
 8007c80:	468b      	mov	fp, r1
 8007c82:	4620      	mov	r0, r4
 8007c84:	4629      	mov	r1, r5
 8007c86:	f7f8 fc5b 	bl	8000540 <__aeabi_dmul>
 8007c8a:	a33b      	add	r3, pc, #236	@ (adr r3, 8007d78 <__ieee754_acos+0x488>)
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	f7f8 fa9e 	bl	80001d0 <__aeabi_dsub>
 8007c94:	4622      	mov	r2, r4
 8007c96:	462b      	mov	r3, r5
 8007c98:	f7f8 fc52 	bl	8000540 <__aeabi_dmul>
 8007c9c:	a338      	add	r3, pc, #224	@ (adr r3, 8007d80 <__ieee754_acos+0x490>)
 8007c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca2:	f7f8 fa97 	bl	80001d4 <__adddf3>
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	462b      	mov	r3, r5
 8007caa:	f7f8 fc49 	bl	8000540 <__aeabi_dmul>
 8007cae:	a336      	add	r3, pc, #216	@ (adr r3, 8007d88 <__ieee754_acos+0x498>)
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f7f8 fa8c 	bl	80001d0 <__aeabi_dsub>
 8007cb8:	4622      	mov	r2, r4
 8007cba:	462b      	mov	r3, r5
 8007cbc:	f7f8 fc40 	bl	8000540 <__aeabi_dmul>
 8007cc0:	4b37      	ldr	r3, [pc, #220]	@ (8007da0 <__ieee754_acos+0x4b0>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f7f8 fa86 	bl	80001d4 <__adddf3>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4650      	mov	r0, sl
 8007cce:	4659      	mov	r1, fp
 8007cd0:	f7f8 fd60 	bl	8000794 <__aeabi_ddiv>
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	f7f8 fc32 	bl	8000540 <__aeabi_dmul>
 8007cdc:	2600      	movs	r6, #0
 8007cde:	4682      	mov	sl, r0
 8007ce0:	468b      	mov	fp, r1
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fc29 	bl	8000540 <__aeabi_dmul>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f7f8 fa6b 	bl	80001d0 <__aeabi_dsub>
 8007cfa:	4632      	mov	r2, r6
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	464b      	mov	r3, r9
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f7f8 fa65 	bl	80001d4 <__adddf3>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4620      	mov	r0, r4
 8007d10:	4629      	mov	r1, r5
 8007d12:	f7f8 fd3f 	bl	8000794 <__aeabi_ddiv>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4650      	mov	r0, sl
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	f7f8 fa59 	bl	80001d4 <__adddf3>
 8007d22:	4632      	mov	r2, r6
 8007d24:	464b      	mov	r3, r9
 8007d26:	f7f8 fa55 	bl	80001d4 <__adddf3>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	f7f8 fa51 	bl	80001d4 <__adddf3>
 8007d32:	e5fd      	b.n	8007930 <__ieee754_acos+0x40>
 8007d34:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8007d90 <__ieee754_acos+0x4a0>
 8007d38:	e5ee      	b.n	8007918 <__ieee754_acos+0x28>
 8007d3a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007d98 <__ieee754_acos+0x4a8>
 8007d3e:	e5eb      	b.n	8007918 <__ieee754_acos+0x28>
 8007d40:	0dfdf709 	.word	0x0dfdf709
 8007d44:	3f023de1 	.word	0x3f023de1
 8007d48:	7501b288 	.word	0x7501b288
 8007d4c:	3f49efe0 	.word	0x3f49efe0
 8007d50:	b5688f3b 	.word	0xb5688f3b
 8007d54:	3fa48228 	.word	0x3fa48228
 8007d58:	0e884455 	.word	0x0e884455
 8007d5c:	3fc9c155 	.word	0x3fc9c155
 8007d60:	03eb6f7d 	.word	0x03eb6f7d
 8007d64:	3fd4d612 	.word	0x3fd4d612
 8007d68:	55555555 	.word	0x55555555
 8007d6c:	3fc55555 	.word	0x3fc55555
 8007d70:	b12e9282 	.word	0xb12e9282
 8007d74:	3fb3b8c5 	.word	0x3fb3b8c5
 8007d78:	1b8d0159 	.word	0x1b8d0159
 8007d7c:	3fe6066c 	.word	0x3fe6066c
 8007d80:	9c598ac8 	.word	0x9c598ac8
 8007d84:	40002ae5 	.word	0x40002ae5
 8007d88:	1c8a2d4b 	.word	0x1c8a2d4b
 8007d8c:	40033a27 	.word	0x40033a27
 8007d90:	54442d18 	.word	0x54442d18
 8007d94:	400921fb 	.word	0x400921fb
 8007d98:	54442d18 	.word	0x54442d18
 8007d9c:	3ff921fb 	.word	0x3ff921fb
 8007da0:	3ff00000 	.word	0x3ff00000
 8007da4:	3fe00000 	.word	0x3fe00000

08007da8 <__ieee754_asin>:
 8007da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dac:	ec55 4b10 	vmov	r4, r5, d0
 8007db0:	4bc7      	ldr	r3, [pc, #796]	@ (80080d0 <__ieee754_asin+0x328>)
 8007db2:	b087      	sub	sp, #28
 8007db4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007db8:	429e      	cmp	r6, r3
 8007dba:	9501      	str	r5, [sp, #4]
 8007dbc:	d92d      	bls.n	8007e1a <__ieee754_asin+0x72>
 8007dbe:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8007dc2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007dc6:	4326      	orrs	r6, r4
 8007dc8:	d116      	bne.n	8007df8 <__ieee754_asin+0x50>
 8007dca:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008068 <__ieee754_asin+0x2c0>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	f7f8 fbb4 	bl	8000540 <__aeabi_dmul>
 8007dd8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8008070 <__ieee754_asin+0x2c8>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	4606      	mov	r6, r0
 8007de0:	460f      	mov	r7, r1
 8007de2:	4620      	mov	r0, r4
 8007de4:	4629      	mov	r1, r5
 8007de6:	f7f8 fbab 	bl	8000540 <__aeabi_dmul>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 f9ef 	bl	80001d4 <__adddf3>
 8007df6:	e009      	b.n	8007e0c <__ieee754_asin+0x64>
 8007df8:	4622      	mov	r2, r4
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7f8 f9e6 	bl	80001d0 <__aeabi_dsub>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	f7f8 fcc4 	bl	8000794 <__aeabi_ddiv>
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	ec45 4b10 	vmov	d0, r4, r5
 8007e14:	b007      	add	sp, #28
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	4bae      	ldr	r3, [pc, #696]	@ (80080d4 <__ieee754_asin+0x32c>)
 8007e1c:	429e      	cmp	r6, r3
 8007e1e:	d810      	bhi.n	8007e42 <__ieee754_asin+0x9a>
 8007e20:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8007e24:	f080 80ad 	bcs.w	8007f82 <__ieee754_asin+0x1da>
 8007e28:	a393      	add	r3, pc, #588	@ (adr r3, 8008078 <__ieee754_asin+0x2d0>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	4629      	mov	r1, r5
 8007e32:	f7f8 f9cf 	bl	80001d4 <__adddf3>
 8007e36:	4ba8      	ldr	r3, [pc, #672]	@ (80080d8 <__ieee754_asin+0x330>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f7f8 fe11 	bl	8000a60 <__aeabi_dcmpgt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d1e6      	bne.n	8007e10 <__ieee754_asin+0x68>
 8007e42:	ec45 4b10 	vmov	d0, r4, r5
 8007e46:	f7ff fc5b 	bl	8007700 <fabs>
 8007e4a:	49a3      	ldr	r1, [pc, #652]	@ (80080d8 <__ieee754_asin+0x330>)
 8007e4c:	ec53 2b10 	vmov	r2, r3, d0
 8007e50:	2000      	movs	r0, #0
 8007e52:	f7f8 f9bd 	bl	80001d0 <__aeabi_dsub>
 8007e56:	4ba1      	ldr	r3, [pc, #644]	@ (80080dc <__ieee754_asin+0x334>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f7f8 fb71 	bl	8000540 <__aeabi_dmul>
 8007e5e:	a388      	add	r3, pc, #544	@ (adr r3, 8008080 <__ieee754_asin+0x2d8>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	f7f8 fb6a 	bl	8000540 <__aeabi_dmul>
 8007e6c:	a386      	add	r3, pc, #536	@ (adr r3, 8008088 <__ieee754_asin+0x2e0>)
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	f7f8 f9af 	bl	80001d4 <__adddf3>
 8007e76:	4622      	mov	r2, r4
 8007e78:	462b      	mov	r3, r5
 8007e7a:	f7f8 fb61 	bl	8000540 <__aeabi_dmul>
 8007e7e:	a384      	add	r3, pc, #528	@ (adr r3, 8008090 <__ieee754_asin+0x2e8>)
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f7f8 f9a4 	bl	80001d0 <__aeabi_dsub>
 8007e88:	4622      	mov	r2, r4
 8007e8a:	462b      	mov	r3, r5
 8007e8c:	f7f8 fb58 	bl	8000540 <__aeabi_dmul>
 8007e90:	a381      	add	r3, pc, #516	@ (adr r3, 8008098 <__ieee754_asin+0x2f0>)
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	f7f8 f99d 	bl	80001d4 <__adddf3>
 8007e9a:	4622      	mov	r2, r4
 8007e9c:	462b      	mov	r3, r5
 8007e9e:	f7f8 fb4f 	bl	8000540 <__aeabi_dmul>
 8007ea2:	a37f      	add	r3, pc, #508	@ (adr r3, 80080a0 <__ieee754_asin+0x2f8>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f7f8 f992 	bl	80001d0 <__aeabi_dsub>
 8007eac:	4622      	mov	r2, r4
 8007eae:	462b      	mov	r3, r5
 8007eb0:	f7f8 fb46 	bl	8000540 <__aeabi_dmul>
 8007eb4:	a37c      	add	r3, pc, #496	@ (adr r3, 80080a8 <__ieee754_asin+0x300>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 f98b 	bl	80001d4 <__adddf3>
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	462b      	mov	r3, r5
 8007ec2:	f7f8 fb3d 	bl	8000540 <__aeabi_dmul>
 8007ec6:	a37a      	add	r3, pc, #488	@ (adr r3, 80080b0 <__ieee754_asin+0x308>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 fb34 	bl	8000540 <__aeabi_dmul>
 8007ed8:	a377      	add	r3, pc, #476	@ (adr r3, 80080b8 <__ieee754_asin+0x310>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 f977 	bl	80001d0 <__aeabi_dsub>
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	f7f8 fb2b 	bl	8000540 <__aeabi_dmul>
 8007eea:	a375      	add	r3, pc, #468	@ (adr r3, 80080c0 <__ieee754_asin+0x318>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f7f8 f970 	bl	80001d4 <__adddf3>
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	462b      	mov	r3, r5
 8007ef8:	f7f8 fb22 	bl	8000540 <__aeabi_dmul>
 8007efc:	a372      	add	r3, pc, #456	@ (adr r3, 80080c8 <__ieee754_asin+0x320>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 f965 	bl	80001d0 <__aeabi_dsub>
 8007f06:	4622      	mov	r2, r4
 8007f08:	462b      	mov	r3, r5
 8007f0a:	f7f8 fb19 	bl	8000540 <__aeabi_dmul>
 8007f0e:	4b72      	ldr	r3, [pc, #456]	@ (80080d8 <__ieee754_asin+0x330>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	f7f8 f95f 	bl	80001d4 <__adddf3>
 8007f16:	ec45 4b10 	vmov	d0, r4, r5
 8007f1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f1e:	f7ff fc0b 	bl	8007738 <__ieee754_sqrt>
 8007f22:	4b6f      	ldr	r3, [pc, #444]	@ (80080e0 <__ieee754_asin+0x338>)
 8007f24:	429e      	cmp	r6, r3
 8007f26:	ec5b ab10 	vmov	sl, fp, d0
 8007f2a:	f240 80db 	bls.w	80080e4 <__ieee754_asin+0x33c>
 8007f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f36:	f7f8 fc2d 	bl	8000794 <__aeabi_ddiv>
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	f7f8 faff 	bl	8000540 <__aeabi_dmul>
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	f7f8 f945 	bl	80001d4 <__adddf3>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	f7f8 f941 	bl	80001d4 <__adddf3>
 8007f52:	a347      	add	r3, pc, #284	@ (adr r3, 8008070 <__ieee754_asin+0x2c8>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 f93a 	bl	80001d0 <__aeabi_dsub>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	a141      	add	r1, pc, #260	@ (adr r1, 8008068 <__ieee754_asin+0x2c0>)
 8007f62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f66:	f7f8 f933 	bl	80001d0 <__aeabi_dsub>
 8007f6a:	9b01      	ldr	r3, [sp, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bfdc      	itt	le
 8007f70:	4602      	movle	r2, r0
 8007f72:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8007f76:	4604      	mov	r4, r0
 8007f78:	460d      	mov	r5, r1
 8007f7a:	bfdc      	itt	le
 8007f7c:	4614      	movle	r4, r2
 8007f7e:	461d      	movle	r5, r3
 8007f80:	e746      	b.n	8007e10 <__ieee754_asin+0x68>
 8007f82:	4622      	mov	r2, r4
 8007f84:	462b      	mov	r3, r5
 8007f86:	4620      	mov	r0, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f7f8 fad9 	bl	8000540 <__aeabi_dmul>
 8007f8e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008080 <__ieee754_asin+0x2d8>)
 8007f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f94:	4606      	mov	r6, r0
 8007f96:	460f      	mov	r7, r1
 8007f98:	f7f8 fad2 	bl	8000540 <__aeabi_dmul>
 8007f9c:	a33a      	add	r3, pc, #232	@ (adr r3, 8008088 <__ieee754_asin+0x2e0>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f7f8 f917 	bl	80001d4 <__adddf3>
 8007fa6:	4632      	mov	r2, r6
 8007fa8:	463b      	mov	r3, r7
 8007faa:	f7f8 fac9 	bl	8000540 <__aeabi_dmul>
 8007fae:	a338      	add	r3, pc, #224	@ (adr r3, 8008090 <__ieee754_asin+0x2e8>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f7f8 f90c 	bl	80001d0 <__aeabi_dsub>
 8007fb8:	4632      	mov	r2, r6
 8007fba:	463b      	mov	r3, r7
 8007fbc:	f7f8 fac0 	bl	8000540 <__aeabi_dmul>
 8007fc0:	a335      	add	r3, pc, #212	@ (adr r3, 8008098 <__ieee754_asin+0x2f0>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f7f8 f905 	bl	80001d4 <__adddf3>
 8007fca:	4632      	mov	r2, r6
 8007fcc:	463b      	mov	r3, r7
 8007fce:	f7f8 fab7 	bl	8000540 <__aeabi_dmul>
 8007fd2:	a333      	add	r3, pc, #204	@ (adr r3, 80080a0 <__ieee754_asin+0x2f8>)
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	f7f8 f8fa 	bl	80001d0 <__aeabi_dsub>
 8007fdc:	4632      	mov	r2, r6
 8007fde:	463b      	mov	r3, r7
 8007fe0:	f7f8 faae 	bl	8000540 <__aeabi_dmul>
 8007fe4:	a330      	add	r3, pc, #192	@ (adr r3, 80080a8 <__ieee754_asin+0x300>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 f8f3 	bl	80001d4 <__adddf3>
 8007fee:	4632      	mov	r2, r6
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	f7f8 faa5 	bl	8000540 <__aeabi_dmul>
 8007ff6:	a32e      	add	r3, pc, #184	@ (adr r3, 80080b0 <__ieee754_asin+0x308>)
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4689      	mov	r9, r1
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 fa9c 	bl	8000540 <__aeabi_dmul>
 8008008:	a32b      	add	r3, pc, #172	@ (adr r3, 80080b8 <__ieee754_asin+0x310>)
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f7f8 f8df 	bl	80001d0 <__aeabi_dsub>
 8008012:	4632      	mov	r2, r6
 8008014:	463b      	mov	r3, r7
 8008016:	f7f8 fa93 	bl	8000540 <__aeabi_dmul>
 800801a:	a329      	add	r3, pc, #164	@ (adr r3, 80080c0 <__ieee754_asin+0x318>)
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f7f8 f8d8 	bl	80001d4 <__adddf3>
 8008024:	4632      	mov	r2, r6
 8008026:	463b      	mov	r3, r7
 8008028:	f7f8 fa8a 	bl	8000540 <__aeabi_dmul>
 800802c:	a326      	add	r3, pc, #152	@ (adr r3, 80080c8 <__ieee754_asin+0x320>)
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	f7f8 f8cd 	bl	80001d0 <__aeabi_dsub>
 8008036:	4632      	mov	r2, r6
 8008038:	463b      	mov	r3, r7
 800803a:	f7f8 fa81 	bl	8000540 <__aeabi_dmul>
 800803e:	4b26      	ldr	r3, [pc, #152]	@ (80080d8 <__ieee754_asin+0x330>)
 8008040:	2200      	movs	r2, #0
 8008042:	f7f8 f8c7 	bl	80001d4 <__adddf3>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 fba1 	bl	8000794 <__aeabi_ddiv>
 8008052:	4622      	mov	r2, r4
 8008054:	462b      	mov	r3, r5
 8008056:	f7f8 fa73 	bl	8000540 <__aeabi_dmul>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	e6c6      	b.n	8007df2 <__ieee754_asin+0x4a>
 8008064:	f3af 8000 	nop.w
 8008068:	54442d18 	.word	0x54442d18
 800806c:	3ff921fb 	.word	0x3ff921fb
 8008070:	33145c07 	.word	0x33145c07
 8008074:	3c91a626 	.word	0x3c91a626
 8008078:	8800759c 	.word	0x8800759c
 800807c:	7e37e43c 	.word	0x7e37e43c
 8008080:	0dfdf709 	.word	0x0dfdf709
 8008084:	3f023de1 	.word	0x3f023de1
 8008088:	7501b288 	.word	0x7501b288
 800808c:	3f49efe0 	.word	0x3f49efe0
 8008090:	b5688f3b 	.word	0xb5688f3b
 8008094:	3fa48228 	.word	0x3fa48228
 8008098:	0e884455 	.word	0x0e884455
 800809c:	3fc9c155 	.word	0x3fc9c155
 80080a0:	03eb6f7d 	.word	0x03eb6f7d
 80080a4:	3fd4d612 	.word	0x3fd4d612
 80080a8:	55555555 	.word	0x55555555
 80080ac:	3fc55555 	.word	0x3fc55555
 80080b0:	b12e9282 	.word	0xb12e9282
 80080b4:	3fb3b8c5 	.word	0x3fb3b8c5
 80080b8:	1b8d0159 	.word	0x1b8d0159
 80080bc:	3fe6066c 	.word	0x3fe6066c
 80080c0:	9c598ac8 	.word	0x9c598ac8
 80080c4:	40002ae5 	.word	0x40002ae5
 80080c8:	1c8a2d4b 	.word	0x1c8a2d4b
 80080cc:	40033a27 	.word	0x40033a27
 80080d0:	3fefffff 	.word	0x3fefffff
 80080d4:	3fdfffff 	.word	0x3fdfffff
 80080d8:	3ff00000 	.word	0x3ff00000
 80080dc:	3fe00000 	.word	0x3fe00000
 80080e0:	3fef3332 	.word	0x3fef3332
 80080e4:	4652      	mov	r2, sl
 80080e6:	465b      	mov	r3, fp
 80080e8:	4650      	mov	r0, sl
 80080ea:	4659      	mov	r1, fp
 80080ec:	f7f8 f872 	bl	80001d4 <__adddf3>
 80080f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080f4:	4606      	mov	r6, r0
 80080f6:	460f      	mov	r7, r1
 80080f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080fc:	f7f8 fb4a 	bl	8000794 <__aeabi_ddiv>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4630      	mov	r0, r6
 8008106:	4639      	mov	r1, r7
 8008108:	f7f8 fa1a 	bl	8000540 <__aeabi_dmul>
 800810c:	f04f 0800 	mov.w	r8, #0
 8008110:	4606      	mov	r6, r0
 8008112:	460f      	mov	r7, r1
 8008114:	4642      	mov	r2, r8
 8008116:	465b      	mov	r3, fp
 8008118:	4640      	mov	r0, r8
 800811a:	4659      	mov	r1, fp
 800811c:	f7f8 fa10 	bl	8000540 <__aeabi_dmul>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4620      	mov	r0, r4
 8008126:	4629      	mov	r1, r5
 8008128:	f7f8 f852 	bl	80001d0 <__aeabi_dsub>
 800812c:	4642      	mov	r2, r8
 800812e:	4604      	mov	r4, r0
 8008130:	460d      	mov	r5, r1
 8008132:	465b      	mov	r3, fp
 8008134:	4650      	mov	r0, sl
 8008136:	4659      	mov	r1, fp
 8008138:	f7f8 f84c 	bl	80001d4 <__adddf3>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4620      	mov	r0, r4
 8008142:	4629      	mov	r1, r5
 8008144:	f7f8 fb26 	bl	8000794 <__aeabi_ddiv>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	f7f8 f842 	bl	80001d4 <__adddf3>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	a112      	add	r1, pc, #72	@ (adr r1, 80081a0 <__ieee754_asin+0x3f8>)
 8008156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800815a:	f7f8 f839 	bl	80001d0 <__aeabi_dsub>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4630      	mov	r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	f7f8 f833 	bl	80001d0 <__aeabi_dsub>
 800816a:	4642      	mov	r2, r8
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	465b      	mov	r3, fp
 8008172:	4640      	mov	r0, r8
 8008174:	4659      	mov	r1, fp
 8008176:	f7f8 f82d 	bl	80001d4 <__adddf3>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	a10a      	add	r1, pc, #40	@ (adr r1, 80081a8 <__ieee754_asin+0x400>)
 8008180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008184:	f7f8 f824 	bl	80001d0 <__aeabi_dsub>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4620      	mov	r0, r4
 800818e:	4629      	mov	r1, r5
 8008190:	f7f8 f81e 	bl	80001d0 <__aeabi_dsub>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	a103      	add	r1, pc, #12	@ (adr r1, 80081a8 <__ieee754_asin+0x400>)
 800819a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800819e:	e6e2      	b.n	8007f66 <__ieee754_asin+0x1be>
 80081a0:	33145c07 	.word	0x33145c07
 80081a4:	3c91a626 	.word	0x3c91a626
 80081a8:	54442d18 	.word	0x54442d18
 80081ac:	3fe921fb 	.word	0x3fe921fb

080081b0 <__ieee754_pow>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	b091      	sub	sp, #68	@ 0x44
 80081b6:	ed8d 1b00 	vstr	d1, [sp]
 80081ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80081be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80081c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80081c6:	ec57 6b10 	vmov	r6, r7, d0
 80081ca:	d113      	bne.n	80081f4 <__ieee754_pow+0x44>
 80081cc:	19b3      	adds	r3, r6, r6
 80081ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80081d2:	4152      	adcs	r2, r2
 80081d4:	4298      	cmp	r0, r3
 80081d6:	4b98      	ldr	r3, [pc, #608]	@ (8008438 <__ieee754_pow+0x288>)
 80081d8:	4193      	sbcs	r3, r2
 80081da:	f080 84ea 	bcs.w	8008bb2 <__ieee754_pow+0xa02>
 80081de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081e2:	4630      	mov	r0, r6
 80081e4:	4639      	mov	r1, r7
 80081e6:	f7f7 fff5 	bl	80001d4 <__adddf3>
 80081ea:	ec41 0b10 	vmov	d0, r0, r1
 80081ee:	b011      	add	sp, #68	@ 0x44
 80081f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f4:	4a91      	ldr	r2, [pc, #580]	@ (800843c <__ieee754_pow+0x28c>)
 80081f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80081fa:	4590      	cmp	r8, r2
 80081fc:	463d      	mov	r5, r7
 80081fe:	4633      	mov	r3, r6
 8008200:	d806      	bhi.n	8008210 <__ieee754_pow+0x60>
 8008202:	d101      	bne.n	8008208 <__ieee754_pow+0x58>
 8008204:	2e00      	cmp	r6, #0
 8008206:	d1ea      	bne.n	80081de <__ieee754_pow+0x2e>
 8008208:	4592      	cmp	sl, r2
 800820a:	d801      	bhi.n	8008210 <__ieee754_pow+0x60>
 800820c:	d10e      	bne.n	800822c <__ieee754_pow+0x7c>
 800820e:	b169      	cbz	r1, 800822c <__ieee754_pow+0x7c>
 8008210:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008214:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008218:	431d      	orrs	r5, r3
 800821a:	d1e0      	bne.n	80081de <__ieee754_pow+0x2e>
 800821c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008220:	18db      	adds	r3, r3, r3
 8008222:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008226:	4152      	adcs	r2, r2
 8008228:	429d      	cmp	r5, r3
 800822a:	e7d4      	b.n	80081d6 <__ieee754_pow+0x26>
 800822c:	2d00      	cmp	r5, #0
 800822e:	46c3      	mov	fp, r8
 8008230:	da3a      	bge.n	80082a8 <__ieee754_pow+0xf8>
 8008232:	4a83      	ldr	r2, [pc, #524]	@ (8008440 <__ieee754_pow+0x290>)
 8008234:	4592      	cmp	sl, r2
 8008236:	d84d      	bhi.n	80082d4 <__ieee754_pow+0x124>
 8008238:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800823c:	4592      	cmp	sl, r2
 800823e:	f240 84c7 	bls.w	8008bd0 <__ieee754_pow+0xa20>
 8008242:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008246:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800824a:	2a14      	cmp	r2, #20
 800824c:	dd0f      	ble.n	800826e <__ieee754_pow+0xbe>
 800824e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008252:	fa21 f402 	lsr.w	r4, r1, r2
 8008256:	fa04 f202 	lsl.w	r2, r4, r2
 800825a:	428a      	cmp	r2, r1
 800825c:	f040 84b8 	bne.w	8008bd0 <__ieee754_pow+0xa20>
 8008260:	f004 0401 	and.w	r4, r4, #1
 8008264:	f1c4 0402 	rsb	r4, r4, #2
 8008268:	2900      	cmp	r1, #0
 800826a:	d158      	bne.n	800831e <__ieee754_pow+0x16e>
 800826c:	e00e      	b.n	800828c <__ieee754_pow+0xdc>
 800826e:	2900      	cmp	r1, #0
 8008270:	d154      	bne.n	800831c <__ieee754_pow+0x16c>
 8008272:	f1c2 0214 	rsb	r2, r2, #20
 8008276:	fa4a f402 	asr.w	r4, sl, r2
 800827a:	fa04 f202 	lsl.w	r2, r4, r2
 800827e:	4552      	cmp	r2, sl
 8008280:	f040 84a3 	bne.w	8008bca <__ieee754_pow+0xa1a>
 8008284:	f004 0401 	and.w	r4, r4, #1
 8008288:	f1c4 0402 	rsb	r4, r4, #2
 800828c:	4a6d      	ldr	r2, [pc, #436]	@ (8008444 <__ieee754_pow+0x294>)
 800828e:	4592      	cmp	sl, r2
 8008290:	d12e      	bne.n	80082f0 <__ieee754_pow+0x140>
 8008292:	f1b9 0f00 	cmp.w	r9, #0
 8008296:	f280 8494 	bge.w	8008bc2 <__ieee754_pow+0xa12>
 800829a:	496a      	ldr	r1, [pc, #424]	@ (8008444 <__ieee754_pow+0x294>)
 800829c:	4632      	mov	r2, r6
 800829e:	463b      	mov	r3, r7
 80082a0:	2000      	movs	r0, #0
 80082a2:	f7f8 fa77 	bl	8000794 <__aeabi_ddiv>
 80082a6:	e7a0      	b.n	80081ea <__ieee754_pow+0x3a>
 80082a8:	2400      	movs	r4, #0
 80082aa:	bbc1      	cbnz	r1, 800831e <__ieee754_pow+0x16e>
 80082ac:	4a63      	ldr	r2, [pc, #396]	@ (800843c <__ieee754_pow+0x28c>)
 80082ae:	4592      	cmp	sl, r2
 80082b0:	d1ec      	bne.n	800828c <__ieee754_pow+0xdc>
 80082b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80082b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80082ba:	431a      	orrs	r2, r3
 80082bc:	f000 8479 	beq.w	8008bb2 <__ieee754_pow+0xa02>
 80082c0:	4b61      	ldr	r3, [pc, #388]	@ (8008448 <__ieee754_pow+0x298>)
 80082c2:	4598      	cmp	r8, r3
 80082c4:	d908      	bls.n	80082d8 <__ieee754_pow+0x128>
 80082c6:	f1b9 0f00 	cmp.w	r9, #0
 80082ca:	f2c0 8476 	blt.w	8008bba <__ieee754_pow+0xa0a>
 80082ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082d2:	e78a      	b.n	80081ea <__ieee754_pow+0x3a>
 80082d4:	2402      	movs	r4, #2
 80082d6:	e7e8      	b.n	80082aa <__ieee754_pow+0xfa>
 80082d8:	f1b9 0f00 	cmp.w	r9, #0
 80082dc:	f04f 0000 	mov.w	r0, #0
 80082e0:	f04f 0100 	mov.w	r1, #0
 80082e4:	da81      	bge.n	80081ea <__ieee754_pow+0x3a>
 80082e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80082ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80082ee:	e77c      	b.n	80081ea <__ieee754_pow+0x3a>
 80082f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80082f4:	d106      	bne.n	8008304 <__ieee754_pow+0x154>
 80082f6:	4632      	mov	r2, r6
 80082f8:	463b      	mov	r3, r7
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f8 f91f 	bl	8000540 <__aeabi_dmul>
 8008302:	e772      	b.n	80081ea <__ieee754_pow+0x3a>
 8008304:	4a51      	ldr	r2, [pc, #324]	@ (800844c <__ieee754_pow+0x29c>)
 8008306:	4591      	cmp	r9, r2
 8008308:	d109      	bne.n	800831e <__ieee754_pow+0x16e>
 800830a:	2d00      	cmp	r5, #0
 800830c:	db07      	blt.n	800831e <__ieee754_pow+0x16e>
 800830e:	ec47 6b10 	vmov	d0, r6, r7
 8008312:	b011      	add	sp, #68	@ 0x44
 8008314:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	f7ff ba0e 	b.w	8007738 <__ieee754_sqrt>
 800831c:	2400      	movs	r4, #0
 800831e:	ec47 6b10 	vmov	d0, r6, r7
 8008322:	9302      	str	r3, [sp, #8]
 8008324:	f7ff f9ec 	bl	8007700 <fabs>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	ec51 0b10 	vmov	r0, r1, d0
 800832e:	bb53      	cbnz	r3, 8008386 <__ieee754_pow+0x1d6>
 8008330:	4b44      	ldr	r3, [pc, #272]	@ (8008444 <__ieee754_pow+0x294>)
 8008332:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008336:	429a      	cmp	r2, r3
 8008338:	d002      	beq.n	8008340 <__ieee754_pow+0x190>
 800833a:	f1b8 0f00 	cmp.w	r8, #0
 800833e:	d122      	bne.n	8008386 <__ieee754_pow+0x1d6>
 8008340:	f1b9 0f00 	cmp.w	r9, #0
 8008344:	da05      	bge.n	8008352 <__ieee754_pow+0x1a2>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	2000      	movs	r0, #0
 800834c:	493d      	ldr	r1, [pc, #244]	@ (8008444 <__ieee754_pow+0x294>)
 800834e:	f7f8 fa21 	bl	8000794 <__aeabi_ddiv>
 8008352:	2d00      	cmp	r5, #0
 8008354:	f6bf af49 	bge.w	80081ea <__ieee754_pow+0x3a>
 8008358:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800835c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008360:	ea58 0804 	orrs.w	r8, r8, r4
 8008364:	d108      	bne.n	8008378 <__ieee754_pow+0x1c8>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4610      	mov	r0, r2
 800836c:	4619      	mov	r1, r3
 800836e:	f7f7 ff2f 	bl	80001d0 <__aeabi_dsub>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	e794      	b.n	80082a2 <__ieee754_pow+0xf2>
 8008378:	2c01      	cmp	r4, #1
 800837a:	f47f af36 	bne.w	80081ea <__ieee754_pow+0x3a>
 800837e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008382:	4619      	mov	r1, r3
 8008384:	e731      	b.n	80081ea <__ieee754_pow+0x3a>
 8008386:	0feb      	lsrs	r3, r5, #31
 8008388:	3b01      	subs	r3, #1
 800838a:	ea53 0204 	orrs.w	r2, r3, r4
 800838e:	d102      	bne.n	8008396 <__ieee754_pow+0x1e6>
 8008390:	4632      	mov	r2, r6
 8008392:	463b      	mov	r3, r7
 8008394:	e7e9      	b.n	800836a <__ieee754_pow+0x1ba>
 8008396:	3c01      	subs	r4, #1
 8008398:	431c      	orrs	r4, r3
 800839a:	d016      	beq.n	80083ca <__ieee754_pow+0x21a>
 800839c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008428 <__ieee754_pow+0x278>
 80083a0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80083a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083a8:	f240 8112 	bls.w	80085d0 <__ieee754_pow+0x420>
 80083ac:	4b28      	ldr	r3, [pc, #160]	@ (8008450 <__ieee754_pow+0x2a0>)
 80083ae:	459a      	cmp	sl, r3
 80083b0:	4b25      	ldr	r3, [pc, #148]	@ (8008448 <__ieee754_pow+0x298>)
 80083b2:	d916      	bls.n	80083e2 <__ieee754_pow+0x232>
 80083b4:	4598      	cmp	r8, r3
 80083b6:	d80b      	bhi.n	80083d0 <__ieee754_pow+0x220>
 80083b8:	f1b9 0f00 	cmp.w	r9, #0
 80083bc:	da0b      	bge.n	80083d6 <__ieee754_pow+0x226>
 80083be:	2000      	movs	r0, #0
 80083c0:	b011      	add	sp, #68	@ 0x44
 80083c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c6:	f000 bceb 	b.w	8008da0 <__math_oflow>
 80083ca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008430 <__ieee754_pow+0x280>
 80083ce:	e7e7      	b.n	80083a0 <__ieee754_pow+0x1f0>
 80083d0:	f1b9 0f00 	cmp.w	r9, #0
 80083d4:	dcf3      	bgt.n	80083be <__ieee754_pow+0x20e>
 80083d6:	2000      	movs	r0, #0
 80083d8:	b011      	add	sp, #68	@ 0x44
 80083da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083de:	f000 bcd7 	b.w	8008d90 <__math_uflow>
 80083e2:	4598      	cmp	r8, r3
 80083e4:	d20c      	bcs.n	8008400 <__ieee754_pow+0x250>
 80083e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	2300      	movs	r3, #0
 80083ee:	f7f8 fb19 	bl	8000a24 <__aeabi_dcmplt>
 80083f2:	3800      	subs	r0, #0
 80083f4:	bf18      	it	ne
 80083f6:	2001      	movne	r0, #1
 80083f8:	f1b9 0f00 	cmp.w	r9, #0
 80083fc:	daec      	bge.n	80083d8 <__ieee754_pow+0x228>
 80083fe:	e7df      	b.n	80083c0 <__ieee754_pow+0x210>
 8008400:	4b10      	ldr	r3, [pc, #64]	@ (8008444 <__ieee754_pow+0x294>)
 8008402:	4598      	cmp	r8, r3
 8008404:	f04f 0200 	mov.w	r2, #0
 8008408:	d924      	bls.n	8008454 <__ieee754_pow+0x2a4>
 800840a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800840e:	2300      	movs	r3, #0
 8008410:	f7f8 fb08 	bl	8000a24 <__aeabi_dcmplt>
 8008414:	3800      	subs	r0, #0
 8008416:	bf18      	it	ne
 8008418:	2001      	movne	r0, #1
 800841a:	f1b9 0f00 	cmp.w	r9, #0
 800841e:	dccf      	bgt.n	80083c0 <__ieee754_pow+0x210>
 8008420:	e7da      	b.n	80083d8 <__ieee754_pow+0x228>
 8008422:	bf00      	nop
 8008424:	f3af 8000 	nop.w
 8008428:	00000000 	.word	0x00000000
 800842c:	3ff00000 	.word	0x3ff00000
 8008430:	00000000 	.word	0x00000000
 8008434:	bff00000 	.word	0xbff00000
 8008438:	fff00000 	.word	0xfff00000
 800843c:	7ff00000 	.word	0x7ff00000
 8008440:	433fffff 	.word	0x433fffff
 8008444:	3ff00000 	.word	0x3ff00000
 8008448:	3fefffff 	.word	0x3fefffff
 800844c:	3fe00000 	.word	0x3fe00000
 8008450:	43f00000 	.word	0x43f00000
 8008454:	4b5a      	ldr	r3, [pc, #360]	@ (80085c0 <__ieee754_pow+0x410>)
 8008456:	f7f7 febb 	bl	80001d0 <__aeabi_dsub>
 800845a:	a351      	add	r3, pc, #324	@ (adr r3, 80085a0 <__ieee754_pow+0x3f0>)
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	4604      	mov	r4, r0
 8008462:	460d      	mov	r5, r1
 8008464:	f7f8 f86c 	bl	8000540 <__aeabi_dmul>
 8008468:	a34f      	add	r3, pc, #316	@ (adr r3, 80085a8 <__ieee754_pow+0x3f8>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	4606      	mov	r6, r0
 8008470:	460f      	mov	r7, r1
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f7f8 f863 	bl	8000540 <__aeabi_dmul>
 800847a:	4b52      	ldr	r3, [pc, #328]	@ (80085c4 <__ieee754_pow+0x414>)
 800847c:	4682      	mov	sl, r0
 800847e:	468b      	mov	fp, r1
 8008480:	2200      	movs	r2, #0
 8008482:	4620      	mov	r0, r4
 8008484:	4629      	mov	r1, r5
 8008486:	f7f8 f85b 	bl	8000540 <__aeabi_dmul>
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	a148      	add	r1, pc, #288	@ (adr r1, 80085b0 <__ieee754_pow+0x400>)
 8008490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008494:	f7f7 fe9c 	bl	80001d0 <__aeabi_dsub>
 8008498:	4622      	mov	r2, r4
 800849a:	462b      	mov	r3, r5
 800849c:	f7f8 f850 	bl	8000540 <__aeabi_dmul>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	2000      	movs	r0, #0
 80084a6:	4948      	ldr	r1, [pc, #288]	@ (80085c8 <__ieee754_pow+0x418>)
 80084a8:	f7f7 fe92 	bl	80001d0 <__aeabi_dsub>
 80084ac:	4622      	mov	r2, r4
 80084ae:	4680      	mov	r8, r0
 80084b0:	4689      	mov	r9, r1
 80084b2:	462b      	mov	r3, r5
 80084b4:	4620      	mov	r0, r4
 80084b6:	4629      	mov	r1, r5
 80084b8:	f7f8 f842 	bl	8000540 <__aeabi_dmul>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4640      	mov	r0, r8
 80084c2:	4649      	mov	r1, r9
 80084c4:	f7f8 f83c 	bl	8000540 <__aeabi_dmul>
 80084c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80085b8 <__ieee754_pow+0x408>)
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f7f8 f837 	bl	8000540 <__aeabi_dmul>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	4650      	mov	r0, sl
 80084d8:	4659      	mov	r1, fp
 80084da:	f7f7 fe79 	bl	80001d0 <__aeabi_dsub>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4680      	mov	r8, r0
 80084e4:	4689      	mov	r9, r1
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	f7f7 fe73 	bl	80001d4 <__adddf3>
 80084ee:	2400      	movs	r4, #0
 80084f0:	4632      	mov	r2, r6
 80084f2:	463b      	mov	r3, r7
 80084f4:	4620      	mov	r0, r4
 80084f6:	460d      	mov	r5, r1
 80084f8:	f7f7 fe6a 	bl	80001d0 <__aeabi_dsub>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	4640      	mov	r0, r8
 8008502:	4649      	mov	r1, r9
 8008504:	f7f7 fe64 	bl	80001d0 <__aeabi_dsub>
 8008508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800850c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008510:	2300      	movs	r3, #0
 8008512:	9304      	str	r3, [sp, #16]
 8008514:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008518:	4606      	mov	r6, r0
 800851a:	460f      	mov	r7, r1
 800851c:	4652      	mov	r2, sl
 800851e:	465b      	mov	r3, fp
 8008520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008524:	f7f7 fe54 	bl	80001d0 <__aeabi_dsub>
 8008528:	4622      	mov	r2, r4
 800852a:	462b      	mov	r3, r5
 800852c:	f7f8 f808 	bl	8000540 <__aeabi_dmul>
 8008530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008534:	4680      	mov	r8, r0
 8008536:	4689      	mov	r9, r1
 8008538:	4630      	mov	r0, r6
 800853a:	4639      	mov	r1, r7
 800853c:	f7f8 f800 	bl	8000540 <__aeabi_dmul>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4640      	mov	r0, r8
 8008546:	4649      	mov	r1, r9
 8008548:	f7f7 fe44 	bl	80001d4 <__adddf3>
 800854c:	4652      	mov	r2, sl
 800854e:	465b      	mov	r3, fp
 8008550:	4606      	mov	r6, r0
 8008552:	460f      	mov	r7, r1
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	f7f7 fff2 	bl	8000540 <__aeabi_dmul>
 800855c:	460b      	mov	r3, r1
 800855e:	4602      	mov	r2, r0
 8008560:	4680      	mov	r8, r0
 8008562:	4689      	mov	r9, r1
 8008564:	4630      	mov	r0, r6
 8008566:	4639      	mov	r1, r7
 8008568:	f7f7 fe34 	bl	80001d4 <__adddf3>
 800856c:	4b17      	ldr	r3, [pc, #92]	@ (80085cc <__ieee754_pow+0x41c>)
 800856e:	4299      	cmp	r1, r3
 8008570:	4604      	mov	r4, r0
 8008572:	460d      	mov	r5, r1
 8008574:	468a      	mov	sl, r1
 8008576:	468b      	mov	fp, r1
 8008578:	f340 82ef 	ble.w	8008b5a <__ieee754_pow+0x9aa>
 800857c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008580:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008584:	4303      	orrs	r3, r0
 8008586:	f000 81e8 	beq.w	800895a <__ieee754_pow+0x7aa>
 800858a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	2300      	movs	r3, #0
 8008592:	f7f8 fa47 	bl	8000a24 <__aeabi_dcmplt>
 8008596:	3800      	subs	r0, #0
 8008598:	bf18      	it	ne
 800859a:	2001      	movne	r0, #1
 800859c:	e710      	b.n	80083c0 <__ieee754_pow+0x210>
 800859e:	bf00      	nop
 80085a0:	60000000 	.word	0x60000000
 80085a4:	3ff71547 	.word	0x3ff71547
 80085a8:	f85ddf44 	.word	0xf85ddf44
 80085ac:	3e54ae0b 	.word	0x3e54ae0b
 80085b0:	55555555 	.word	0x55555555
 80085b4:	3fd55555 	.word	0x3fd55555
 80085b8:	652b82fe 	.word	0x652b82fe
 80085bc:	3ff71547 	.word	0x3ff71547
 80085c0:	3ff00000 	.word	0x3ff00000
 80085c4:	3fd00000 	.word	0x3fd00000
 80085c8:	3fe00000 	.word	0x3fe00000
 80085cc:	408fffff 	.word	0x408fffff
 80085d0:	4bd5      	ldr	r3, [pc, #852]	@ (8008928 <__ieee754_pow+0x778>)
 80085d2:	402b      	ands	r3, r5
 80085d4:	2200      	movs	r2, #0
 80085d6:	b92b      	cbnz	r3, 80085e4 <__ieee754_pow+0x434>
 80085d8:	4bd4      	ldr	r3, [pc, #848]	@ (800892c <__ieee754_pow+0x77c>)
 80085da:	f7f7 ffb1 	bl	8000540 <__aeabi_dmul>
 80085de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80085e2:	468b      	mov	fp, r1
 80085e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80085e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80085ec:	4413      	add	r3, r2
 80085ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f0:	4bcf      	ldr	r3, [pc, #828]	@ (8008930 <__ieee754_pow+0x780>)
 80085f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80085f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80085fa:	459b      	cmp	fp, r3
 80085fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008600:	dd08      	ble.n	8008614 <__ieee754_pow+0x464>
 8008602:	4bcc      	ldr	r3, [pc, #816]	@ (8008934 <__ieee754_pow+0x784>)
 8008604:	459b      	cmp	fp, r3
 8008606:	f340 81a5 	ble.w	8008954 <__ieee754_pow+0x7a4>
 800860a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800860c:	3301      	adds	r3, #1
 800860e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008610:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008614:	f04f 0a00 	mov.w	sl, #0
 8008618:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800861c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800861e:	4bc6      	ldr	r3, [pc, #792]	@ (8008938 <__ieee754_pow+0x788>)
 8008620:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008624:	ed93 7b00 	vldr	d7, [r3]
 8008628:	4629      	mov	r1, r5
 800862a:	ec53 2b17 	vmov	r2, r3, d7
 800862e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008632:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008636:	f7f7 fdcb 	bl	80001d0 <__aeabi_dsub>
 800863a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800863e:	4606      	mov	r6, r0
 8008640:	460f      	mov	r7, r1
 8008642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008646:	f7f7 fdc5 	bl	80001d4 <__adddf3>
 800864a:	4602      	mov	r2, r0
 800864c:	460b      	mov	r3, r1
 800864e:	2000      	movs	r0, #0
 8008650:	49ba      	ldr	r1, [pc, #744]	@ (800893c <__ieee754_pow+0x78c>)
 8008652:	f7f8 f89f 	bl	8000794 <__aeabi_ddiv>
 8008656:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4630      	mov	r0, r6
 8008660:	4639      	mov	r1, r7
 8008662:	f7f7 ff6d 	bl	8000540 <__aeabi_dmul>
 8008666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800866a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800866e:	106d      	asrs	r5, r5, #1
 8008670:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008674:	f04f 0b00 	mov.w	fp, #0
 8008678:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800867c:	4661      	mov	r1, ip
 800867e:	2200      	movs	r2, #0
 8008680:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008684:	4658      	mov	r0, fp
 8008686:	46e1      	mov	r9, ip
 8008688:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800868c:	4614      	mov	r4, r2
 800868e:	461d      	mov	r5, r3
 8008690:	f7f7 ff56 	bl	8000540 <__aeabi_dmul>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4630      	mov	r0, r6
 800869a:	4639      	mov	r1, r7
 800869c:	f7f7 fd98 	bl	80001d0 <__aeabi_dsub>
 80086a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086a4:	4606      	mov	r6, r0
 80086a6:	460f      	mov	r7, r1
 80086a8:	4620      	mov	r0, r4
 80086aa:	4629      	mov	r1, r5
 80086ac:	f7f7 fd90 	bl	80001d0 <__aeabi_dsub>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086b8:	f7f7 fd8a 	bl	80001d0 <__aeabi_dsub>
 80086bc:	465a      	mov	r2, fp
 80086be:	464b      	mov	r3, r9
 80086c0:	f7f7 ff3e 	bl	8000540 <__aeabi_dmul>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4630      	mov	r0, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	f7f7 fd80 	bl	80001d0 <__aeabi_dsub>
 80086d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80086d4:	f7f7 ff34 	bl	8000540 <__aeabi_dmul>
 80086d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80086e0:	4610      	mov	r0, r2
 80086e2:	4619      	mov	r1, r3
 80086e4:	f7f7 ff2c 	bl	8000540 <__aeabi_dmul>
 80086e8:	a37d      	add	r3, pc, #500	@ (adr r3, 80088e0 <__ieee754_pow+0x730>)
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	4604      	mov	r4, r0
 80086f0:	460d      	mov	r5, r1
 80086f2:	f7f7 ff25 	bl	8000540 <__aeabi_dmul>
 80086f6:	a37c      	add	r3, pc, #496	@ (adr r3, 80088e8 <__ieee754_pow+0x738>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	f7f7 fd6a 	bl	80001d4 <__adddf3>
 8008700:	4622      	mov	r2, r4
 8008702:	462b      	mov	r3, r5
 8008704:	f7f7 ff1c 	bl	8000540 <__aeabi_dmul>
 8008708:	a379      	add	r3, pc, #484	@ (adr r3, 80088f0 <__ieee754_pow+0x740>)
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f7f7 fd61 	bl	80001d4 <__adddf3>
 8008712:	4622      	mov	r2, r4
 8008714:	462b      	mov	r3, r5
 8008716:	f7f7 ff13 	bl	8000540 <__aeabi_dmul>
 800871a:	a377      	add	r3, pc, #476	@ (adr r3, 80088f8 <__ieee754_pow+0x748>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 fd58 	bl	80001d4 <__adddf3>
 8008724:	4622      	mov	r2, r4
 8008726:	462b      	mov	r3, r5
 8008728:	f7f7 ff0a 	bl	8000540 <__aeabi_dmul>
 800872c:	a374      	add	r3, pc, #464	@ (adr r3, 8008900 <__ieee754_pow+0x750>)
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	f7f7 fd4f 	bl	80001d4 <__adddf3>
 8008736:	4622      	mov	r2, r4
 8008738:	462b      	mov	r3, r5
 800873a:	f7f7 ff01 	bl	8000540 <__aeabi_dmul>
 800873e:	a372      	add	r3, pc, #456	@ (adr r3, 8008908 <__ieee754_pow+0x758>)
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	f7f7 fd46 	bl	80001d4 <__adddf3>
 8008748:	4622      	mov	r2, r4
 800874a:	4606      	mov	r6, r0
 800874c:	460f      	mov	r7, r1
 800874e:	462b      	mov	r3, r5
 8008750:	4620      	mov	r0, r4
 8008752:	4629      	mov	r1, r5
 8008754:	f7f7 fef4 	bl	8000540 <__aeabi_dmul>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4630      	mov	r0, r6
 800875e:	4639      	mov	r1, r7
 8008760:	f7f7 feee 	bl	8000540 <__aeabi_dmul>
 8008764:	465a      	mov	r2, fp
 8008766:	4604      	mov	r4, r0
 8008768:	460d      	mov	r5, r1
 800876a:	464b      	mov	r3, r9
 800876c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008770:	f7f7 fd30 	bl	80001d4 <__adddf3>
 8008774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008778:	f7f7 fee2 	bl	8000540 <__aeabi_dmul>
 800877c:	4622      	mov	r2, r4
 800877e:	462b      	mov	r3, r5
 8008780:	f7f7 fd28 	bl	80001d4 <__adddf3>
 8008784:	465a      	mov	r2, fp
 8008786:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800878a:	464b      	mov	r3, r9
 800878c:	4658      	mov	r0, fp
 800878e:	4649      	mov	r1, r9
 8008790:	f7f7 fed6 	bl	8000540 <__aeabi_dmul>
 8008794:	4b6a      	ldr	r3, [pc, #424]	@ (8008940 <__ieee754_pow+0x790>)
 8008796:	2200      	movs	r2, #0
 8008798:	4606      	mov	r6, r0
 800879a:	460f      	mov	r7, r1
 800879c:	f7f7 fd1a 	bl	80001d4 <__adddf3>
 80087a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80087a4:	f7f7 fd16 	bl	80001d4 <__adddf3>
 80087a8:	46d8      	mov	r8, fp
 80087aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80087ae:	460d      	mov	r5, r1
 80087b0:	465a      	mov	r2, fp
 80087b2:	460b      	mov	r3, r1
 80087b4:	4640      	mov	r0, r8
 80087b6:	4649      	mov	r1, r9
 80087b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80087bc:	f7f7 fec0 	bl	8000540 <__aeabi_dmul>
 80087c0:	465c      	mov	r4, fp
 80087c2:	4680      	mov	r8, r0
 80087c4:	4689      	mov	r9, r1
 80087c6:	4b5e      	ldr	r3, [pc, #376]	@ (8008940 <__ieee754_pow+0x790>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	4620      	mov	r0, r4
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7f7 fcff 	bl	80001d0 <__aeabi_dsub>
 80087d2:	4632      	mov	r2, r6
 80087d4:	463b      	mov	r3, r7
 80087d6:	f7f7 fcfb 	bl	80001d0 <__aeabi_dsub>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087e2:	f7f7 fcf5 	bl	80001d0 <__aeabi_dsub>
 80087e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ea:	f7f7 fea9 	bl	8000540 <__aeabi_dmul>
 80087ee:	4622      	mov	r2, r4
 80087f0:	4606      	mov	r6, r0
 80087f2:	460f      	mov	r7, r1
 80087f4:	462b      	mov	r3, r5
 80087f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087fa:	f7f7 fea1 	bl	8000540 <__aeabi_dmul>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4630      	mov	r0, r6
 8008804:	4639      	mov	r1, r7
 8008806:	f7f7 fce5 	bl	80001d4 <__adddf3>
 800880a:	4606      	mov	r6, r0
 800880c:	460f      	mov	r7, r1
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4640      	mov	r0, r8
 8008814:	4649      	mov	r1, r9
 8008816:	f7f7 fcdd 	bl	80001d4 <__adddf3>
 800881a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800881e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008910 <__ieee754_pow+0x760>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	4658      	mov	r0, fp
 8008826:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800882a:	460d      	mov	r5, r1
 800882c:	f7f7 fe88 	bl	8000540 <__aeabi_dmul>
 8008830:	465c      	mov	r4, fp
 8008832:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008836:	4642      	mov	r2, r8
 8008838:	464b      	mov	r3, r9
 800883a:	4620      	mov	r0, r4
 800883c:	4629      	mov	r1, r5
 800883e:	f7f7 fcc7 	bl	80001d0 <__aeabi_dsub>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4630      	mov	r0, r6
 8008848:	4639      	mov	r1, r7
 800884a:	f7f7 fcc1 	bl	80001d0 <__aeabi_dsub>
 800884e:	a332      	add	r3, pc, #200	@ (adr r3, 8008918 <__ieee754_pow+0x768>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fe74 	bl	8000540 <__aeabi_dmul>
 8008858:	a331      	add	r3, pc, #196	@ (adr r3, 8008920 <__ieee754_pow+0x770>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	4620      	mov	r0, r4
 8008864:	4629      	mov	r1, r5
 8008866:	f7f7 fe6b 	bl	8000540 <__aeabi_dmul>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4630      	mov	r0, r6
 8008870:	4639      	mov	r1, r7
 8008872:	f7f7 fcaf 	bl	80001d4 <__adddf3>
 8008876:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008878:	4b32      	ldr	r3, [pc, #200]	@ (8008944 <__ieee754_pow+0x794>)
 800887a:	4413      	add	r3, r2
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	f7f7 fca8 	bl	80001d4 <__adddf3>
 8008884:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008888:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800888a:	f7f7 fdef 	bl	800046c <__aeabi_i2d>
 800888e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008890:	4b2d      	ldr	r3, [pc, #180]	@ (8008948 <__ieee754_pow+0x798>)
 8008892:	4413      	add	r3, r2
 8008894:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008898:	4606      	mov	r6, r0
 800889a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800889e:	460f      	mov	r7, r1
 80088a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088a4:	f7f7 fc96 	bl	80001d4 <__adddf3>
 80088a8:	4642      	mov	r2, r8
 80088aa:	464b      	mov	r3, r9
 80088ac:	f7f7 fc92 	bl	80001d4 <__adddf3>
 80088b0:	4632      	mov	r2, r6
 80088b2:	463b      	mov	r3, r7
 80088b4:	f7f7 fc8e 	bl	80001d4 <__adddf3>
 80088b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80088bc:	4632      	mov	r2, r6
 80088be:	463b      	mov	r3, r7
 80088c0:	4658      	mov	r0, fp
 80088c2:	460d      	mov	r5, r1
 80088c4:	f7f7 fc84 	bl	80001d0 <__aeabi_dsub>
 80088c8:	4642      	mov	r2, r8
 80088ca:	464b      	mov	r3, r9
 80088cc:	f7f7 fc80 	bl	80001d0 <__aeabi_dsub>
 80088d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d4:	f7f7 fc7c 	bl	80001d0 <__aeabi_dsub>
 80088d8:	465c      	mov	r4, fp
 80088da:	4602      	mov	r2, r0
 80088dc:	e036      	b.n	800894c <__ieee754_pow+0x79c>
 80088de:	bf00      	nop
 80088e0:	4a454eef 	.word	0x4a454eef
 80088e4:	3fca7e28 	.word	0x3fca7e28
 80088e8:	93c9db65 	.word	0x93c9db65
 80088ec:	3fcd864a 	.word	0x3fcd864a
 80088f0:	a91d4101 	.word	0xa91d4101
 80088f4:	3fd17460 	.word	0x3fd17460
 80088f8:	518f264d 	.word	0x518f264d
 80088fc:	3fd55555 	.word	0x3fd55555
 8008900:	db6fabff 	.word	0xdb6fabff
 8008904:	3fdb6db6 	.word	0x3fdb6db6
 8008908:	33333303 	.word	0x33333303
 800890c:	3fe33333 	.word	0x3fe33333
 8008910:	e0000000 	.word	0xe0000000
 8008914:	3feec709 	.word	0x3feec709
 8008918:	dc3a03fd 	.word	0xdc3a03fd
 800891c:	3feec709 	.word	0x3feec709
 8008920:	145b01f5 	.word	0x145b01f5
 8008924:	be3e2fe0 	.word	0xbe3e2fe0
 8008928:	7ff00000 	.word	0x7ff00000
 800892c:	43400000 	.word	0x43400000
 8008930:	0003988e 	.word	0x0003988e
 8008934:	000bb679 	.word	0x000bb679
 8008938:	08008f28 	.word	0x08008f28
 800893c:	3ff00000 	.word	0x3ff00000
 8008940:	40080000 	.word	0x40080000
 8008944:	08008f08 	.word	0x08008f08
 8008948:	08008f18 	.word	0x08008f18
 800894c:	460b      	mov	r3, r1
 800894e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008952:	e5d7      	b.n	8008504 <__ieee754_pow+0x354>
 8008954:	f04f 0a01 	mov.w	sl, #1
 8008958:	e65e      	b.n	8008618 <__ieee754_pow+0x468>
 800895a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008c2c <__ieee754_pow+0xa7c>)
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	4630      	mov	r0, r6
 8008962:	4639      	mov	r1, r7
 8008964:	f7f7 fc36 	bl	80001d4 <__adddf3>
 8008968:	4642      	mov	r2, r8
 800896a:	e9cd 0100 	strd	r0, r1, [sp]
 800896e:	464b      	mov	r3, r9
 8008970:	4620      	mov	r0, r4
 8008972:	4629      	mov	r1, r5
 8008974:	f7f7 fc2c 	bl	80001d0 <__aeabi_dsub>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008980:	f7f8 f86e 	bl	8000a60 <__aeabi_dcmpgt>
 8008984:	2800      	cmp	r0, #0
 8008986:	f47f ae00 	bne.w	800858a <__ieee754_pow+0x3da>
 800898a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800898e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008992:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008996:	fa43 fa0a 	asr.w	sl, r3, sl
 800899a:	44da      	add	sl, fp
 800899c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80089a0:	489d      	ldr	r0, [pc, #628]	@ (8008c18 <__ieee754_pow+0xa68>)
 80089a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80089a6:	4108      	asrs	r0, r1
 80089a8:	ea00 030a 	and.w	r3, r0, sl
 80089ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80089b0:	f1c1 0114 	rsb	r1, r1, #20
 80089b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80089b8:	fa4a fa01 	asr.w	sl, sl, r1
 80089bc:	f1bb 0f00 	cmp.w	fp, #0
 80089c0:	4640      	mov	r0, r8
 80089c2:	4649      	mov	r1, r9
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	bfb8      	it	lt
 80089ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80089ce:	f7f7 fbff 	bl	80001d0 <__aeabi_dsub>
 80089d2:	4680      	mov	r8, r0
 80089d4:	4689      	mov	r9, r1
 80089d6:	4632      	mov	r2, r6
 80089d8:	463b      	mov	r3, r7
 80089da:	4640      	mov	r0, r8
 80089dc:	4649      	mov	r1, r9
 80089de:	f7f7 fbf9 	bl	80001d4 <__adddf3>
 80089e2:	2400      	movs	r4, #0
 80089e4:	a37c      	add	r3, pc, #496	@ (adr r3, 8008bd8 <__ieee754_pow+0xa28>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	4620      	mov	r0, r4
 80089ec:	460d      	mov	r5, r1
 80089ee:	f7f7 fda7 	bl	8000540 <__aeabi_dmul>
 80089f2:	4642      	mov	r2, r8
 80089f4:	e9cd 0100 	strd	r0, r1, [sp]
 80089f8:	464b      	mov	r3, r9
 80089fa:	4620      	mov	r0, r4
 80089fc:	4629      	mov	r1, r5
 80089fe:	f7f7 fbe7 	bl	80001d0 <__aeabi_dsub>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	4630      	mov	r0, r6
 8008a08:	4639      	mov	r1, r7
 8008a0a:	f7f7 fbe1 	bl	80001d0 <__aeabi_dsub>
 8008a0e:	a374      	add	r3, pc, #464	@ (adr r3, 8008be0 <__ieee754_pow+0xa30>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	f7f7 fd94 	bl	8000540 <__aeabi_dmul>
 8008a18:	a373      	add	r3, pc, #460	@ (adr r3, 8008be8 <__ieee754_pow+0xa38>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	4680      	mov	r8, r0
 8008a20:	4689      	mov	r9, r1
 8008a22:	4620      	mov	r0, r4
 8008a24:	4629      	mov	r1, r5
 8008a26:	f7f7 fd8b 	bl	8000540 <__aeabi_dmul>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4649      	mov	r1, r9
 8008a32:	f7f7 fbcf 	bl	80001d4 <__adddf3>
 8008a36:	4604      	mov	r4, r0
 8008a38:	460d      	mov	r5, r1
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a42:	f7f7 fbc7 	bl	80001d4 <__adddf3>
 8008a46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a4a:	4680      	mov	r8, r0
 8008a4c:	4689      	mov	r9, r1
 8008a4e:	f7f7 fbbf 	bl	80001d0 <__aeabi_dsub>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4620      	mov	r0, r4
 8008a58:	4629      	mov	r1, r5
 8008a5a:	f7f7 fbb9 	bl	80001d0 <__aeabi_dsub>
 8008a5e:	4642      	mov	r2, r8
 8008a60:	4606      	mov	r6, r0
 8008a62:	460f      	mov	r7, r1
 8008a64:	464b      	mov	r3, r9
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	f7f7 fd69 	bl	8000540 <__aeabi_dmul>
 8008a6e:	a360      	add	r3, pc, #384	@ (adr r3, 8008bf0 <__ieee754_pow+0xa40>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	4604      	mov	r4, r0
 8008a76:	460d      	mov	r5, r1
 8008a78:	f7f7 fd62 	bl	8000540 <__aeabi_dmul>
 8008a7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008bf8 <__ieee754_pow+0xa48>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	f7f7 fba5 	bl	80001d0 <__aeabi_dsub>
 8008a86:	4622      	mov	r2, r4
 8008a88:	462b      	mov	r3, r5
 8008a8a:	f7f7 fd59 	bl	8000540 <__aeabi_dmul>
 8008a8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008c00 <__ieee754_pow+0xa50>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fb9e 	bl	80001d4 <__adddf3>
 8008a98:	4622      	mov	r2, r4
 8008a9a:	462b      	mov	r3, r5
 8008a9c:	f7f7 fd50 	bl	8000540 <__aeabi_dmul>
 8008aa0:	a359      	add	r3, pc, #356	@ (adr r3, 8008c08 <__ieee754_pow+0xa58>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f7f7 fb93 	bl	80001d0 <__aeabi_dsub>
 8008aaa:	4622      	mov	r2, r4
 8008aac:	462b      	mov	r3, r5
 8008aae:	f7f7 fd47 	bl	8000540 <__aeabi_dmul>
 8008ab2:	a357      	add	r3, pc, #348	@ (adr r3, 8008c10 <__ieee754_pow+0xa60>)
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f7f7 fb8c 	bl	80001d4 <__adddf3>
 8008abc:	4622      	mov	r2, r4
 8008abe:	462b      	mov	r3, r5
 8008ac0:	f7f7 fd3e 	bl	8000540 <__aeabi_dmul>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4640      	mov	r0, r8
 8008aca:	4649      	mov	r1, r9
 8008acc:	f7f7 fb80 	bl	80001d0 <__aeabi_dsub>
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4649      	mov	r1, r9
 8008adc:	f7f7 fd30 	bl	8000540 <__aeabi_dmul>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8008ae6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	f7f7 fb6f 	bl	80001d0 <__aeabi_dsub>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008afa:	f7f7 fe4b 	bl	8000794 <__aeabi_ddiv>
 8008afe:	4632      	mov	r2, r6
 8008b00:	4604      	mov	r4, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	463b      	mov	r3, r7
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f7 fd19 	bl	8000540 <__aeabi_dmul>
 8008b0e:	4632      	mov	r2, r6
 8008b10:	463b      	mov	r3, r7
 8008b12:	f7f7 fb5f 	bl	80001d4 <__adddf3>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f7f7 fb57 	bl	80001d0 <__aeabi_dsub>
 8008b22:	4642      	mov	r2, r8
 8008b24:	464b      	mov	r3, r9
 8008b26:	f7f7 fb53 	bl	80001d0 <__aeabi_dsub>
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	493b      	ldr	r1, [pc, #236]	@ (8008c1c <__ieee754_pow+0xa6c>)
 8008b30:	2000      	movs	r0, #0
 8008b32:	f7f7 fb4d 	bl	80001d0 <__aeabi_dsub>
 8008b36:	ec41 0b10 	vmov	d0, r0, r1
 8008b3a:	ee10 3a90 	vmov	r3, s1
 8008b3e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b46:	da30      	bge.n	8008baa <__ieee754_pow+0x9fa>
 8008b48:	4650      	mov	r0, sl
 8008b4a:	f000 f875 	bl	8008c38 <scalbn>
 8008b4e:	ec51 0b10 	vmov	r0, r1, d0
 8008b52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b56:	f7ff bbd2 	b.w	80082fe <__ieee754_pow+0x14e>
 8008b5a:	4c31      	ldr	r4, [pc, #196]	@ (8008c20 <__ieee754_pow+0xa70>)
 8008b5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	d91a      	bls.n	8008b9a <__ieee754_pow+0x9ea>
 8008b64:	4b2f      	ldr	r3, [pc, #188]	@ (8008c24 <__ieee754_pow+0xa74>)
 8008b66:	440b      	add	r3, r1
 8008b68:	4303      	orrs	r3, r0
 8008b6a:	d009      	beq.n	8008b80 <__ieee754_pow+0x9d0>
 8008b6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b70:	2200      	movs	r2, #0
 8008b72:	2300      	movs	r3, #0
 8008b74:	f7f7 ff56 	bl	8000a24 <__aeabi_dcmplt>
 8008b78:	3800      	subs	r0, #0
 8008b7a:	bf18      	it	ne
 8008b7c:	2001      	movne	r0, #1
 8008b7e:	e42b      	b.n	80083d8 <__ieee754_pow+0x228>
 8008b80:	4642      	mov	r2, r8
 8008b82:	464b      	mov	r3, r9
 8008b84:	f7f7 fb24 	bl	80001d0 <__aeabi_dsub>
 8008b88:	4632      	mov	r2, r6
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	f7f7 ff5e 	bl	8000a4c <__aeabi_dcmpge>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d1eb      	bne.n	8008b6c <__ieee754_pow+0x9bc>
 8008b94:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008c34 <__ieee754_pow+0xa84>
 8008b98:	e6f7      	b.n	800898a <__ieee754_pow+0x7da>
 8008b9a:	469a      	mov	sl, r3
 8008b9c:	4b22      	ldr	r3, [pc, #136]	@ (8008c28 <__ieee754_pow+0xa78>)
 8008b9e:	459a      	cmp	sl, r3
 8008ba0:	f63f aef3 	bhi.w	800898a <__ieee754_pow+0x7da>
 8008ba4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008ba8:	e715      	b.n	80089d6 <__ieee754_pow+0x826>
 8008baa:	ec51 0b10 	vmov	r0, r1, d0
 8008bae:	4619      	mov	r1, r3
 8008bb0:	e7cf      	b.n	8008b52 <__ieee754_pow+0x9a2>
 8008bb2:	491a      	ldr	r1, [pc, #104]	@ (8008c1c <__ieee754_pow+0xa6c>)
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	f7ff bb18 	b.w	80081ea <__ieee754_pow+0x3a>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	f7ff bb14 	b.w	80081ea <__ieee754_pow+0x3a>
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	4639      	mov	r1, r7
 8008bc6:	f7ff bb10 	b.w	80081ea <__ieee754_pow+0x3a>
 8008bca:	460c      	mov	r4, r1
 8008bcc:	f7ff bb5e 	b.w	800828c <__ieee754_pow+0xdc>
 8008bd0:	2400      	movs	r4, #0
 8008bd2:	f7ff bb49 	b.w	8008268 <__ieee754_pow+0xb8>
 8008bd6:	bf00      	nop
 8008bd8:	00000000 	.word	0x00000000
 8008bdc:	3fe62e43 	.word	0x3fe62e43
 8008be0:	fefa39ef 	.word	0xfefa39ef
 8008be4:	3fe62e42 	.word	0x3fe62e42
 8008be8:	0ca86c39 	.word	0x0ca86c39
 8008bec:	be205c61 	.word	0xbe205c61
 8008bf0:	72bea4d0 	.word	0x72bea4d0
 8008bf4:	3e663769 	.word	0x3e663769
 8008bf8:	c5d26bf1 	.word	0xc5d26bf1
 8008bfc:	3ebbbd41 	.word	0x3ebbbd41
 8008c00:	af25de2c 	.word	0xaf25de2c
 8008c04:	3f11566a 	.word	0x3f11566a
 8008c08:	16bebd93 	.word	0x16bebd93
 8008c0c:	3f66c16c 	.word	0x3f66c16c
 8008c10:	5555553e 	.word	0x5555553e
 8008c14:	3fc55555 	.word	0x3fc55555
 8008c18:	fff00000 	.word	0xfff00000
 8008c1c:	3ff00000 	.word	0x3ff00000
 8008c20:	4090cbff 	.word	0x4090cbff
 8008c24:	3f6f3400 	.word	0x3f6f3400
 8008c28:	3fe00000 	.word	0x3fe00000
 8008c2c:	652b82fe 	.word	0x652b82fe
 8008c30:	3c971547 	.word	0x3c971547
 8008c34:	4090cc00 	.word	0x4090cc00

08008c38 <scalbn>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	ec55 4b10 	vmov	r4, r5, d0
 8008c3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008c42:	4606      	mov	r6, r0
 8008c44:	462b      	mov	r3, r5
 8008c46:	b991      	cbnz	r1, 8008c6e <scalbn+0x36>
 8008c48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008c4c:	4323      	orrs	r3, r4
 8008c4e:	d03d      	beq.n	8008ccc <scalbn+0x94>
 8008c50:	4b35      	ldr	r3, [pc, #212]	@ (8008d28 <scalbn+0xf0>)
 8008c52:	4620      	mov	r0, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	2200      	movs	r2, #0
 8008c58:	f7f7 fc72 	bl	8000540 <__aeabi_dmul>
 8008c5c:	4b33      	ldr	r3, [pc, #204]	@ (8008d2c <scalbn+0xf4>)
 8008c5e:	429e      	cmp	r6, r3
 8008c60:	4604      	mov	r4, r0
 8008c62:	460d      	mov	r5, r1
 8008c64:	da0f      	bge.n	8008c86 <scalbn+0x4e>
 8008c66:	a328      	add	r3, pc, #160	@ (adr r3, 8008d08 <scalbn+0xd0>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	e01e      	b.n	8008cac <scalbn+0x74>
 8008c6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008c72:	4291      	cmp	r1, r2
 8008c74:	d10b      	bne.n	8008c8e <scalbn+0x56>
 8008c76:	4622      	mov	r2, r4
 8008c78:	4620      	mov	r0, r4
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	f7f7 faaa 	bl	80001d4 <__adddf3>
 8008c80:	4604      	mov	r4, r0
 8008c82:	460d      	mov	r5, r1
 8008c84:	e022      	b.n	8008ccc <scalbn+0x94>
 8008c86:	460b      	mov	r3, r1
 8008c88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008c8c:	3936      	subs	r1, #54	@ 0x36
 8008c8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008c92:	4296      	cmp	r6, r2
 8008c94:	dd0d      	ble.n	8008cb2 <scalbn+0x7a>
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	a11d      	add	r1, pc, #116	@ (adr r1, 8008d10 <scalbn+0xd8>)
 8008c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c9e:	da02      	bge.n	8008ca6 <scalbn+0x6e>
 8008ca0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008d18 <scalbn+0xe0>)
 8008ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ca6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008d10 <scalbn+0xd8>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fc48 	bl	8000540 <__aeabi_dmul>
 8008cb0:	e7e6      	b.n	8008c80 <scalbn+0x48>
 8008cb2:	1872      	adds	r2, r6, r1
 8008cb4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008cb8:	428a      	cmp	r2, r1
 8008cba:	dcec      	bgt.n	8008c96 <scalbn+0x5e>
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	dd08      	ble.n	8008cd2 <scalbn+0x9a>
 8008cc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008cc4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008cc8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ccc:	ec45 4b10 	vmov	d0, r4, r5
 8008cd0:	bd70      	pop	{r4, r5, r6, pc}
 8008cd2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008cd6:	da08      	bge.n	8008cea <scalbn+0xb2>
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	a10b      	add	r1, pc, #44	@ (adr r1, 8008d08 <scalbn+0xd0>)
 8008cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce0:	dac1      	bge.n	8008c66 <scalbn+0x2e>
 8008ce2:	a10f      	add	r1, pc, #60	@ (adr r1, 8008d20 <scalbn+0xe8>)
 8008ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce8:	e7bd      	b.n	8008c66 <scalbn+0x2e>
 8008cea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008cee:	3236      	adds	r2, #54	@ 0x36
 8008cf0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008cf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8008d30 <scalbn+0xf8>)
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	2200      	movs	r2, #0
 8008d00:	e7d4      	b.n	8008cac <scalbn+0x74>
 8008d02:	bf00      	nop
 8008d04:	f3af 8000 	nop.w
 8008d08:	c2f8f359 	.word	0xc2f8f359
 8008d0c:	01a56e1f 	.word	0x01a56e1f
 8008d10:	8800759c 	.word	0x8800759c
 8008d14:	7e37e43c 	.word	0x7e37e43c
 8008d18:	8800759c 	.word	0x8800759c
 8008d1c:	fe37e43c 	.word	0xfe37e43c
 8008d20:	c2f8f359 	.word	0xc2f8f359
 8008d24:	81a56e1f 	.word	0x81a56e1f
 8008d28:	43500000 	.word	0x43500000
 8008d2c:	ffff3cb0 	.word	0xffff3cb0
 8008d30:	3c900000 	.word	0x3c900000

08008d34 <with_errno>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	ed2d 8b02 	vpush	{d8}
 8008d3a:	eeb0 8a40 	vmov.f32	s16, s0
 8008d3e:	eef0 8a60 	vmov.f32	s17, s1
 8008d42:	4604      	mov	r4, r0
 8008d44:	f7fe fa16 	bl	8007174 <__errno>
 8008d48:	eeb0 0a48 	vmov.f32	s0, s16
 8008d4c:	eef0 0a68 	vmov.f32	s1, s17
 8008d50:	ecbd 8b02 	vpop	{d8}
 8008d54:	6004      	str	r4, [r0, #0]
 8008d56:	bd10      	pop	{r4, pc}

08008d58 <xflow>:
 8008d58:	4603      	mov	r3, r0
 8008d5a:	b507      	push	{r0, r1, r2, lr}
 8008d5c:	ec51 0b10 	vmov	r0, r1, d0
 8008d60:	b183      	cbz	r3, 8008d84 <xflow+0x2c>
 8008d62:	4602      	mov	r2, r0
 8008d64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d68:	e9cd 2300 	strd	r2, r3, [sp]
 8008d6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d70:	f7f7 fbe6 	bl	8000540 <__aeabi_dmul>
 8008d74:	ec41 0b10 	vmov	d0, r0, r1
 8008d78:	2022      	movs	r0, #34	@ 0x22
 8008d7a:	b003      	add	sp, #12
 8008d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d80:	f7ff bfd8 	b.w	8008d34 <with_errno>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e7ee      	b.n	8008d68 <xflow+0x10>
 8008d8a:	0000      	movs	r0, r0
 8008d8c:	0000      	movs	r0, r0
	...

08008d90 <__math_uflow>:
 8008d90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008d98 <__math_uflow+0x8>
 8008d94:	f7ff bfe0 	b.w	8008d58 <xflow>
 8008d98:	00000000 	.word	0x00000000
 8008d9c:	10000000 	.word	0x10000000

08008da0 <__math_oflow>:
 8008da0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008da8 <__math_oflow+0x8>
 8008da4:	f7ff bfd8 	b.w	8008d58 <xflow>
 8008da8:	00000000 	.word	0x00000000
 8008dac:	70000000 	.word	0x70000000

08008db0 <_init>:
 8008db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db2:	bf00      	nop
 8008db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db6:	bc08      	pop	{r3}
 8008db8:	469e      	mov	lr, r3
 8008dba:	4770      	bx	lr

08008dbc <_fini>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	bf00      	nop
 8008dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc2:	bc08      	pop	{r3}
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	4770      	bx	lr
