
KOT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009098  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08009220  08009220  0000a220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009390  08009390  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009398  08009398  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009398  08009398  0000a398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800939c  0800939c  0000a39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080093a0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b070  2**0
                  CONTENTS
 10 .bss          000003d8  20000070  20000070  0000b070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000448  20000448  0000b070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd36  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc3  00000000  00000000  0001add6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  0001cda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4c  00000000  00000000  0001dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212b5  00000000  00000000  0001e954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d9b  00000000  00000000  0003fc09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd88c  00000000  00000000  000529a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120230  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a78  00000000  00000000  00120274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00124cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009208 	.word	0x08009208

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08009208 	.word	0x08009208

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <PCA9685_SetBit>:
#define PCA9685_MODE1_SLEEP_BIT      4    // as in the datasheet page no 14/52
#define PCA9685_MODE1_AI_BIT         5    // as in the datasheet page no 14/52
#define PCA9685_MODE1_RESTART_BIT    7    // as in the datasheet page no 14/52

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	230a      	movs	r3, #10
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	f107 030f 	add.w	r3, r7, #15
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	2180      	movs	r1, #128	@ 0x80
 8000e58:	4819      	ldr	r0, [pc, #100]	@ (8000ec0 <PCA9685_SetBit+0x90>)
 8000e5a:	f003 f88d 	bl	8003f78 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 8000e5e:	797b      	ldrb	r3, [r7, #5]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10d      	bne.n	8000e80 <PCA9685_SetBit+0x50>
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2201      	movs	r2, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	b25a      	sxtb	r2, r3
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	4013      	ands	r3, r2
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e00a      	b.n	8000e96 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	2201      	movs	r2, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2180      	movs	r1, #128	@ 0x80
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <PCA9685_SetBit+0x90>)
 8000eae:	f002 ff69 	bl	8003d84 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f001 ff42 	bl	8002d3c <HAL_Delay>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000008c 	.word	0x2000008c

08000ec4 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af04      	add	r7, sp, #16
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03;
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d902      	bls.n	8000ede <PCA9685_SetPWMFrequency+0x1a>
 8000ed8:	2303      	movs	r3, #3
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e00c      	b.n	8000ef8 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b18      	cmp	r3, #24
 8000ee2:	d802      	bhi.n	8000eea <PCA9685_SetPWMFrequency+0x26>
 8000ee4:	23ff      	movs	r3, #255	@ 0xff
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e006      	b.n	8000ef8 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	031b      	lsls	r3, r3, #12
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <PCA9685_SetPWMFrequency+0x74>)
 8000ef0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2104      	movs	r1, #4
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ff97 	bl	8000e30 <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000f02:	230a      	movs	r3, #10
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2301      	movs	r3, #1
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f107 030f 	add.w	r3, r7, #15
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	22fe      	movs	r2, #254	@ 0xfe
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <PCA9685_SetPWMFrequency+0x78>)
 8000f18:	f002 ff34 	bl	8003d84 <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ff85 	bl	8000e30 <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2107      	movs	r1, #7
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff ff80 	bl	8000e30 <PCA9685_SetBit>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	017d7840 	.word	0x017d7840
 8000f3c:	2000008c 	.word	0x2000008c

08000f40 <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffb9 	bl	8000ec4 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2105      	movs	r1, #5
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ff6a 	bl	8000e30 <PCA9685_SetBit>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2304      	movs	r3, #4
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <PCA9685_SetPWM+0x60>)
 8000fb8:	f002 fee4 	bl	8003d84 <HAL_I2C_Mem_Write>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000008c 	.word	0x2000008c

08000fc8 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	ed87 0a00 	vstr	s0, [r7]
 8000fd4:	71fb      	strb	r3, [r7, #7]
  float Value;
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f7ff fa5a 	bl	8000490 <__aeabi_f2d>
 8000fdc:	a31b      	add	r3, pc, #108	@ (adr r3, 800104c <PCA9685_SetServoAngle+0x84>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff faad 	bl	8000540 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <PCA9685_SetServoAngle+0x80>)
 8000ff4:	f7ff fbce 	bl	8000794 <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	a30f      	add	r3, pc, #60	@ (adr r3, 8001040 <PCA9685_SetServoAngle+0x78>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff f8e5 	bl	80001d4 <__adddf3>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fd45 	bl	8000aa0 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 800101a:	edd7 7a03 	vldr	s15, [r7, #12]
 800101e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001022:	ee17 3a90 	vmov	r3, s15
 8001026:	b29a      	uxth	r2, r3
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff99 	bl	8000f64 <PCA9685_SetPWM>
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	9999999a 	.word	0x9999999a
 8001044:	40599999 	.word	0x40599999
 8001048:	40668000 	.word	0x40668000
 800104c:	00000000 	.word	0x00000000
 8001050:	40799800 	.word	0x40799800

08001054 <HAL_UART_RxCpltCallback>:
	}
}

/////////////////////////////////// полный буфер ///////////////////////////////////////
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	  if(huart == &huart1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d11d      	bne.n	80010a0 <HAL_UART_RxCpltCallback+0x4c>
	  {
		  __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8001064:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0210 	bic.w	r2, r2, #16
 8001072:	60da      	str	r2, [r3, #12]
		  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)"Full buffer\n", 12);
		  HAL_UART_AbortReceive(&huart1);
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001076:	f004 ff95 	bl	8005fa4 <HAL_UART_AbortReceive>
		  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0210 	orr.w	r2, r2, #16
 800109e:	60da      	str	r2, [r3, #12]
		  //ReciveToServo((uint8_t*)rx_buff);////////////////////////////////////////////////////////
	  }
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000200 	.word	0x20000200

080010ac <HAL_UART_ErrorCallback>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// ErrorCallback //////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a51      	ldr	r2, [pc, #324]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	f040 809b 	bne.w	80011f4 <HAL_UART_ErrorCallback+0x148>
	{
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80010be:	4b4f      	ldr	r3, [pc, #316]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0210 	bic.w	r2, r2, #16
 80010cc:	60da      	str	r2, [r3, #12]
		uint32_t er = HAL_UART_GetError(&huart1);
 80010ce:	484b      	ldr	r0, [pc, #300]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010d0:	f005 fbdc 	bl	800688c <HAL_UART_GetError>
 80010d4:	61f8      	str	r0, [r7, #28]
		HAL_UART_Abort_IT(&huart1);
 80010d6:	4849      	ldr	r0, [pc, #292]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010d8:	f005 f808 	bl	80060ec <HAL_UART_Abort_IT>

		switch(er)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3b01      	subs	r3, #1
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	f200 8086 	bhi.w	80011f2 <HAL_UART_ErrorCallback+0x146>
 80010e6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ec <HAL_UART_ErrorCallback+0x40>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	0800112d 	.word	0x0800112d
 80010f0:	08001159 	.word	0x08001159
 80010f4:	080011f3 	.word	0x080011f3
 80010f8:	08001185 	.word	0x08001185
 80010fc:	080011f3 	.word	0x080011f3
 8001100:	080011f3 	.word	0x080011f3
 8001104:	080011f3 	.word	0x080011f3
 8001108:	080011b1 	.word	0x080011b1
 800110c:	080011f3 	.word	0x080011f3
 8001110:	080011f3 	.word	0x080011f3
 8001114:	080011f3 	.word	0x080011f3
 8001118:	080011f3 	.word	0x080011f3
 800111c:	080011f3 	.word	0x080011f3
 8001120:	080011f3 	.word	0x080011f3
 8001124:	080011f3 	.word	0x080011f3
 8001128:	080011dd 	.word	0x080011dd
		{
			case HAL_UART_ERROR_PE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Parity error\n", 27, 1000);
 800112c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001130:	221b      	movs	r2, #27
 8001132:	4933      	ldr	r1, [pc, #204]	@ (8001200 <HAL_UART_ErrorCallback+0x154>)
 8001134:	4831      	ldr	r0, [pc, #196]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001136:	f004 fe85 	bl	8005e44 <HAL_UART_Transmit>
				__HAL_UART_CLEAR_PEFLAG(&huart1);
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69bb      	ldr	r3, [r7, #24]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 8001156:	e04d      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_NE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Noise error\n", 26, 1000);
 8001158:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115c:	221a      	movs	r2, #26
 800115e:	4929      	ldr	r1, [pc, #164]	@ (8001204 <HAL_UART_ErrorCallback+0x158>)
 8001160:	4826      	ldr	r0, [pc, #152]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001162:	f004 fe6f 	bl	8005e44 <HAL_UART_Transmit>
				__HAL_UART_CLEAR_NEFLAG(&huart1);
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 8001182:	e037      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_FE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Frame error\n", 26, 1000);
 8001184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001188:	221a      	movs	r2, #26
 800118a:	491f      	ldr	r1, [pc, #124]	@ (8001208 <HAL_UART_ErrorCallback+0x15c>)
 800118c:	481b      	ldr	r0, [pc, #108]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 800118e:	f004 fe59 	bl	8005e44 <HAL_UART_Transmit>
				__HAL_UART_CLEAR_FEFLAG(&huart1);
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 80011ae:	e021      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_ORE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Overrun error\n", 28, 1000);
 80011b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b4:	221c      	movs	r2, #28
 80011b6:	4915      	ldr	r1, [pc, #84]	@ (800120c <HAL_UART_ErrorCallback+0x160>)
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80011ba:	f004 fe43 	bl	8005e44 <HAL_UART_Transmit>
				__HAL_UART_CLEAR_OREFLAG(huart);
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 80011da:	e00b      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_DMA:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - DMA transfer error\n", 33, 1000);
 80011dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e0:	2221      	movs	r2, #33	@ 0x21
 80011e2:	490b      	ldr	r1, [pc, #44]	@ (8001210 <HAL_UART_ErrorCallback+0x164>)
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80011e6:	f004 fe2d 	bl	8005e44 <HAL_UART_Transmit>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 80011f0:	e000      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			default:
			break;
 80011f2:	bf00      	nop
		}
	}

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000200 	.word	0x20000200
 8001200:	08009260 	.word	0x08009260
 8001204:	0800927c 	.word	0x0800927c
 8001208:	08009298 	.word	0x08009298
 800120c:	080092b4 	.word	0x080092b4
 8001210:	080092d4 	.word	0x080092d4
 8001214:	00000000 	.word	0x00000000

08001218 <getTheta>:

float getTheta(int joint, float X, float Y, float Z)
{
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	ed87 0a02 	vstr	s0, [r7, #8]
 8001226:	edc7 0a01 	vstr	s1, [r7, #4]
 800122a:	ed87 1a00 	vstr	s2, [r7]
	float L = 0;
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
	float angle = 0;
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	617b      	str	r3, [r7, #20]

	L = pow(X, 2) + pow(Y, 2) + pow(Z, 2);
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f7ff f928 	bl	8000490 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 80014e8 <getTheta+0x2d0>
 8001248:	ec43 2b10 	vmov	d0, r2, r3
 800124c:	f006 fa50 	bl	80076f0 <pow>
 8001250:	ec55 4b10 	vmov	r4, r5, d0
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff f91b 	bl	8000490 <__aeabi_f2d>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	ed9f 1ba2 	vldr	d1, [pc, #648]	@ 80014e8 <getTheta+0x2d0>
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f006 fa43 	bl	80076f0 <pow>
 800126a:	ec53 2b10 	vmov	r2, r3, d0
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7fe ffaf 	bl	80001d4 <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4614      	mov	r4, r2
 800127c:	461d      	mov	r5, r3
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f7ff f906 	bl	8000490 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 80014e8 <getTheta+0x2d0>
 800128c:	ec43 2b10 	vmov	d0, r2, r3
 8001290:	f006 fa2e 	bl	80076f0 <pow>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7fe ff9a 	bl	80001d4 <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fbfa 	bl	8000aa0 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	613b      	str	r3, [r7, #16]
	//calculates abad, hip, or knee angle
	switch (joint)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	f000 80db 	beq.w	800146e <getTheta+0x256>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	f300 80fd 	bgt.w	80014ba <getTheta+0x2a2>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <getTheta+0xb6>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d05a      	beq.n	8001382 <getTheta+0x16a>
 80012cc:	e0f5      	b.n	80014ba <getTheta+0x2a2>
	{
    case 0:  //abad
      angle = atan(X / Z) + acos(a / (sqrt(pow(X, 2) + pow(Z, 2))));
 80012ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d2:	edd7 7a00 	vldr	s15, [r7]
 80012d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012da:	ee16 0a90 	vmov	r0, s13
 80012de:	f7ff f8d7 	bl	8000490 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	ec43 2b10 	vmov	d0, r2, r3
 80012ea:	f006 fa9d 	bl	8007828 <atan>
 80012ee:	ec55 4b10 	vmov	r4, r5, d0
 80012f2:	68b8      	ldr	r0, [r7, #8]
 80012f4:	f7ff f8cc 	bl	8000490 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 80014e8 <getTheta+0x2d0>
 8001300:	ec43 2b10 	vmov	d0, r2, r3
 8001304:	f006 f9f4 	bl	80076f0 <pow>
 8001308:	ec59 8b10 	vmov	r8, r9, d0
 800130c:	6838      	ldr	r0, [r7, #0]
 800130e:	f7ff f8bf 	bl	8000490 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 80014e8 <getTheta+0x2d0>
 800131a:	ec43 2b10 	vmov	d0, r2, r3
 800131e:	f006 f9e7 	bl	80076f0 <pow>
 8001322:	ec53 2b10 	vmov	r2, r3, d0
 8001326:	4640      	mov	r0, r8
 8001328:	4649      	mov	r1, r9
 800132a:	f7fe ff53 	bl	80001d4 <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ec43 2b17 	vmov	d7, r2, r3
 8001336:	eeb0 0a47 	vmov.f32	s0, s14
 800133a:	eef0 0a67 	vmov.f32	s1, s15
 800133e:	f006 fa47 	bl	80077d0 <sqrt>
 8001342:	ec53 2b10 	vmov	r2, r3, d0
 8001346:	f04f 0000 	mov.w	r0, #0
 800134a:	4975      	ldr	r1, [pc, #468]	@ (8001520 <getTheta+0x308>)
 800134c:	f7ff fa22 	bl	8000794 <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	ec43 2b17 	vmov	d7, r2, r3
 8001358:	eeb0 0a47 	vmov.f32	s0, s14
 800135c:	eef0 0a67 	vmov.f32	s1, s15
 8001360:	f006 f95e 	bl	8007620 <acos>
 8001364:	ec53 2b10 	vmov	r2, r3, d0
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7fe ff32 	bl	80001d4 <__adddf3>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fb92 	bl	8000aa0 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	617b      	str	r3, [r7, #20]
      break;
 8001380:	e09b      	b.n	80014ba <getTheta+0x2a2>
    case 1:  //hip
      angle = (PI / 2) - asin(-Y / sqrt(L - pow(a, 2))) - acos((pow(b, 2) - pow(a, 2) - pow(c, 2) + L) / (2 * b * sqrt(L - pow(a, 2))));
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f884 	bl	8000490 <__aeabi_f2d>
 8001388:	4604      	mov	r4, r0
 800138a:	460d      	mov	r5, r1
 800138c:	6938      	ldr	r0, [r7, #16]
 800138e:	f7ff f87f 	bl	8000490 <__aeabi_f2d>
 8001392:	a357      	add	r3, pc, #348	@ (adr r3, 80014f0 <getTheta+0x2d8>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7fe ff1a 	bl	80001d0 <__aeabi_dsub>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b17 	vmov	d7, r2, r3
 80013a4:	eeb0 0a47 	vmov.f32	s0, s14
 80013a8:	eef0 0a67 	vmov.f32	s1, s15
 80013ac:	f006 fa10 	bl	80077d0 <sqrt>
 80013b0:	ec53 2b10 	vmov	r2, r3, d0
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff f9ec 	bl	8000794 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	ec43 2b17 	vmov	d7, r2, r3
 80013c4:	eeb0 0a47 	vmov.f32	s0, s14
 80013c8:	eef0 0a67 	vmov.f32	s1, s15
 80013cc:	f006 f95c 	bl	8007688 <asin>
 80013d0:	ec51 0b10 	vmov	r0, r1, d0
 80013d4:	a348      	add	r3, pc, #288	@ (adr r3, 80014f8 <getTheta+0x2e0>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7fe fefb 	bl	80001d4 <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4614      	mov	r4, r2
 80013e4:	461d      	mov	r5, r3
 80013e6:	6938      	ldr	r0, [r7, #16]
 80013e8:	f7ff f852 	bl	8000490 <__aeabi_f2d>
 80013ec:	a344      	add	r3, pc, #272	@ (adr r3, 8001500 <getTheta+0x2e8>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7fe feed 	bl	80001d0 <__aeabi_dsub>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4690      	mov	r8, r2
 80013fc:	4699      	mov	r9, r3
 80013fe:	6938      	ldr	r0, [r7, #16]
 8001400:	f7ff f846 	bl	8000490 <__aeabi_f2d>
 8001404:	a33a      	add	r3, pc, #232	@ (adr r3, 80014f0 <getTheta+0x2d8>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7fe fee1 	bl	80001d0 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	ec43 2b17 	vmov	d7, r2, r3
 8001416:	eeb0 0a47 	vmov.f32	s0, s14
 800141a:	eef0 0a67 	vmov.f32	s1, s15
 800141e:	f006 f9d7 	bl	80077d0 <sqrt>
 8001422:	ec51 0b10 	vmov	r0, r1, d0
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <getTheta+0x30c>)
 800142c:	f7ff f888 	bl	8000540 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4640      	mov	r0, r8
 8001436:	4649      	mov	r1, r9
 8001438:	f7ff f9ac 	bl	8000794 <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ec43 2b17 	vmov	d7, r2, r3
 8001444:	eeb0 0a47 	vmov.f32	s0, s14
 8001448:	eef0 0a67 	vmov.f32	s1, s15
 800144c:	f006 f8e8 	bl	8007620 <acos>
 8001450:	ec53 2b10 	vmov	r2, r3, d0
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe feba 	bl	80001d0 <__aeabi_dsub>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb1c 	bl	8000aa0 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	617b      	str	r3, [r7, #20]
      break;
 800146c:	e025      	b.n	80014ba <getTheta+0x2a2>
    case 2:  //knee
      angle = acos((pow(a, 2) + pow(b, 2) + pow(c, 2) - L) / (2 * b * c));
 800146e:	6938      	ldr	r0, [r7, #16]
 8001470:	f7ff f80e 	bl	8000490 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	a123      	add	r1, pc, #140	@ (adr r1, 8001508 <getTheta+0x2f0>)
 800147a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800147e:	f7fe fea7 	bl	80001d0 <__aeabi_dsub>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	a321      	add	r3, pc, #132	@ (adr r3, 8001510 <getTheta+0x2f8>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f980 	bl	8000794 <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	ec43 2b17 	vmov	d7, r2, r3
 800149c:	eeb0 0a47 	vmov.f32	s0, s14
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	f006 f8bc 	bl	8007620 <acos>
 80014a8:	ec53 2b10 	vmov	r2, r3, d0
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff faf6 	bl	8000aa0 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	617b      	str	r3, [r7, #20]
      break;
 80014b8:	bf00      	nop
	}
	else
	{
		return (angle * (180 / PI));
	}*/
	return (angle * (180 / PI));
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7fe ffe8 	bl	8000490 <__aeabi_f2d>
 80014c0:	a315      	add	r3, pc, #84	@ (adr r3, 8001518 <getTheta+0x300>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f83b 	bl	8000540 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fae5 	bl	8000aa0 <__aeabi_d2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	ee07 3a90 	vmov	s15, r3
    //converts angle to degrees and returns the value
}
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40000000 	.word	0x40000000
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40a38800 	.word	0x40a38800
 80014f8:	544486e0 	.word	0x544486e0
 80014fc:	3ff921fb 	.word	0x3ff921fb
 8001500:	00000000 	.word	0x00000000
 8001504:	40b13000 	.word	0x40b13000
 8001508:	00000000 	.word	0x00000000
 800150c:	40d41e00 	.word	0x40d41e00
 8001510:	00000000 	.word	0x00000000
 8001514:	40d19400 	.word	0x40d19400
 8001518:	1a635ba1 	.word	0x1a635ba1
 800151c:	404ca5dc 	.word	0x404ca5dc
 8001520:	40490000 	.word	0x40490000
 8001524:	40668000 	.word	0x40668000

08001528 <moveTOPS>:
//Fun. for calculation angle legs and transmit at fun. UpdatePosition
void moveTOPS(float X0, float Y0, float Z0,    //FL leg
              float X1, float Y1, float Z1,    //FR leg
              float X2, float Y2, float Z2,    //BL leg
              float X3, float Y3, float Z3)	   //BR leg
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09c      	sub	sp, #112	@ 0x70
 800152c:	af00      	add	r7, sp, #0
 800152e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8001532:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 8001536:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 800153a:	edc7 1a08 	vstr	s3, [r7, #32]
 800153e:	ed87 2a07 	vstr	s4, [r7, #28]
 8001542:	edc7 2a06 	vstr	s5, [r7, #24]
 8001546:	ed87 3a05 	vstr	s6, [r7, #20]
 800154a:	edc7 3a04 	vstr	s7, [r7, #16]
 800154e:	ed87 4a03 	vstr	s8, [r7, #12]
 8001552:	edc7 4a02 	vstr	s9, [r7, #8]
 8001556:	ed87 5a01 	vstr	s10, [r7, #4]
 800155a:	edc7 5a00 	vstr	s11, [r7]
  float relPos = 0;                                //odrive relative position
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	667b      	str	r3, [r7, #100]	@ 0x64
  //X, Y, Z positions of each foot
  float pos[4][3] = { { X0, Y0, Z0 },    //FL leg
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	637b      	str	r3, [r7, #52]	@ 0x34
 8001568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	643b      	str	r3, [r7, #64]	@ 0x40
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	647b      	str	r3, [r7, #68]	@ 0x44
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	653b      	str	r3, [r7, #80]	@ 0x50
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	657b      	str	r3, [r7, #84]	@ 0x54
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	663b      	str	r3, [r7, #96]	@ 0x60
                      { X1, Y1, Z1 },    //FR leg
                      { X2, Y2, Z2 },    //BL leg
                      { X3, Y3, Z3 } };  //BR leg
  //move each actuator
  for (int i = 0; i < 4; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001598:	e044      	b.n	8001624 <moveTOPS+0xfc>
  {                                                  //cycle through each leg (FL, FR, BL, BR)
    for (int j = 0; j < 3; j++)
 800159a:	2300      	movs	r3, #0
 800159c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800159e:	e03b      	b.n	8001618 <moveTOPS+0xf0>
    {
    	//cycle through each legs joints (abad, hip, knee)
    	relPos = getTheta(j, pos[i][0], pos[i][1], pos[i][2]);// - offset[i][j];  //calculate relative joint position and make positive
 80015a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	3370      	adds	r3, #112	@ 0x70
 80015ac:	443b      	add	r3, r7
 80015ae:	3b3c      	subs	r3, #60	@ 0x3c
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	3370      	adds	r3, #112	@ 0x70
 80015c0:	443b      	add	r3, r7
 80015c2:	3b38      	subs	r3, #56	@ 0x38
 80015c4:	ed93 7a00 	vldr	s14, [r3]
 80015c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	3370      	adds	r3, #112	@ 0x70
 80015d4:	443b      	add	r3, r7
 80015d6:	3b34      	subs	r3, #52	@ 0x34
 80015d8:	edd3 6a00 	vldr	s13, [r3]
 80015dc:	eeb0 1a66 	vmov.f32	s2, s13
 80015e0:	eef0 0a47 	vmov.f32	s1, s14
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80015ea:	f7ff fe15 	bl	8001218 <getTheta>
 80015ee:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
    	}
    	else
    	{
    		UpdatePosition(i * 3 + j, 180 - relPos);
    	}*/
    	UpdatePosition(i * 3 + j, relPos);
 80015f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	441a      	add	r2, r3
 80015fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015fc:	4413      	add	r3, r2
 80015fe:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fc3e 	bl	8001e84 <UpdatePosition>
    	HAL_UART_Receive_DMA(&huart1, rx_buff, 1);
 8001608:	2201      	movs	r2, #1
 800160a:	490a      	ldr	r1, [pc, #40]	@ (8001634 <moveTOPS+0x10c>)
 800160c:	480a      	ldr	r0, [pc, #40]	@ (8001638 <moveTOPS+0x110>)
 800160e:	f004 fca4 	bl	8005f5a <HAL_UART_Receive_DMA>
    for (int j = 0; j < 3; j++)
 8001612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001614:	3301      	adds	r3, #1
 8001616:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800161a:	2b02      	cmp	r3, #2
 800161c:	ddc0      	ble.n	80015a0 <moveTOPS+0x78>
  for (int i = 0; i < 4; i++)
 800161e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001620:	3301      	adds	r3, #1
 8001622:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001626:	2b03      	cmp	r3, #3
 8001628:	ddb7      	ble.n	800159a <moveTOPS+0x72>
    }
  }
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3770      	adds	r7, #112	@ 0x70
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000308 	.word	0x20000308
 8001638:	20000200 	.word	0x20000200

0800163c <step>:
           normX, normYB, normZ);  //BR
  HAL_Delay(150);
}

void step()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
  int normYF = -0;//-50
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  int normYB = -0;//-50//-110
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  int offset = 30;//100//200
 800164a:	231e      	movs	r3, #30
 800164c:	617b      	str	r3, [r7, #20]
  int offsetY = 20;//80//300
 800164e:	2314      	movs	r3, #20
 8001650:	613b      	str	r3, [r7, #16]
  int time = 200;//200//160
 8001652:	23c8      	movs	r3, #200	@ 0xc8
 8001654:	60fb      	str	r3, [r7, #12]
  int normX = 50;//110
 8001656:	2332      	movs	r3, #50	@ 0x32
 8001658:	60bb      	str	r3, [r7, #8]
  int normZ = 150;//300
 800165a:	2396      	movs	r3, #150	@ 0x96
 800165c:	607b      	str	r3, [r7, #4]
           normX, normYF + offsetY, normZ,  //FR
           normX, normYB + offsetY, normZ,                          //BL
           normX, normYB, normZ);                                             //BR
  HAL_Delay(time);*/
  //1 point
  moveTOPS(normX, normYF, normZ - offset/2,   //FL
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	ee07 3a10 	vmov	s14, r3
 800166e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	0fda      	lsrs	r2, r3, #31
 8001676:	4413      	add	r3, r2
 8001678:	105b      	asrs	r3, r3, #1
 800167a:	425b      	negs	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	ee06 3a90 	vmov	s13, r3
 8001686:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	ee06 3a10 	vmov	s12, r3
 8001690:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	ee05 3a90 	vmov	s11, r3
 800169a:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	ee05 3a90 	vmov	s11, r3
 80016a4:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	ee05 3a90 	vmov	s11, r3
 80016ae:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	ee05 3a90 	vmov	s11, r3
 80016b8:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	ee05 3a90 	vmov	s11, r3
 80016c2:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	ee05 3a90 	vmov	s11, r3
 80016cc:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	ee05 3a90 	vmov	s11, r3
 80016d6:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYF, normZ,                 //FR
           normX, normYB, normZ,                 //BL
           normX, normYB, normZ - offset/2);  //BR
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	0fda      	lsrs	r2, r3, #31
 80016de:	4413      	add	r3, r2
 80016e0:	105b      	asrs	r3, r3, #1
 80016e2:	425b      	negs	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ - offset/2,   //FL
 80016ea:	ee05 3a90 	vmov	s11, r3
 80016ee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80016f2:	eef0 1a46 	vmov.f32	s3, s12
 80016f6:	eeb0 1a66 	vmov.f32	s2, s13
 80016fa:	eef0 0a47 	vmov.f32	s1, s14
 80016fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001702:	f7ff ff11 	bl	8001528 <moveTOPS>
  HAL_Delay(time/2);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0fda      	lsrs	r2, r3, #31
 800170a:	4413      	add	r3, r2
 800170c:	105b      	asrs	r3, r3, #1
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fb14 	bl	8002d3c <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF, normZ - offset,   //FL
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	ee07 3a10 	vmov	s14, r3
 8001724:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	ee06 3a90 	vmov	s13, r3
 8001732:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	ee06 3a10 	vmov	s12, r3
 800173c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	ee05 3a90 	vmov	s11, r3
 8001746:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	ee05 3a90 	vmov	s11, r3
 8001750:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	ee05 3a90 	vmov	s11, r3
 800175a:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	ee05 3a90 	vmov	s11, r3
 8001764:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	ee05 3a90 	vmov	s11, r3
 800176e:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	ee05 3a90 	vmov	s11, r3
 8001778:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	ee05 3a90 	vmov	s11, r3
 8001782:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYF, normZ,                 //FR
           normX, normYB, normZ,                 //BL
           normX, normYB, normZ - offset);  //BR
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ - offset,   //FL
 800178c:	ee05 3a90 	vmov	s11, r3
 8001790:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001794:	eef0 1a46 	vmov.f32	s3, s12
 8001798:	eeb0 1a66 	vmov.f32	s2, s13
 800179c:	eef0 0a47 	vmov.f32	s1, s14
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	f7ff fec0 	bl	8001528 <moveTOPS>
  HAL_Delay(time);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 fac6 	bl	8002d3c <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF + offsetY/2, normZ - offset/2,                           //FL
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	0fda      	lsrs	r2, r3, #31
 80017be:	4413      	add	r3, r2
 80017c0:	105b      	asrs	r3, r3, #1
 80017c2:	461a      	mov	r2, r3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	4413      	add	r3, r2
 80017c8:	ee07 3a10 	vmov	s14, r3
 80017cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	0fda      	lsrs	r2, r3, #31
 80017d4:	4413      	add	r3, r2
 80017d6:	105b      	asrs	r3, r3, #1
 80017d8:	425b      	negs	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	ee06 3a90 	vmov	s13, r3
 80017e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	ee06 3a10 	vmov	s12, r3
 80017ee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	ee05 3a90 	vmov	s11, r3
 80017f8:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	ee05 3a90 	vmov	s11, r3
 8001802:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	ee05 3a90 	vmov	s11, r3
 800180c:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	ee05 3a90 	vmov	s11, r3
 8001816:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ee05 3a90 	vmov	s11, r3
 8001820:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	ee05 3a90 	vmov	s11, r3
 800182a:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                                             //FR
           normX, normYB, normZ,                                                             //BL
           normX, normYB + offsetY/2, normZ - offset/2);  //BR
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	0fda      	lsrs	r2, r3, #31
 8001832:	4413      	add	r3, r2
 8001834:	105b      	asrs	r3, r3, #1
 8001836:	461a      	mov	r2, r3
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY/2, normZ - offset/2,                           //FL
 800183c:	ee05 3a90 	vmov	s11, r3
 8001840:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYB + offsetY/2, normZ - offset/2);  //BR
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	0fda      	lsrs	r2, r3, #31
 8001848:	4413      	add	r3, r2
 800184a:	105b      	asrs	r3, r3, #1
 800184c:	425b      	negs	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY/2, normZ - offset/2,                           //FL
 8001854:	ee05 3a90 	vmov	s11, r3
 8001858:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800185c:	eef0 1a46 	vmov.f32	s3, s12
 8001860:	eeb0 1a66 	vmov.f32	s2, s13
 8001864:	eef0 0a47 	vmov.f32	s1, s14
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	f7ff fe5c 	bl	8001528 <moveTOPS>
  HAL_Delay(time/2);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	0fda      	lsrs	r2, r3, #31
 8001874:	4413      	add	r3, r2
 8001876:	105b      	asrs	r3, r3, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f001 fa5f 	bl	8002d3c <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF + offsetY, normZ - offset,                           //FL
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4413      	add	r3, r2
 800188e:	ee07 3a10 	vmov	s14, r3
 8001892:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	ee06 3a90 	vmov	s13, r3
 80018a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	ee06 3a10 	vmov	s12, r3
 80018aa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	ee05 3a90 	vmov	s11, r3
 80018b4:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	ee05 3a90 	vmov	s11, r3
 80018be:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	ee05 3a90 	vmov	s11, r3
 80018c8:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	ee05 3a90 	vmov	s11, r3
 80018d2:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	ee05 3a90 	vmov	s11, r3
 80018dc:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	ee05 3a90 	vmov	s11, r3
 80018e6:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                                             //FR
           normX, normYB, normZ,                                                             //BL
           normX, normYB + offsetY, normZ - offset);  //BR
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY, normZ - offset,                           //FL
 80018f0:	ee05 3a90 	vmov	s11, r3
 80018f4:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYB + offsetY, normZ - offset);  //BR
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF + offsetY, normZ - offset,                           //FL
 80018fe:	ee05 3a90 	vmov	s11, r3
 8001902:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001906:	eef0 1a46 	vmov.f32	s3, s12
 800190a:	eeb0 1a66 	vmov.f32	s2, s13
 800190e:	eef0 0a47 	vmov.f32	s1, s14
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	f7ff fe07 	bl	8001528 <moveTOPS>
  HAL_Delay(time);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4618      	mov	r0, r3
 800191e:	f001 fa0d 	bl	8002d3c <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF + offsetY/2, normZ,                           //FL
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	0fda      	lsrs	r2, r3, #31
 8001930:	4413      	add	r3, r2
 8001932:	105b      	asrs	r3, r3, #1
 8001934:	461a      	mov	r2, r3
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	ee07 3a10 	vmov	s14, r3
 800193e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	ee06 3a90 	vmov	s13, r3
 8001948:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	ee06 3a10 	vmov	s12, r3
 8001952:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	ee05 3a90 	vmov	s11, r3
 800195c:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	ee05 3a90 	vmov	s11, r3
 8001966:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	ee05 3a90 	vmov	s11, r3
 8001970:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	ee05 3a90 	vmov	s11, r3
 800197a:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	ee05 3a90 	vmov	s11, r3
 8001984:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	ee05 3a90 	vmov	s11, r3
 800198e:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                               //FR
           normX, normYB, normZ,                                               //BL
           normX, normYB + offsetY/2, normZ);  //BR
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	0fda      	lsrs	r2, r3, #31
 8001996:	4413      	add	r3, r2
 8001998:	105b      	asrs	r3, r3, #1
 800199a:	461a      	mov	r2, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY/2, normZ,                           //FL
 80019a0:	ee05 3a90 	vmov	s11, r3
 80019a4:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	ee05 3a90 	vmov	s11, r3
 80019ae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80019b2:	eef0 1a46 	vmov.f32	s3, s12
 80019b6:	eeb0 1a66 	vmov.f32	s2, s13
 80019ba:	eef0 0a47 	vmov.f32	s1, s14
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	f7ff fdb1 	bl	8001528 <moveTOPS>
  HAL_Delay(time/2);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	0fda      	lsrs	r2, r3, #31
 80019ca:	4413      	add	r3, r2
 80019cc:	105b      	asrs	r3, r3, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 f9b4 	bl	8002d3c <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF + offsetY, normZ,                           //FL
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4413      	add	r3, r2
 80019e4:	ee07 3a10 	vmov	s14, r3
 80019e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	ee06 3a90 	vmov	s13, r3
 80019f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	ee06 3a10 	vmov	s12, r3
 80019fc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	ee05 3a90 	vmov	s11, r3
 8001a06:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	ee05 3a90 	vmov	s11, r3
 8001a10:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	ee05 3a90 	vmov	s11, r3
 8001a1a:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	ee05 3a90 	vmov	s11, r3
 8001a24:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	ee05 3a90 	vmov	s11, r3
 8001a2e:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	ee05 3a90 	vmov	s11, r3
 8001a38:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                               //FR
           normX, normYB, normZ,                                               //BL
           normX, normYB + offsetY, normZ);  //BR
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY, normZ,                           //FL
 8001a42:	ee05 3a90 	vmov	s11, r3
 8001a46:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	ee05 3a90 	vmov	s11, r3
 8001a50:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001a54:	eef0 1a46 	vmov.f32	s3, s12
 8001a58:	eeb0 1a66 	vmov.f32	s2, s13
 8001a5c:	eef0 0a47 	vmov.f32	s1, s14
 8001a60:	eeb0 0a67 	vmov.f32	s0, s15
 8001a64:	f7ff fd60 	bl	8001528 <moveTOPS>
  HAL_Delay(time);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 f966 	bl	8002d3c <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF, normZ,                //FL
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	ee07 3a10 	vmov	s14, r3
 8001a80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	ee06 3a90 	vmov	s13, r3
 8001a8a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	ee06 3a10 	vmov	s12, r3
 8001a94:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	ee05 3a90 	vmov	s11, r3
 8001a9e:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF, normZ - offset/2,  //FR
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	0fda      	lsrs	r2, r3, #31
 8001aa6:	4413      	add	r3, r2
 8001aa8:	105b      	asrs	r3, r3, #1
 8001aaa:	425b      	negs	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                //FL
 8001ab2:	ee05 3a90 	vmov	s11, r3
 8001ab6:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	ee05 3a90 	vmov	s11, r3
 8001ac0:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	ee05 3a90 	vmov	s11, r3
 8001aca:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB, normZ - offset/2,  //BL
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	0fda      	lsrs	r2, r3, #31
 8001ad2:	4413      	add	r3, r2
 8001ad4:	105b      	asrs	r3, r3, #1
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                //FL
 8001ade:	ee05 3a90 	vmov	s11, r3
 8001ae2:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	ee05 3a90 	vmov	s11, r3
 8001aec:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	ee05 3a90 	vmov	s11, r3
 8001af6:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	ee05 3a90 	vmov	s11, r3
 8001b00:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001b04:	eef0 1a46 	vmov.f32	s3, s12
 8001b08:	eeb0 1a66 	vmov.f32	s2, s13
 8001b0c:	eef0 0a47 	vmov.f32	s1, s14
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	f7ff fd08 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);               //BR
  HAL_Delay(time/2);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	0fda      	lsrs	r2, r3, #31
 8001b1c:	4413      	add	r3, r2
 8001b1e:	105b      	asrs	r3, r3, #1
 8001b20:	4618      	mov	r0, r3
 8001b22:	f001 f90b 	bl	8002d3c <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF, normZ,                //FL
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	ee07 3a10 	vmov	s14, r3
 8001b36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	ee06 3a90 	vmov	s13, r3
 8001b40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	ee06 3a10 	vmov	s12, r3
 8001b4a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	ee05 3a90 	vmov	s11, r3
 8001b54:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF, normZ - offset,  //FR
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                //FL
 8001b5e:	ee05 3a90 	vmov	s11, r3
 8001b62:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	ee05 3a90 	vmov	s11, r3
 8001b6c:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	ee05 3a90 	vmov	s11, r3
 8001b76:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB, normZ - offset,  //BL
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                //FL
 8001b80:	ee05 3a90 	vmov	s11, r3
 8001b84:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	ee05 3a90 	vmov	s11, r3
 8001b8e:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	ee05 3a90 	vmov	s11, r3
 8001b98:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	ee05 3a90 	vmov	s11, r3
 8001ba2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001ba6:	eef0 1a46 	vmov.f32	s3, s12
 8001baa:	eeb0 1a66 	vmov.f32	s2, s13
 8001bae:	eef0 0a47 	vmov.f32	s1, s14
 8001bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb6:	f7ff fcb7 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);               //BR
  HAL_Delay(time);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 f8bd 	bl	8002d3c <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	ee07 3a90 	vmov	s15, r3
 8001bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	ee07 3a10 	vmov	s14, r3
 8001bd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	ee06 3a90 	vmov	s13, r3
 8001bdc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	ee06 3a10 	vmov	s12, r3
 8001be6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY/2, normZ - offset/2,  //FR
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	0fda      	lsrs	r2, r3, #31
 8001bee:	4413      	add	r3, r2
 8001bf0:	105b      	asrs	r3, r3, #1
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001bf8:	ee05 3a90 	vmov	s11, r3
 8001bfc:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF + offsetY/2, normZ - offset/2,  //FR
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	0fda      	lsrs	r2, r3, #31
 8001c04:	4413      	add	r3, r2
 8001c06:	105b      	asrs	r3, r3, #1
 8001c08:	425b      	negs	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001c10:	ee05 3a90 	vmov	s11, r3
 8001c14:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	ee05 3a90 	vmov	s11, r3
 8001c1e:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY/2, normZ - offset/2,                          //BL
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	0fda      	lsrs	r2, r3, #31
 8001c26:	4413      	add	r3, r2
 8001c28:	105b      	asrs	r3, r3, #1
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001c30:	ee05 3a90 	vmov	s11, r3
 8001c34:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB + offsetY/2, normZ - offset/2,                          //BL
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	0fda      	lsrs	r2, r3, #31
 8001c3c:	4413      	add	r3, r2
 8001c3e:	105b      	asrs	r3, r3, #1
 8001c40:	425b      	negs	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001c48:	ee05 3a90 	vmov	s11, r3
 8001c4c:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	ee05 3a90 	vmov	s11, r3
 8001c56:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	ee05 3a90 	vmov	s11, r3
 8001c60:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	ee05 3a90 	vmov	s11, r3
 8001c6a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001c6e:	eef0 1a46 	vmov.f32	s3, s12
 8001c72:	eeb0 1a66 	vmov.f32	s2, s13
 8001c76:	eef0 0a47 	vmov.f32	s1, s14
 8001c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7e:	f7ff fc53 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);                                                           //BR
  HAL_Delay(time);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 f859 	bl	8002d3c <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	ee07 3a10 	vmov	s14, r3
 8001c9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	ee06 3a90 	vmov	s13, r3
 8001ca4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	ee06 3a10 	vmov	s12, r3
 8001cae:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY, normZ - offset,  //FR
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001cb8:	ee05 3a90 	vmov	s11, r3
 8001cbc:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF + offsetY, normZ - offset,  //FR
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001cc6:	ee05 3a90 	vmov	s11, r3
 8001cca:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	ee05 3a90 	vmov	s11, r3
 8001cd4:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY, normZ - offset,                          //BL
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001cde:	ee05 3a90 	vmov	s11, r3
 8001ce2:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB + offsetY, normZ - offset,                          //BL
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001cec:	ee05 3a90 	vmov	s11, r3
 8001cf0:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	ee05 3a90 	vmov	s11, r3
 8001cfa:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	ee05 3a90 	vmov	s11, r3
 8001d04:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	ee05 3a90 	vmov	s11, r3
 8001d0e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001d12:	eef0 1a46 	vmov.f32	s3, s12
 8001d16:	eeb0 1a66 	vmov.f32	s2, s13
 8001d1a:	eef0 0a47 	vmov.f32	s1, s14
 8001d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d22:	f7ff fc01 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);                                                           //BR
  HAL_Delay(time);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 f807 	bl	8002d3c <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	ee07 3a10 	vmov	s14, r3
 8001d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	ee06 3a90 	vmov	s13, r3
 8001d48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	ee06 3a10 	vmov	s12, r3
 8001d52:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY/2, normZ,  //FR
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	0fda      	lsrs	r2, r3, #31
 8001d5a:	4413      	add	r3, r2
 8001d5c:	105b      	asrs	r3, r3, #1
 8001d5e:	461a      	mov	r2, r3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001d64:	ee05 3a90 	vmov	s11, r3
 8001d68:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	ee05 3a90 	vmov	s11, r3
 8001d72:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	ee05 3a90 	vmov	s11, r3
 8001d7c:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY/2, normZ,                          //BL
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	0fda      	lsrs	r2, r3, #31
 8001d84:	4413      	add	r3, r2
 8001d86:	105b      	asrs	r3, r3, #1
 8001d88:	461a      	mov	r2, r3
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001d8e:	ee05 3a90 	vmov	s11, r3
 8001d92:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	ee05 3a90 	vmov	s11, r3
 8001d9c:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	ee05 3a90 	vmov	s11, r3
 8001da6:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	ee05 3a90 	vmov	s11, r3
 8001db0:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	ee05 3a90 	vmov	s11, r3
 8001dba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001dbe:	eef0 1a46 	vmov.f32	s3, s12
 8001dc2:	eeb0 1a66 	vmov.f32	s2, s13
 8001dc6:	eef0 0a47 	vmov.f32	s1, s14
 8001dca:	eeb0 0a67 	vmov.f32	s0, s15
 8001dce:	f7ff fbab 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);                                             //BR
  HAL_Delay(time/2);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	0fda      	lsrs	r2, r3, #31
 8001dd6:	4413      	add	r3, r2
 8001dd8:	105b      	asrs	r3, r3, #1
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 ffae 	bl	8002d3c <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	ee07 3a10 	vmov	s14, r3
 8001df0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	ee06 3a90 	vmov	s13, r3
 8001dfa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	ee06 3a10 	vmov	s12, r3
 8001e04:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY, normZ,  //FR
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001e0e:	ee05 3a90 	vmov	s11, r3
 8001e12:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	ee05 3a90 	vmov	s11, r3
 8001e1c:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	ee05 3a90 	vmov	s11, r3
 8001e26:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY, normZ,                          //BL
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001e30:	ee05 3a90 	vmov	s11, r3
 8001e34:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	ee05 3a90 	vmov	s11, r3
 8001e3e:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	ee05 3a90 	vmov	s11, r3
 8001e48:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	ee05 3a90 	vmov	s11, r3
 8001e52:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	ee05 3a90 	vmov	s11, r3
 8001e5c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001e60:	eef0 1a46 	vmov.f32	s3, s12
 8001e64:	eeb0 1a66 	vmov.f32	s2, s13
 8001e68:	eef0 0a47 	vmov.f32	s1, s14
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	f7ff fb5a 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);                                             //BR
  HAL_Delay(time);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 ff60 	bl	8002d3c <HAL_Delay>
}
 8001e7c:	bf00      	nop
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <UpdatePosition>:
	  HAL_Delay(time);
}

//void UpdatePosition(float theta_abad, float theta_hip, float theta_knee)
void UpdatePosition(int j, float relPos)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	ed87 0a00 	vstr	s0, [r7]
	    //TIM2->CCR1=Pulse_length;
	    //return 0;
//abad плечо
//hip бедро
//knee колено
	switch(j)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b0b      	cmp	r3, #11
 8001e94:	f200 809a 	bhi.w	8001fcc <UpdatePosition+0x148>
 8001e98:	a201      	add	r2, pc, #4	@ (adr r2, 8001ea0 <UpdatePosition+0x1c>)
 8001e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9e:	bf00      	nop
 8001ea0:	08001ed1 	.word	0x08001ed1
 8001ea4:	08001ee9 	.word	0x08001ee9
 8001ea8:	08001f01 	.word	0x08001f01
 8001eac:	08001f19 	.word	0x08001f19
 8001eb0:	08001f25 	.word	0x08001f25
 8001eb4:	08001f3d 	.word	0x08001f3d
 8001eb8:	08001f55 	.word	0x08001f55
 8001ebc:	08001f6d 	.word	0x08001f6d
 8001ec0:	08001f85 	.word	0x08001f85
 8001ec4:	08001f9d 	.word	0x08001f9d
 8001ec8:	08001fa9 	.word	0x08001fa9
 8001ecc:	08001fc1 	.word	0x08001fc1
	{
	//Передняя левая
	case 0:
	PCA9685_SetServoAngle(0, relPos - 20);
 8001ed0:	edd7 7a00 	vldr	s15, [r7]
 8001ed4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001ed8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001edc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff f871 	bl	8000fc8 <PCA9685_SetServoAngle>
		///TIM2 ->CCR1 = relPos + 750 - 50;//плечо
		break;
 8001ee6:	e071      	b.n	8001fcc <UpdatePosition+0x148>
	case 1:
	PCA9685_SetServoAngle(1, relPos + 120);
 8001ee8:	edd7 7a00 	vldr	s15, [r7]
 8001eec:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001fd4 <UpdatePosition+0x150>
 8001ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff f865 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM2 ->CCR2 = relPos + 750 - 300;//бедро
		break;
 8001efe:	e065      	b.n	8001fcc <UpdatePosition+0x148>
	case 2:
	PCA9685_SetServoAngle(2, relPos - 30);//70
 8001f00:	edd7 7a00 	vldr	s15, [r7]
 8001f04:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001f08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7ff f859 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM2 ->CCR3 = relPos + 750;//колено 1300 200
		break;
 8001f16:	e059      	b.n	8001fcc <UpdatePosition+0x148>
	//Предняя правая
	case 3:
	PCA9685_SetServoAngle(3, relPos);
 8001f18:	ed97 0a00 	vldr	s0, [r7]
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f7ff f853 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM2 ->CCR4 = relPos + 750 - 470;
		break;
 8001f22:	e053      	b.n	8001fcc <UpdatePosition+0x148>
	case 4:
	PCA9685_SetServoAngle(4, relPos + 20);
 8001f24:	edd7 7a00 	vldr	s15, [r7]
 8001f28:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001f2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f30:	eeb0 0a67 	vmov.f32	s0, s15
 8001f34:	2004      	movs	r0, #4
 8001f36:	f7ff f847 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR1 = relPos + 750 - 30;
		break;
 8001f3a:	e047      	b.n	8001fcc <UpdatePosition+0x148>
	case 5:
	PCA9685_SetServoAngle(5, relPos + 40);
 8001f3c:	edd7 7a00 	vldr	s15, [r7]
 8001f40:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001fd8 <UpdatePosition+0x154>
 8001f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f48:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4c:	2005      	movs	r0, #5
 8001f4e:	f7ff f83b 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR2 = relPos + 750 - 250;
		break;
 8001f52:	e03b      	b.n	8001fcc <UpdatePosition+0x148>
	//Звдняя левая
	case 6:
	PCA9685_SetServoAngle(6, relPos - 10);
 8001f54:	edd7 7a00 	vldr	s15, [r7]
 8001f58:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f60:	eeb0 0a67 	vmov.f32	s0, s15
 8001f64:	2006      	movs	r0, #6
 8001f66:	f7ff f82f 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR3 = relPos + 750 - 150;
		break;
 8001f6a:	e02f      	b.n	8001fcc <UpdatePosition+0x148>
	case 7:
	PCA9685_SetServoAngle(7, relPos + 70);
 8001f6c:	edd7 7a00 	vldr	s15, [r7]
 8001f70:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001fdc <UpdatePosition+0x158>
 8001f74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	2007      	movs	r0, #7
 8001f7e:	f7ff f823 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR4 = relPos + 750 + 250;
		break;
 8001f82:	e023      	b.n	8001fcc <UpdatePosition+0x148>
	case 8:
	PCA9685_SetServoAngle(8, relPos - 50);
 8001f84:	edd7 7a00 	vldr	s15, [r7]
 8001f88:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001fe0 <UpdatePosition+0x15c>
 8001f8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	2008      	movs	r0, #8
 8001f96:	f7ff f817 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM4 ->CCR1 = relPos + 750 - 600;
		break;
 8001f9a:	e017      	b.n	8001fcc <UpdatePosition+0x148>
	//Задняя правая
	case 9:
	PCA9685_SetServoAngle(9, relPos);
 8001f9c:	ed97 0a00 	vldr	s0, [r7]
 8001fa0:	2009      	movs	r0, #9
 8001fa2:	f7ff f811 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM4 ->CCR2 = relPos + 750 - 350;
		break;
 8001fa6:	e011      	b.n	8001fcc <UpdatePosition+0x148>
	case 10:
	PCA9685_SetServoAngle(10, relPos - 20);
 8001fa8:	edd7 7a00 	vldr	s15, [r7]
 8001fac:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001fb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb8:	200a      	movs	r0, #10
 8001fba:	f7ff f805 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM4 ->CCR3 = relPos + 750 - 450;
		break;
 8001fbe:	e005      	b.n	8001fcc <UpdatePosition+0x148>
	case 11:
	PCA9685_SetServoAngle(11, relPos);
 8001fc0:	ed97 0a00 	vldr	s0, [r7]
 8001fc4:	200b      	movs	r0, #11
 8001fc6:	f7fe ffff 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM5 ->CCR1 = relPos + 750 + 200;
		//TIM4 ->CCR1 = relPos + 750;
		break;
 8001fca:	bf00      	nop

	TIM4 ->CCR2 = theta_abad_PWM;
	TIM4 ->CCR3 = 0;
	TIM4 ->CCR4 = 0;*/
	    //TIM2 ->CCR1 = 900;
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	42f00000 	.word	0x42f00000
 8001fd8:	42200000 	.word	0x42200000
 8001fdc:	428c0000 	.word	0x428c0000
 8001fe0:	42480000 	.word	0x42480000

08001fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe8:	f000 fe36 	bl	8002c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fec:	f000 f868 	bl	80020c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff0:	f000 fb18 	bl	8002624 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ff4:	f000 faee 	bl	80025d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ff8:	f000 fac2 	bl	8002580 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001ffc:	f000 f8f8 	bl	80021f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002000:	f000 f970 	bl	80022e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002004:	f000 f9e8 	bl	80023d8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002008:	f000 fa60 	bl	80024cc <MX_TIM5_Init>
  MX_I2C1_Init();
 800200c:	f000 f8c2 	bl	8002194 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  /*I2C1------------------------------------------------------------------------*/
  PCA9685_Init(50); // 50Hz for servo
 8002010:	2032      	movs	r0, #50	@ 0x32
 8002012:	f7fe ff95 	bl	8000f40 <PCA9685_Init>





  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002016:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <main+0xc0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <main+0xc0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0210 	orr.w	r2, r2, #16
 8002024:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, rx_buff, bufferUART);
 8002026:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <main+0xc4>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	491f      	ldr	r1, [pc, #124]	@ (80020ac <main+0xc8>)
 800202e:	481d      	ldr	r0, [pc, #116]	@ (80020a4 <main+0xc0>)
 8002030:	f003 ff93 	bl	8005f5a <HAL_UART_Receive_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);///////////////////////////////////////////////////////////////////////////////////
 8002034:	2100      	movs	r1, #0
 8002036:	481e      	ldr	r0, [pc, #120]	@ (80020b0 <main+0xcc>)
 8002038:	f003 fa2c 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800203c:	2104      	movs	r1, #4
 800203e:	481c      	ldr	r0, [pc, #112]	@ (80020b0 <main+0xcc>)
 8002040:	f003 fa28 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002044:	2108      	movs	r1, #8
 8002046:	481a      	ldr	r0, [pc, #104]	@ (80020b0 <main+0xcc>)
 8002048:	f003 fa24 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800204c:	210c      	movs	r1, #12
 800204e:	4818      	ldr	r0, [pc, #96]	@ (80020b0 <main+0xcc>)
 8002050:	f003 fa20 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002054:	2100      	movs	r1, #0
 8002056:	4817      	ldr	r0, [pc, #92]	@ (80020b4 <main+0xd0>)
 8002058:	f003 fa1c 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800205c:	2104      	movs	r1, #4
 800205e:	4815      	ldr	r0, [pc, #84]	@ (80020b4 <main+0xd0>)
 8002060:	f003 fa18 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002064:	2108      	movs	r1, #8
 8002066:	4813      	ldr	r0, [pc, #76]	@ (80020b4 <main+0xd0>)
 8002068:	f003 fa14 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800206c:	210c      	movs	r1, #12
 800206e:	4811      	ldr	r0, [pc, #68]	@ (80020b4 <main+0xd0>)
 8002070:	f003 fa10 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002074:	2100      	movs	r1, #0
 8002076:	4810      	ldr	r0, [pc, #64]	@ (80020b8 <main+0xd4>)
 8002078:	f003 fa0c 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800207c:	2104      	movs	r1, #4
 800207e:	480e      	ldr	r0, [pc, #56]	@ (80020b8 <main+0xd4>)
 8002080:	f003 fa08 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002084:	2108      	movs	r1, #8
 8002086:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <main+0xd4>)
 8002088:	f003 fa04 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800208c:	210c      	movs	r1, #12
 800208e:	480a      	ldr	r0, [pc, #40]	@ (80020b8 <main+0xd4>)
 8002090:	f003 fa00 	bl	8005494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8002094:	2100      	movs	r1, #0
 8002096:	4809      	ldr	r0, [pc, #36]	@ (80020bc <main+0xd8>)
 8002098:	f003 f9fc 	bl	8005494 <HAL_TIM_PWM_Start>
	        PCA9685_SetServoAngle(9, 36);
	        PCA9685_SetServoAngle(11, 72);
	        PCA9685_SetServoAngle(13, 108);
	        PCA9685_SetServoAngle(15, 144);
	        HAL_Delay(1000);*/
	  step();
 800209c:	f7ff face 	bl	800163c <step>
 80020a0:	e7fc      	b.n	800209c <main+0xb8>
 80020a2:	bf00      	nop
 80020a4:	20000200 	.word	0x20000200
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000308 	.word	0x20000308
 80020b0:	200000e0 	.word	0x200000e0
 80020b4:	20000128 	.word	0x20000128
 80020b8:	20000170 	.word	0x20000170
 80020bc:	200001b8 	.word	0x200001b8

080020c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b094      	sub	sp, #80	@ 0x50
 80020c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c6:	f107 0320 	add.w	r3, r7, #32
 80020ca:	2230      	movs	r2, #48	@ 0x30
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 fa74 	bl	80075bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	4b28      	ldr	r3, [pc, #160]	@ (800218c <SystemClock_Config+0xcc>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ec:	4a27      	ldr	r2, [pc, #156]	@ (800218c <SystemClock_Config+0xcc>)
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f4:	4b25      	ldr	r3, [pc, #148]	@ (800218c <SystemClock_Config+0xcc>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <SystemClock_Config+0xd0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a21      	ldr	r2, [pc, #132]	@ (8002190 <SystemClock_Config+0xd0>)
 800210a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b1f      	ldr	r3, [pc, #124]	@ (8002190 <SystemClock_Config+0xd0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002124:	2310      	movs	r3, #16
 8002126:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002128:	2302      	movs	r3, #2
 800212a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800212c:	2300      	movs	r3, #0
 800212e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002130:	2310      	movs	r3, #16
 8002132:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002134:	23c0      	movs	r3, #192	@ 0xc0
 8002136:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002138:	2302      	movs	r3, #2
 800213a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800213c:	2304      	movs	r3, #4
 800213e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002140:	f107 0320 	add.w	r3, r7, #32
 8002144:	4618      	mov	r0, r3
 8002146:	f002 fcfd 	bl	8004b44 <HAL_RCC_OscConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002150:	f000 fa9e 	bl	8002690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002154:	230f      	movs	r3, #15
 8002156:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002158:	2302      	movs	r3, #2
 800215a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002160:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	2103      	movs	r1, #3
 8002172:	4618      	mov	r0, r3
 8002174:	f002 ff5e 	bl	8005034 <HAL_RCC_ClockConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800217e:	f000 fa87 	bl	8002690 <Error_Handler>
  }
}
 8002182:	bf00      	nop
 8002184:	3750      	adds	r7, #80	@ 0x50
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40007000 	.word	0x40007000

08002194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002198:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <MX_I2C1_Init+0x50>)
 800219a:	4a13      	ldr	r2, [pc, #76]	@ (80021e8 <MX_I2C1_Init+0x54>)
 800219c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800219e:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <MX_I2C1_Init+0x50>)
 80021a0:	4a12      	ldr	r2, [pc, #72]	@ (80021ec <MX_I2C1_Init+0x58>)
 80021a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <MX_I2C1_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <MX_I2C1_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <MX_I2C1_Init+0x50>)
 80021b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <MX_I2C1_Init+0x50>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <MX_I2C1_Init+0x50>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c4:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <MX_I2C1_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <MX_I2C1_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	@ (80021e4 <MX_I2C1_Init+0x50>)
 80021d2:	f001 fc93 	bl	8003afc <HAL_I2C_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021dc:	f000 fa58 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	2000008c 	.word	0x2000008c
 80021e8:	40005400 	.word	0x40005400
 80021ec:	000186a0 	.word	0x000186a0

080021f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f6:	f107 0320 	add.w	r3, r7, #32
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	615a      	str	r2, [r3, #20]
 8002210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002212:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 8002214:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002218:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 800221a:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 800221c:	225f      	movs	r2, #95	@ 0x5f
 800221e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10100;
 8002226:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 8002228:	f242 7274 	movw	r2, #10100	@ 0x2774
 800222c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222e:	4b2c      	ldr	r3, [pc, #176]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002234:	4b2a      	ldr	r3, [pc, #168]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800223a:	4829      	ldr	r0, [pc, #164]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 800223c:	f003 f8da 	bl	80053f4 <HAL_TIM_PWM_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002246:	f000 fa23 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002252:	f107 0320 	add.w	r3, r7, #32
 8002256:	4619      	mov	r1, r3
 8002258:	4821      	ldr	r0, [pc, #132]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 800225a:	f003 fd27 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002264:	f000 fa14 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002268:	2360      	movs	r3, #96	@ 0x60
 800226a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	2200      	movs	r2, #0
 800227c:	4619      	mov	r1, r3
 800227e:	4818      	ldr	r0, [pc, #96]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 8002280:	f003 f9d0 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800228a:	f000 fa01 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	2204      	movs	r2, #4
 8002292:	4619      	mov	r1, r3
 8002294:	4812      	ldr	r0, [pc, #72]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 8002296:	f003 f9c5 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80022a0:	f000 f9f6 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2208      	movs	r2, #8
 80022a8:	4619      	mov	r1, r3
 80022aa:	480d      	ldr	r0, [pc, #52]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 80022ac:	f003 f9ba 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80022b6:	f000 f9eb 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	220c      	movs	r2, #12
 80022be:	4619      	mov	r1, r3
 80022c0:	4807      	ldr	r0, [pc, #28]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 80022c2:	f003 f9af 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80022cc:	f000 f9e0 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022d0:	4803      	ldr	r0, [pc, #12]	@ (80022e0 <MX_TIM2_Init+0xf0>)
 80022d2:	f000 fab5 	bl	8002840 <HAL_TIM_MspPostInit>

}
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	@ 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200000e0 	.word	0x200000e0

080022e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	@ 0x28
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ea:	f107 0320 	add.w	r3, r7, #32
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002306:	4b32      	ldr	r3, [pc, #200]	@ (80023d0 <MX_TIM3_Init+0xec>)
 8002308:	4a32      	ldr	r2, [pc, #200]	@ (80023d4 <MX_TIM3_Init+0xf0>)
 800230a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 800230c:	4b30      	ldr	r3, [pc, #192]	@ (80023d0 <MX_TIM3_Init+0xec>)
 800230e:	225f      	movs	r2, #95	@ 0x5f
 8002310:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002312:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <MX_TIM3_Init+0xec>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10100;
 8002318:	4b2d      	ldr	r3, [pc, #180]	@ (80023d0 <MX_TIM3_Init+0xec>)
 800231a:	f242 7274 	movw	r2, #10100	@ 0x2774
 800231e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002320:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <MX_TIM3_Init+0xec>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002326:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <MX_TIM3_Init+0xec>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800232c:	4828      	ldr	r0, [pc, #160]	@ (80023d0 <MX_TIM3_Init+0xec>)
 800232e:	f003 f861 	bl	80053f4 <HAL_TIM_PWM_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002338:	f000 f9aa 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002344:	f107 0320 	add.w	r3, r7, #32
 8002348:	4619      	mov	r1, r3
 800234a:	4821      	ldr	r0, [pc, #132]	@ (80023d0 <MX_TIM3_Init+0xec>)
 800234c:	f003 fcae 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002356:	f000 f99b 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800235a:	2360      	movs	r3, #96	@ 0x60
 800235c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2200      	movs	r2, #0
 800236e:	4619      	mov	r1, r3
 8002370:	4817      	ldr	r0, [pc, #92]	@ (80023d0 <MX_TIM3_Init+0xec>)
 8002372:	f003 f957 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800237c:	f000 f988 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	2204      	movs	r2, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4812      	ldr	r0, [pc, #72]	@ (80023d0 <MX_TIM3_Init+0xec>)
 8002388:	f003 f94c 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002392:	f000 f97d 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	2208      	movs	r2, #8
 800239a:	4619      	mov	r1, r3
 800239c:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <MX_TIM3_Init+0xec>)
 800239e:	f003 f941 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80023a8:	f000 f972 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	220c      	movs	r2, #12
 80023b0:	4619      	mov	r1, r3
 80023b2:	4807      	ldr	r0, [pc, #28]	@ (80023d0 <MX_TIM3_Init+0xec>)
 80023b4:	f003 f936 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80023be:	f000 f967 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023c2:	4803      	ldr	r0, [pc, #12]	@ (80023d0 <MX_TIM3_Init+0xec>)
 80023c4:	f000 fa3c 	bl	8002840 <HAL_TIM_MspPostInit>

}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	@ 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000128 	.word	0x20000128
 80023d4:	40000400 	.word	0x40000400

080023d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	@ 0x28
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023de:	f107 0320 	add.w	r3, r7, #32
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	615a      	str	r2, [r3, #20]
 80023f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023fa:	4b32      	ldr	r3, [pc, #200]	@ (80024c4 <MX_TIM4_Init+0xec>)
 80023fc:	4a32      	ldr	r2, [pc, #200]	@ (80024c8 <MX_TIM4_Init+0xf0>)
 80023fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8002400:	4b30      	ldr	r3, [pc, #192]	@ (80024c4 <MX_TIM4_Init+0xec>)
 8002402:	225f      	movs	r2, #95	@ 0x5f
 8002404:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002406:	4b2f      	ldr	r3, [pc, #188]	@ (80024c4 <MX_TIM4_Init+0xec>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10100;
 800240c:	4b2d      	ldr	r3, [pc, #180]	@ (80024c4 <MX_TIM4_Init+0xec>)
 800240e:	f242 7274 	movw	r2, #10100	@ 0x2774
 8002412:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002414:	4b2b      	ldr	r3, [pc, #172]	@ (80024c4 <MX_TIM4_Init+0xec>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241a:	4b2a      	ldr	r3, [pc, #168]	@ (80024c4 <MX_TIM4_Init+0xec>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002420:	4828      	ldr	r0, [pc, #160]	@ (80024c4 <MX_TIM4_Init+0xec>)
 8002422:	f002 ffe7 	bl	80053f4 <HAL_TIM_PWM_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800242c:	f000 f930 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002438:	f107 0320 	add.w	r3, r7, #32
 800243c:	4619      	mov	r1, r3
 800243e:	4821      	ldr	r0, [pc, #132]	@ (80024c4 <MX_TIM4_Init+0xec>)
 8002440:	f003 fc34 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800244a:	f000 f921 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244e:	2360      	movs	r3, #96	@ 0x60
 8002450:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	2200      	movs	r2, #0
 8002462:	4619      	mov	r1, r3
 8002464:	4817      	ldr	r0, [pc, #92]	@ (80024c4 <MX_TIM4_Init+0xec>)
 8002466:	f003 f8dd 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002470:	f000 f90e 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2204      	movs	r2, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4812      	ldr	r0, [pc, #72]	@ (80024c4 <MX_TIM4_Init+0xec>)
 800247c:	f003 f8d2 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002486:	f000 f903 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	2208      	movs	r2, #8
 800248e:	4619      	mov	r1, r3
 8002490:	480c      	ldr	r0, [pc, #48]	@ (80024c4 <MX_TIM4_Init+0xec>)
 8002492:	f003 f8c7 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800249c:	f000 f8f8 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	220c      	movs	r2, #12
 80024a4:	4619      	mov	r1, r3
 80024a6:	4807      	ldr	r0, [pc, #28]	@ (80024c4 <MX_TIM4_Init+0xec>)
 80024a8:	f003 f8bc 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80024b2:	f000 f8ed 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024b6:	4803      	ldr	r0, [pc, #12]	@ (80024c4 <MX_TIM4_Init+0xec>)
 80024b8:	f000 f9c2 	bl	8002840 <HAL_TIM_MspPostInit>

}
 80024bc:	bf00      	nop
 80024be:	3728      	adds	r7, #40	@ 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000170 	.word	0x20000170
 80024c8:	40000800 	.word	0x40000800

080024cc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d2:	f107 0320 	add.w	r3, r7, #32
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]
 80024ea:	615a      	str	r2, [r3, #20]
 80024ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024ee:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <MX_TIM5_Init+0xac>)
 80024f0:	4a22      	ldr	r2, [pc, #136]	@ (800257c <MX_TIM5_Init+0xb0>)
 80024f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 80024f4:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <MX_TIM5_Init+0xac>)
 80024f6:	225f      	movs	r2, #95	@ 0x5f
 80024f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002578 <MX_TIM5_Init+0xac>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10100;
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <MX_TIM5_Init+0xac>)
 8002502:	f242 7274 	movw	r2, #10100	@ 0x2774
 8002506:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <MX_TIM5_Init+0xac>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250e:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <MX_TIM5_Init+0xac>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002514:	4818      	ldr	r0, [pc, #96]	@ (8002578 <MX_TIM5_Init+0xac>)
 8002516:	f002 ff6d 	bl	80053f4 <HAL_TIM_PWM_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002520:	f000 f8b6 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800252c:	f107 0320 	add.w	r3, r7, #32
 8002530:	4619      	mov	r1, r3
 8002532:	4811      	ldr	r0, [pc, #68]	@ (8002578 <MX_TIM5_Init+0xac>)
 8002534:	f003 fbba 	bl	8005cac <HAL_TIMEx_MasterConfigSynchronization>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800253e:	f000 f8a7 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002542:	2360      	movs	r3, #96	@ 0x60
 8002544:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	4619      	mov	r1, r3
 8002558:	4807      	ldr	r0, [pc, #28]	@ (8002578 <MX_TIM5_Init+0xac>)
 800255a:	f003 f863 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002564:	f000 f894 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002568:	4803      	ldr	r0, [pc, #12]	@ (8002578 <MX_TIM5_Init+0xac>)
 800256a:	f000 f969 	bl	8002840 <HAL_TIM_MspPostInit>

}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	@ 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200001b8 	.word	0x200001b8
 800257c:	40000c00 	.word	0x40000c00

08002580 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <MX_USART1_UART_Init+0x4c>)
 8002586:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <MX_USART1_UART_Init+0x50>)
 8002588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <MX_USART1_UART_Init+0x4c>)
 800258c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <MX_USART1_UART_Init+0x4c>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <MX_USART1_UART_Init+0x4c>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800259e:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <MX_USART1_UART_Init+0x4c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025a4:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <MX_USART1_UART_Init+0x4c>)
 80025a6:	220c      	movs	r2, #12
 80025a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025aa:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <MX_USART1_UART_Init+0x4c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <MX_USART1_UART_Init+0x4c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	@ (80025cc <MX_USART1_UART_Init+0x4c>)
 80025b8:	f003 fbf4 	bl	8005da4 <HAL_UART_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025c2:	f000 f865 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000200 	.word	0x20000200
 80025d0:	40011000 	.word	0x40011000

080025d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <MX_DMA_Init+0x4c>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002620 <MX_DMA_Init+0x4c>)
 80025e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <MX_DMA_Init+0x4c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	203a      	movs	r0, #58	@ 0x3a
 80025fc:	f000 fc9d 	bl	8002f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002600:	203a      	movs	r0, #58	@ 0x3a
 8002602:	f000 fcb6 	bl	8002f72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2046      	movs	r0, #70	@ 0x46
 800260c:	f000 fc95 	bl	8002f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002610:	2046      	movs	r0, #70	@ 0x46
 8002612:	f000 fcae 	bl	8002f72 <HAL_NVIC_EnableIRQ>

}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b17      	ldr	r3, [pc, #92]	@ (800268c <MX_GPIO_Init+0x68>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	4a16      	ldr	r2, [pc, #88]	@ (800268c <MX_GPIO_Init+0x68>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6313      	str	r3, [r2, #48]	@ 0x30
 800263a:	4b14      	ldr	r3, [pc, #80]	@ (800268c <MX_GPIO_Init+0x68>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <MX_GPIO_Init+0x68>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a0f      	ldr	r2, [pc, #60]	@ (800268c <MX_GPIO_Init+0x68>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <MX_GPIO_Init+0x68>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	4b09      	ldr	r3, [pc, #36]	@ (800268c <MX_GPIO_Init+0x68>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a08      	ldr	r2, [pc, #32]	@ (800268c <MX_GPIO_Init+0x68>)
 800266c:	f043 0308 	orr.w	r3, r3, #8
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <MX_GPIO_Init+0x68>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <Error_Handler+0x8>

0800269c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	4a0f      	ldr	r2, [pc, #60]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	4a08      	ldr	r2, [pc, #32]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_MspInit+0x4c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800

080026ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	@ 0x28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a19      	ldr	r2, [pc, #100]	@ (8002770 <HAL_I2C_MspInit+0x84>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d12b      	bne.n	8002766 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <HAL_I2C_MspInit+0x88>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	4a17      	ldr	r2, [pc, #92]	@ (8002774 <HAL_I2C_MspInit+0x88>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6313      	str	r3, [r2, #48]	@ 0x30
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <HAL_I2C_MspInit+0x88>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800272a:	23c0      	movs	r3, #192	@ 0xc0
 800272c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272e:	2312      	movs	r3, #18
 8002730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800273a:	2304      	movs	r3, #4
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273e:	f107 0314 	add.w	r3, r7, #20
 8002742:	4619      	mov	r1, r3
 8002744:	480c      	ldr	r0, [pc, #48]	@ (8002778 <HAL_I2C_MspInit+0x8c>)
 8002746:	f001 f83d 	bl	80037c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b09      	ldr	r3, [pc, #36]	@ (8002774 <HAL_I2C_MspInit+0x88>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a08      	ldr	r2, [pc, #32]	@ (8002774 <HAL_I2C_MspInit+0x88>)
 8002754:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_I2C_MspInit+0x88>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002766:	bf00      	nop
 8002768:	3728      	adds	r7, #40	@ 0x28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40005400 	.word	0x40005400
 8002774:	40023800 	.word	0x40023800
 8002778:	40020400 	.word	0x40020400

0800277c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	4a26      	ldr	r2, [pc, #152]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6413      	str	r3, [r2, #64]	@ 0x40
 800279e:	4b24      	ldr	r3, [pc, #144]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80027aa:	e03a      	b.n	8002822 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a20      	ldr	r2, [pc, #128]	@ (8002834 <HAL_TIM_PWM_MspInit+0xb8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	4a1c      	ldr	r2, [pc, #112]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
}
 80027d2:	e026      	b.n	8002822 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_TIM_PWM_MspInit+0xbc>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10e      	bne.n	80027fc <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
}
 80027fa:	e012      	b.n	8002822 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM5)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0e      	ldr	r2, [pc, #56]	@ (800283c <HAL_TIM_PWM_MspInit+0xc0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10d      	bne.n	8002822 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	4a08      	ldr	r2, [pc, #32]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6413      	str	r3, [r2, #64]	@ 0x40
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_TIM_PWM_MspInit+0xb4>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800
 800283c:	40000c00 	.word	0x40000c00

08002840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08c      	sub	sp, #48	@ 0x30
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 031c 	add.w	r3, r7, #28
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002860:	d11e      	bne.n	80028a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	4b55      	ldr	r3, [pc, #340]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6313      	str	r3, [r2, #48]	@ 0x30
 8002872:	4b52      	ldr	r3, [pc, #328]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 800287e:	232e      	movs	r3, #46	@ 0x2e
 8002880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800288e:	2301      	movs	r3, #1
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	4619      	mov	r1, r3
 8002898:	4849      	ldr	r0, [pc, #292]	@ (80029c0 <HAL_TIM_MspPostInit+0x180>)
 800289a:	f000 ff93 	bl	80037c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800289e:	e089      	b.n	80029b4 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a47      	ldr	r2, [pc, #284]	@ (80029c4 <HAL_TIM_MspPostInit+0x184>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d13c      	bne.n	8002924 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	4b43      	ldr	r3, [pc, #268]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a42      	ldr	r2, [pc, #264]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b40      	ldr	r3, [pc, #256]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	4b3c      	ldr	r3, [pc, #240]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4a3b      	ldr	r2, [pc, #236]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028e2:	23c0      	movs	r3, #192	@ 0xc0
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028f2:	2302      	movs	r3, #2
 80028f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	4830      	ldr	r0, [pc, #192]	@ (80029c0 <HAL_TIM_MspPostInit+0x180>)
 80028fe:	f000 ff61 	bl	80037c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002902:	2303      	movs	r3, #3
 8002904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002912:	2302      	movs	r3, #2
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	4619      	mov	r1, r3
 800291c:	482a      	ldr	r0, [pc, #168]	@ (80029c8 <HAL_TIM_MspPostInit+0x188>)
 800291e:	f000 ff51 	bl	80037c4 <HAL_GPIO_Init>
}
 8002922:	e047      	b.n	80029b4 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM4)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a28      	ldr	r2, [pc, #160]	@ (80029cc <HAL_TIM_MspPostInit+0x18c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d11f      	bne.n	800296e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b1f      	ldr	r3, [pc, #124]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800294a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800294e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800295c:	2302      	movs	r3, #2
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	481a      	ldr	r0, [pc, #104]	@ (80029d0 <HAL_TIM_MspPostInit+0x190>)
 8002968:	f000 ff2c 	bl	80037c4 <HAL_GPIO_Init>
}
 800296c:	e022      	b.n	80029b4 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM5)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a18      	ldr	r2, [pc, #96]	@ (80029d4 <HAL_TIM_MspPostInit+0x194>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d11d      	bne.n	80029b4 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002980:	4a0e      	ldr	r2, [pc, #56]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6313      	str	r3, [r2, #48]	@ 0x30
 8002988:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <HAL_TIM_MspPostInit+0x17c>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002994:	2301      	movs	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029a4:	2302      	movs	r3, #2
 80029a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	4619      	mov	r1, r3
 80029ae:	4804      	ldr	r0, [pc, #16]	@ (80029c0 <HAL_TIM_MspPostInit+0x180>)
 80029b0:	f000 ff08 	bl	80037c4 <HAL_GPIO_Init>
}
 80029b4:	bf00      	nop
 80029b6:	3730      	adds	r7, #48	@ 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40020400 	.word	0x40020400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40020c00 	.word	0x40020c00
 80029d4:	40000c00 	.word	0x40000c00

080029d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	@ 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002b28 <HAL_UART_MspInit+0x150>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	f040 8091 	bne.w	8002b1e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	4b4a      	ldr	r3, [pc, #296]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a04:	4a49      	ldr	r2, [pc, #292]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0c:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a20:	4a42      	ldr	r2, [pc, #264]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a28:	4b40      	ldr	r3, [pc, #256]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8002a34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a42:	2302      	movs	r3, #2
 8002a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a46:	2307      	movs	r3, #7
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4837      	ldr	r0, [pc, #220]	@ (8002b30 <HAL_UART_MspInit+0x158>)
 8002a52:	f000 feb7 	bl	80037c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002a56:	4b37      	ldr	r3, [pc, #220]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a58:	4a37      	ldr	r2, [pc, #220]	@ (8002b38 <HAL_UART_MspInit+0x160>)
 8002a5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002a5c:	4b35      	ldr	r3, [pc, #212]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a62:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a64:	4b33      	ldr	r3, [pc, #204]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6a:	4b32      	ldr	r3, [pc, #200]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a70:	4b30      	ldr	r3, [pc, #192]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a76:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a78:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002a84:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a90:	4b28      	ldr	r3, [pc, #160]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a96:	4827      	ldr	r0, [pc, #156]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a98:	f000 fa86 	bl	8002fa8 <HAL_DMA_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002aa2:	f7ff fdf5 	bl	8002690 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002aac:	4a21      	ldr	r2, [pc, #132]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002ab2:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ab4:	4a22      	ldr	r2, [pc, #136]	@ (8002b40 <HAL_UART_MspInit+0x168>)
 8002ab6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002ab8:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002aba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002abe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ac2:	2240      	movs	r2, #64	@ 0x40
 8002ac4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ad2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ada:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ae0:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002af2:	4812      	ldr	r0, [pc, #72]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002af4:	f000 fa58 	bl	8002fa8 <HAL_DMA_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002afe:	f7ff fdc7 	bl	8002690 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a0d      	ldr	r2, [pc, #52]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002b06:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b08:	4a0c      	ldr	r2, [pc, #48]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2025      	movs	r0, #37	@ 0x25
 8002b14:	f000 fa11 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b18:	2025      	movs	r0, #37	@ 0x25
 8002b1a:	f000 fa2a 	bl	8002f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	@ 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40011000 	.word	0x40011000
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	20000248 	.word	0x20000248
 8002b38:	40026440 	.word	0x40026440
 8002b3c:	200002a8 	.word	0x200002a8
 8002b40:	400264b8 	.word	0x400264b8

08002b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <NMI_Handler+0x4>

08002b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <HardFault_Handler+0x4>

08002b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <MemManage_Handler+0x4>

08002b5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <BusFault_Handler+0x4>

08002b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b68:	bf00      	nop
 8002b6a:	e7fd      	b.n	8002b68 <UsageFault_Handler+0x4>

08002b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b9a:	f000 f8af 	bl	8002cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ba8:	4802      	ldr	r0, [pc, #8]	@ (8002bb4 <USART1_IRQHandler+0x10>)
 8002baa:	f003 fbb3 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000200 	.word	0x20000200

08002bb8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bbc:	4802      	ldr	r0, [pc, #8]	@ (8002bc8 <DMA2_Stream2_IRQHandler+0x10>)
 8002bbe:	f000 fb8b 	bl	80032d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000248 	.word	0x20000248

08002bcc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <DMA2_Stream7_IRQHandler+0x10>)
 8002bd2:	f000 fb81 	bl	80032d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200002a8 	.word	0x200002a8

08002be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be4:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <SystemInit+0x20>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bea:	4a05      	ldr	r2, [pc, #20]	@ (8002c00 <SystemInit+0x20>)
 8002bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c08:	480d      	ldr	r0, [pc, #52]	@ (8002c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c0a:	490e      	ldr	r1, [pc, #56]	@ (8002c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c10:	e002      	b.n	8002c18 <LoopCopyDataInit>

08002c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c16:	3304      	adds	r3, #4

08002c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c1c:	d3f9      	bcc.n	8002c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c20:	4c0b      	ldr	r4, [pc, #44]	@ (8002c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c24:	e001      	b.n	8002c2a <LoopFillZerobss>

08002c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c28:	3204      	adds	r2, #4

08002c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c2c:	d3fb      	bcc.n	8002c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c2e:	f7ff ffd7 	bl	8002be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c32:	f004 fcd1 	bl	80075d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c36:	f7ff f9d5 	bl	8001fe4 <main>
  bx  lr    
 8002c3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002c48:	080093a0 	.word	0x080093a0
  ldr r2, =_sbss
 8002c4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002c50:	20000448 	.word	0x20000448

08002c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c54:	e7fe      	b.n	8002c54 <ADC_IRQHandler>
	...

08002c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <HAL_Init+0x40>)
 8002c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <HAL_Init+0x40>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c74:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	@ (8002c98 <HAL_Init+0x40>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c80:	2003      	movs	r0, #3
 8002c82:	f000 f94f 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c86:	200f      	movs	r0, #15
 8002c88:	f000 f808 	bl	8002c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c8c:	f7ff fd06 	bl	800269c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca4:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <HAL_InitTick+0x54>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <HAL_InitTick+0x58>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f967 	bl	8002f8e <HAL_SYSTICK_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00e      	b.n	8002ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d80a      	bhi.n	8002ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f000 f92f 	bl	8002f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cdc:	4a06      	ldr	r2, [pc, #24]	@ (8002cf8 <HAL_InitTick+0x5c>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000004 	.word	0x20000004
 8002cf4:	2000000c 	.word	0x2000000c
 8002cf8:	20000008 	.word	0x20000008

08002cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_IncTick+0x20>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	2000000c 	.word	0x2000000c
 8002d20:	2000030c 	.word	0x2000030c

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <HAL_GetTick+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	2000030c 	.word	0x2000030c

08002d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff ffee 	bl	8002d24 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d005      	beq.n	8002d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_Delay+0x44>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d62:	bf00      	nop
 8002d64:	f7ff ffde 	bl	8002d24 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d8f7      	bhi.n	8002d64 <HAL_Delay+0x28>
  {
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000000c 	.word	0x2000000c

08002d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d94:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db6:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60d3      	str	r3, [r2, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd0:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 0307 	and.w	r3, r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4907      	ldr	r1, [pc, #28]	@ (8002e20 <__NVIC_EnableIRQ+0x38>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100

08002e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	db0a      	blt.n	8002e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	490c      	ldr	r1, [pc, #48]	@ (8002e70 <__NVIC_SetPriority+0x4c>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	440b      	add	r3, r1
 8002e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e4c:	e00a      	b.n	8002e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4908      	ldr	r1, [pc, #32]	@ (8002e74 <__NVIC_SetPriority+0x50>)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	440b      	add	r3, r1
 8002e62:	761a      	strb	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000e100 	.word	0xe000e100
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	@ 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f1c3 0307 	rsb	r3, r3, #7
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf28      	it	cs
 8002e96:	2304      	movcs	r3, #4
 8002e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d902      	bls.n	8002ea8 <NVIC_EncodePriority+0x30>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3b03      	subs	r3, #3
 8002ea6:	e000      	b.n	8002eaa <NVIC_EncodePriority+0x32>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	401a      	ands	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	43d9      	mvns	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	4313      	orrs	r3, r2
         );
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef0:	d301      	bcc.n	8002ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <SysTick_Config+0x40>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efe:	210f      	movs	r1, #15
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	f7ff ff8e 	bl	8002e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <SysTick_Config+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <SysTick_Config+0x40>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff29 	bl	8002d84 <__NVIC_SetPriorityGrouping>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4c:	f7ff ff3e 	bl	8002dcc <__NVIC_GetPriorityGrouping>
 8002f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f7ff ff8e 	bl	8002e78 <NVIC_EncodePriority>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff5d 	bl	8002e24 <__NVIC_SetPriority>
}
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff31 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffa2 	bl	8002ee0 <SysTick_Config>
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff feb6 	bl	8002d24 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e099      	b.n	80030f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe4:	e00f      	b.n	8003006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fe6:	f7ff fe9d 	bl	8002d24 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d908      	bls.n	8003006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e078      	b.n	80030f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e8      	bne.n	8002fe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4b38      	ldr	r3, [pc, #224]	@ (8003100 <HAL_DMA_Init+0x158>)
 8003020:	4013      	ands	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	4313      	orrs	r3, r2
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0307 	bic.w	r3, r3, #7
 8003086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	2b04      	cmp	r3, #4
 8003098:	d117      	bne.n	80030ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00e      	beq.n	80030ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fb0d 	bl	80036cc <DMA_CheckFifoParam>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2240      	movs	r2, #64	@ 0x40
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030c6:	2301      	movs	r3, #1
 80030c8:	e016      	b.n	80030f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fac4 	bl	8003660 <DMA_CalcBaseAndBitshift>
 80030d8:	4603      	mov	r3, r0
 80030da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e0:	223f      	movs	r2, #63	@ 0x3f
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	f010803f 	.word	0xf010803f

08003104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_DMA_Start_IT+0x26>
 8003126:	2302      	movs	r3, #2
 8003128:	e040      	b.n	80031ac <HAL_DMA_Start_IT+0xa8>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d12f      	bne.n	800319e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fa56 	bl	8003604 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315c:	223f      	movs	r2, #63	@ 0x3f
 800315e:	409a      	lsls	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0216 	orr.w	r2, r2, #22
 8003172:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0208 	orr.w	r2, r2, #8
 800318a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e005      	b.n	80031aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
 80031a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031c2:	f7ff fdaf 	bl	8002d24 <HAL_GetTick>
 80031c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d008      	beq.n	80031e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2280      	movs	r2, #128	@ 0x80
 80031d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e052      	b.n	800328c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0216 	bic.w	r2, r2, #22
 80031f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_DMA_Abort+0x62>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0208 	bic.w	r2, r2, #8
 8003224:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003236:	e013      	b.n	8003260 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003238:	f7ff fd74 	bl	8002d24 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b05      	cmp	r3, #5
 8003244:	d90c      	bls.n	8003260 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2203      	movs	r2, #3
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e015      	b.n	800328c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e4      	bne.n	8003238 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	223f      	movs	r2, #63	@ 0x3f
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d004      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2280      	movs	r2, #128	@ 0x80
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00c      	b.n	80032cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2205      	movs	r2, #5
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003520 <HAL_DMA_IRQHandler+0x248>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a8e      	ldr	r2, [pc, #568]	@ (8003524 <HAL_DMA_IRQHandler+0x24c>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0a9b      	lsrs	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003302:	2208      	movs	r2, #8
 8003304:	409a      	lsls	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01a      	beq.n	8003344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0204 	bic.w	r2, r2, #4
 800332a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	2208      	movs	r2, #8
 8003332:	409a      	lsls	r2, r3
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003348:	2201      	movs	r2, #1
 800334a:	409a      	lsls	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d012      	beq.n	800337a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	2201      	movs	r2, #1
 8003368:	409a      	lsls	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003372:	f043 0202 	orr.w	r2, r3, #2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337e:	2204      	movs	r2, #4
 8003380:	409a      	lsls	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d012      	beq.n	80033b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	2204      	movs	r2, #4
 800339e:	409a      	lsls	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	2210      	movs	r2, #16
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d043      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d03c      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d2:	2210      	movs	r2, #16
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d018      	beq.n	800341a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d024      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
 8003406:	e01f      	b.n	8003448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
 8003418:	e016      	b.n	8003448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0208 	bic.w	r2, r2, #8
 8003436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	2220      	movs	r2, #32
 800344e:	409a      	lsls	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 808f 	beq.w	8003578 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8087 	beq.w	8003578 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	2220      	movs	r2, #32
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b05      	cmp	r3, #5
 8003480:	d136      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0216 	bic.w	r2, r2, #22
 8003490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_DMA_IRQHandler+0x1da>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0208 	bic.w	r2, r2, #8
 80034c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	223f      	movs	r2, #63	@ 0x3f
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d07e      	beq.n	80035e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
        }
        return;
 80034ee:	e079      	b.n	80035e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01d      	beq.n	800353a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	2b00      	cmp	r3, #0
 8003512:	d031      	beq.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	4798      	blx	r3
 800351c:	e02c      	b.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
 800351e:	bf00      	nop
 8003520:	20000004 	.word	0x20000004
 8003524:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d023      	beq.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
 8003538:	e01e      	b.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10f      	bne.n	8003568 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0210 	bic.w	r2, r2, #16
 8003556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357c:	2b00      	cmp	r3, #0
 800357e:	d032      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d022      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2205      	movs	r2, #5
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	3301      	adds	r3, #1
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d307      	bcc.n	80035c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f2      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x2cc>
 80035be:	e000      	b.n	80035c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
 80035e2:	e000      	b.n	80035e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035e4:	bf00      	nop
    }
  }
}
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003620:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b40      	cmp	r3, #64	@ 0x40
 8003630:	d108      	bne.n	8003644 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003642:	e007      	b.n	8003654 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	3b10      	subs	r3, #16
 8003670:	4a14      	ldr	r2, [pc, #80]	@ (80036c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800367a:	4a13      	ldr	r2, [pc, #76]	@ (80036c8 <DMA_CalcBaseAndBitshift+0x68>)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d909      	bls.n	80036a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	659a      	str	r2, [r3, #88]	@ 0x58
 80036a0:	e007      	b.n	80036b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	aaaaaaab 	.word	0xaaaaaaab
 80036c8:	08009310 	.word	0x08009310

080036cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d11f      	bne.n	8003726 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d856      	bhi.n	800379a <DMA_CheckFifoParam+0xce>
 80036ec:	a201      	add	r2, pc, #4	@ (adr r2, 80036f4 <DMA_CheckFifoParam+0x28>)
 80036ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f2:	bf00      	nop
 80036f4:	08003705 	.word	0x08003705
 80036f8:	08003717 	.word	0x08003717
 80036fc:	08003705 	.word	0x08003705
 8003700:	0800379b 	.word	0x0800379b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d046      	beq.n	800379e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003714:	e043      	b.n	800379e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800371e:	d140      	bne.n	80037a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003724:	e03d      	b.n	80037a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372e:	d121      	bne.n	8003774 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b03      	cmp	r3, #3
 8003734:	d837      	bhi.n	80037a6 <DMA_CheckFifoParam+0xda>
 8003736:	a201      	add	r2, pc, #4	@ (adr r2, 800373c <DMA_CheckFifoParam+0x70>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	0800374d 	.word	0x0800374d
 8003740:	08003753 	.word	0x08003753
 8003744:	0800374d 	.word	0x0800374d
 8003748:	08003765 	.word	0x08003765
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e030      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003756:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d025      	beq.n	80037aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003762:	e022      	b.n	80037aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800376c:	d11f      	bne.n	80037ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003772:	e01c      	b.n	80037ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d903      	bls.n	8003782 <DMA_CheckFifoParam+0xb6>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d003      	beq.n	8003788 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003780:	e018      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
      break;
 8003786:	e015      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00e      	beq.n	80037b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
      break;
 8003798:	e00b      	b.n	80037b2 <DMA_CheckFifoParam+0xe6>
      break;
 800379a:	bf00      	nop
 800379c:	e00a      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e008      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e006      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e004      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037aa:	bf00      	nop
 80037ac:	e002      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
    }
  } 
  
  return status; 
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop

080037c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	@ 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e16b      	b.n	8003ab8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e0:	2201      	movs	r2, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f040 815a 	bne.w	8003ab2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d005      	beq.n	8003816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003812:	2b02      	cmp	r3, #2
 8003814:	d130      	bne.n	8003878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 0201 	and.w	r2, r3, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b03      	cmp	r3, #3
 8003882:	d017      	beq.n	80038b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d123      	bne.n	8003908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	08da      	lsrs	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3208      	adds	r2, #8
 80038c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	220f      	movs	r2, #15
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	08da      	lsrs	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3208      	adds	r2, #8
 8003902:	69b9      	ldr	r1, [r7, #24]
 8003904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	2203      	movs	r2, #3
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0203 	and.w	r2, r3, #3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80b4 	beq.w	8003ab2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b60      	ldr	r3, [pc, #384]	@ (8003ad0 <HAL_GPIO_Init+0x30c>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad0 <HAL_GPIO_Init+0x30c>)
 8003954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003958:	6453      	str	r3, [r2, #68]	@ 0x44
 800395a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad0 <HAL_GPIO_Init+0x30c>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003966:	4a5b      	ldr	r2, [pc, #364]	@ (8003ad4 <HAL_GPIO_Init+0x310>)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a52      	ldr	r2, [pc, #328]	@ (8003ad8 <HAL_GPIO_Init+0x314>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d02b      	beq.n	80039ea <HAL_GPIO_Init+0x226>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a51      	ldr	r2, [pc, #324]	@ (8003adc <HAL_GPIO_Init+0x318>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d025      	beq.n	80039e6 <HAL_GPIO_Init+0x222>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a50      	ldr	r2, [pc, #320]	@ (8003ae0 <HAL_GPIO_Init+0x31c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01f      	beq.n	80039e2 <HAL_GPIO_Init+0x21e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4f      	ldr	r2, [pc, #316]	@ (8003ae4 <HAL_GPIO_Init+0x320>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d019      	beq.n	80039de <HAL_GPIO_Init+0x21a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4e      	ldr	r2, [pc, #312]	@ (8003ae8 <HAL_GPIO_Init+0x324>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <HAL_GPIO_Init+0x216>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4d      	ldr	r2, [pc, #308]	@ (8003aec <HAL_GPIO_Init+0x328>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00d      	beq.n	80039d6 <HAL_GPIO_Init+0x212>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4c      	ldr	r2, [pc, #304]	@ (8003af0 <HAL_GPIO_Init+0x32c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <HAL_GPIO_Init+0x20e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a4b      	ldr	r2, [pc, #300]	@ (8003af4 <HAL_GPIO_Init+0x330>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d101      	bne.n	80039ce <HAL_GPIO_Init+0x20a>
 80039ca:	2307      	movs	r3, #7
 80039cc:	e00e      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039ce:	2308      	movs	r3, #8
 80039d0:	e00c      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039d2:	2306      	movs	r3, #6
 80039d4:	e00a      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039d6:	2305      	movs	r3, #5
 80039d8:	e008      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039da:	2304      	movs	r3, #4
 80039dc:	e006      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039de:	2303      	movs	r3, #3
 80039e0:	e004      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x228>
 80039ea:	2300      	movs	r3, #0
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	f002 0203 	and.w	r2, r2, #3
 80039f2:	0092      	lsls	r2, r2, #2
 80039f4:	4093      	lsls	r3, r2
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039fc:	4935      	ldr	r1, [pc, #212]	@ (8003ad4 <HAL_GPIO_Init+0x310>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	3302      	adds	r3, #2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003af8 <HAL_GPIO_Init+0x334>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2e:	4a32      	ldr	r2, [pc, #200]	@ (8003af8 <HAL_GPIO_Init+0x334>)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a34:	4b30      	ldr	r3, [pc, #192]	@ (8003af8 <HAL_GPIO_Init+0x334>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a58:	4a27      	ldr	r2, [pc, #156]	@ (8003af8 <HAL_GPIO_Init+0x334>)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5e:	4b26      	ldr	r3, [pc, #152]	@ (8003af8 <HAL_GPIO_Init+0x334>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a82:	4a1d      	ldr	r2, [pc, #116]	@ (8003af8 <HAL_GPIO_Init+0x334>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <HAL_GPIO_Init+0x334>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aac:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <HAL_GPIO_Init+0x334>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	f67f ae90 	bls.w	80037e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3724      	adds	r7, #36	@ 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40013800 	.word	0x40013800
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	40020400 	.word	0x40020400
 8003ae0:	40020800 	.word	0x40020800
 8003ae4:	40020c00 	.word	0x40020c00
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40021400 	.word	0x40021400
 8003af0:	40021800 	.word	0x40021800
 8003af4:	40021c00 	.word	0x40021c00
 8003af8:	40013c00 	.word	0x40013c00

08003afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e12b      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fe fde2 	bl	80026ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	@ 0x24
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b60:	f001 fc20 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 8003b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a81      	ldr	r2, [pc, #516]	@ (8003d70 <HAL_I2C_Init+0x274>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d807      	bhi.n	8003b80 <HAL_I2C_Init+0x84>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a80      	ldr	r2, [pc, #512]	@ (8003d74 <HAL_I2C_Init+0x278>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bf94      	ite	ls
 8003b78:	2301      	movls	r3, #1
 8003b7a:	2300      	movhi	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e006      	b.n	8003b8e <HAL_I2C_Init+0x92>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a7d      	ldr	r2, [pc, #500]	@ (8003d78 <HAL_I2C_Init+0x27c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	bf94      	ite	ls
 8003b88:	2301      	movls	r3, #1
 8003b8a:	2300      	movhi	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0e7      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a78      	ldr	r2, [pc, #480]	@ (8003d7c <HAL_I2C_Init+0x280>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0c9b      	lsrs	r3, r3, #18
 8003ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a6a      	ldr	r2, [pc, #424]	@ (8003d70 <HAL_I2C_Init+0x274>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d802      	bhi.n	8003bd0 <HAL_I2C_Init+0xd4>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	e009      	b.n	8003be4 <HAL_I2C_Init+0xe8>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	4a69      	ldr	r2, [pc, #420]	@ (8003d80 <HAL_I2C_Init+0x284>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	3301      	adds	r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	495c      	ldr	r1, [pc, #368]	@ (8003d70 <HAL_I2C_Init+0x274>)
 8003c00:	428b      	cmp	r3, r1
 8003c02:	d819      	bhi.n	8003c38 <HAL_I2C_Init+0x13c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e59      	subs	r1, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c12:	1c59      	adds	r1, r3, #1
 8003c14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c18:	400b      	ands	r3, r1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_I2C_Init+0x138>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1e59      	subs	r1, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	e051      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c34:	2304      	movs	r3, #4
 8003c36:	e04f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d111      	bne.n	8003c64 <HAL_I2C_Init+0x168>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e012      	b.n	8003c8a <HAL_I2C_Init+0x18e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	0099      	lsls	r1, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Init+0x196>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e022      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10e      	bne.n	8003cb8 <HAL_I2C_Init+0x1bc>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1e58      	subs	r0, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	440b      	add	r3, r1
 8003ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cb6:	e00f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e58      	subs	r0, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	0099      	lsls	r1, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	6809      	ldr	r1, [r1, #0]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6911      	ldr	r1, [r2, #16]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68d2      	ldr	r2, [r2, #12]
 8003d12:	4311      	orrs	r1, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	000186a0 	.word	0x000186a0
 8003d74:	001e847f 	.word	0x001e847f
 8003d78:	003d08ff 	.word	0x003d08ff
 8003d7c:	431bde83 	.word	0x431bde83
 8003d80:	10624dd3 	.word	0x10624dd3

08003d84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	461a      	mov	r2, r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	817b      	strh	r3, [r7, #10]
 8003d96:	460b      	mov	r3, r1
 8003d98:	813b      	strh	r3, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d9e:	f7fe ffc1 	bl	8002d24 <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	f040 80d9 	bne.w	8003f64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2319      	movs	r3, #25
 8003db8:	2201      	movs	r2, #1
 8003dba:	496d      	ldr	r1, [pc, #436]	@ (8003f70 <HAL_I2C_Mem_Write+0x1ec>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fc8b 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0cc      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_I2C_Mem_Write+0x56>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e0c5      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d007      	beq.n	8003e00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2221      	movs	r2, #33	@ 0x21
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2240      	movs	r2, #64	@ 0x40
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003f74 <HAL_I2C_Mem_Write+0x1f0>)
 8003e40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e42:	88f8      	ldrh	r0, [r7, #6]
 8003e44:	893a      	ldrh	r2, [r7, #8]
 8003e46:	8979      	ldrh	r1, [r7, #10]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	4603      	mov	r3, r0
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fac2 	bl	80043dc <I2C_RequestMemoryWrite>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d052      	beq.n	8003f04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e081      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fd50 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d107      	bne.n	8003e8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e06b      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d11b      	bne.n	8003f04 <HAL_I2C_Mem_Write+0x180>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d017      	beq.n	8003f04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1aa      	bne.n	8003e62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fd43 	bl	800499c <I2C_WaitOnBTFFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e016      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	00100002 	.word	0x00100002
 8003f74:	ffff0000 	.word	0xffff0000

08003f78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08c      	sub	sp, #48	@ 0x30
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	4608      	mov	r0, r1
 8003f82:	4611      	mov	r1, r2
 8003f84:	461a      	mov	r2, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	817b      	strh	r3, [r7, #10]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	813b      	strh	r3, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f92:	f7fe fec7 	bl	8002d24 <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	f040 8214 	bne.w	80043ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2319      	movs	r3, #25
 8003fac:	2201      	movs	r2, #1
 8003fae:	497b      	ldr	r1, [pc, #492]	@ (800419c <HAL_I2C_Mem_Read+0x224>)
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fb91 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e207      	b.n	80043d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_I2C_Mem_Read+0x56>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e200      	b.n	80043d0 <HAL_I2C_Mem_Read+0x458>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d007      	beq.n	8003ff4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2222      	movs	r2, #34	@ 0x22
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2240      	movs	r2, #64	@ 0x40
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800401e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004024:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a5b      	ldr	r2, [pc, #364]	@ (80041a0 <HAL_I2C_Mem_Read+0x228>)
 8004034:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004036:	88f8      	ldrh	r0, [r7, #6]
 8004038:	893a      	ldrh	r2, [r7, #8]
 800403a:	8979      	ldrh	r1, [r7, #10]
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4603      	mov	r3, r0
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fa5e 	bl	8004508 <I2C_RequestMemoryRead>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e1bc      	b.n	80043d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405a:	2b00      	cmp	r3, #0
 800405c:	d113      	bne.n	8004086 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e190      	b.n	80043a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408a:	2b01      	cmp	r3, #1
 800408c:	d11b      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800409c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e170      	b.n	80043a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d11b      	bne.n	8004106 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	e150      	b.n	80043a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800411c:	e144      	b.n	80043a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	2b03      	cmp	r3, #3
 8004124:	f200 80f1 	bhi.w	800430a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800412c:	2b01      	cmp	r3, #1
 800412e:	d123      	bne.n	8004178 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004132:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fc79 	bl	8004a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e145      	b.n	80043d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004176:	e117      	b.n	80043a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417c:	2b02      	cmp	r3, #2
 800417e:	d14e      	bne.n	800421e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004186:	2200      	movs	r2, #0
 8004188:	4906      	ldr	r1, [pc, #24]	@ (80041a4 <HAL_I2C_Mem_Read+0x22c>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 faa4 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e11a      	b.n	80043d0 <HAL_I2C_Mem_Read+0x458>
 800419a:	bf00      	nop
 800419c:	00100002 	.word	0x00100002
 80041a0:	ffff0000 	.word	0xffff0000
 80041a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800421c:	e0c4      	b.n	80043a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004224:	2200      	movs	r2, #0
 8004226:	496c      	ldr	r1, [pc, #432]	@ (80043d8 <HAL_I2C_Mem_Read+0x460>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fa55 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0cb      	b.n	80043d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004280:	2200      	movs	r2, #0
 8004282:	4955      	ldr	r1, [pc, #340]	@ (80043d8 <HAL_I2C_Mem_Read+0x460>)
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fa27 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e09d      	b.n	80043d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004308:	e04e      	b.n	80043a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fb8c 	bl	8004a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e058      	b.n	80043d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	3b01      	subs	r3, #1
 800434a:	b29a      	uxth	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b04      	cmp	r3, #4
 800435c:	d124      	bne.n	80043a8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004362:	2b03      	cmp	r3, #3
 8004364:	d107      	bne.n	8004376 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004374:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f47f aeb6 	bne.w	800411e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
  }
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3728      	adds	r7, #40	@ 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	00010004 	.word	0x00010004

080043dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	4608      	mov	r0, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	461a      	mov	r2, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	817b      	strh	r3, [r7, #10]
 80043ee:	460b      	mov	r3, r1
 80043f0:	813b      	strh	r3, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004404:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2200      	movs	r2, #0
 800440e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f960 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442c:	d103      	bne.n	8004436 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004434:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e05f      	b.n	80044fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800443a:	897b      	ldrh	r3, [r7, #10]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004448:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	6a3a      	ldr	r2, [r7, #32]
 800444e:	492d      	ldr	r1, [pc, #180]	@ (8004504 <I2C_RequestMemoryWrite+0x128>)
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f9bb 	bl	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e04c      	b.n	80044fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004478:	6a39      	ldr	r1, [r7, #32]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa46 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	2b04      	cmp	r3, #4
 800448c:	d107      	bne.n	800449e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800449c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e02b      	b.n	80044fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d105      	bne.n	80044b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a8:	893b      	ldrh	r3, [r7, #8]
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	611a      	str	r2, [r3, #16]
 80044b2:	e021      	b.n	80044f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044b4:	893b      	ldrh	r3, [r7, #8]
 80044b6:	0a1b      	lsrs	r3, r3, #8
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c4:	6a39      	ldr	r1, [r7, #32]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fa20 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d107      	bne.n	80044ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e005      	b.n	80044fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ee:	893b      	ldrh	r3, [r7, #8]
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	00010002 	.word	0x00010002

08004508 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	4608      	mov	r0, r1
 8004512:	4611      	mov	r1, r2
 8004514:	461a      	mov	r2, r3
 8004516:	4603      	mov	r3, r0
 8004518:	817b      	strh	r3, [r7, #10]
 800451a:	460b      	mov	r3, r1
 800451c:	813b      	strh	r3, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004530:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004540:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	2200      	movs	r2, #0
 800454a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f8c2 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004568:	d103      	bne.n	8004572 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004570:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e0aa      	b.n	80046cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004584:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	4952      	ldr	r1, [pc, #328]	@ (80046d4 <I2C_RequestMemoryRead+0x1cc>)
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f91d 	bl	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e097      	b.n	80046cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b4:	6a39      	ldr	r1, [r7, #32]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f9a8 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d107      	bne.n	80045da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e076      	b.n	80046cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045e4:	893b      	ldrh	r3, [r7, #8]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	611a      	str	r2, [r3, #16]
 80045ee:	e021      	b.n	8004634 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045f0:	893b      	ldrh	r3, [r7, #8]
 80045f2:	0a1b      	lsrs	r3, r3, #8
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004600:	6a39      	ldr	r1, [r7, #32]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f982 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00d      	beq.n	800462a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	2b04      	cmp	r3, #4
 8004614:	d107      	bne.n	8004626 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004624:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e050      	b.n	80046cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800462a:	893b      	ldrh	r3, [r7, #8]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004636:	6a39      	ldr	r1, [r7, #32]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f967 	bl	800490c <I2C_WaitOnTXEFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00d      	beq.n	8004660 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	2b04      	cmp	r3, #4
 800464a:	d107      	bne.n	800465c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e035      	b.n	80046cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800466e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	2200      	movs	r2, #0
 8004678:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f82b 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004696:	d103      	bne.n	80046a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800469e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e013      	b.n	80046cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046a4:	897b      	ldrh	r3, [r7, #10]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	6a3a      	ldr	r2, [r7, #32]
 80046b8:	4906      	ldr	r1, [pc, #24]	@ (80046d4 <I2C_RequestMemoryRead+0x1cc>)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f886 	bl	80047cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	00010002 	.word	0x00010002

080046d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e8:	e048      	b.n	800477c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d044      	beq.n	800477c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f2:	f7fe fb17 	bl	8002d24 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d302      	bcc.n	8004708 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d139      	bne.n	800477c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	0c1b      	lsrs	r3, r3, #16
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d10d      	bne.n	800472e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	43da      	mvns	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4013      	ands	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	e00c      	b.n	8004748 <I2C_WaitOnFlagUntilTimeout+0x70>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	43da      	mvns	r2, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	429a      	cmp	r2, r3
 800474c:	d116      	bne.n	800477c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e023      	b.n	80047c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10d      	bne.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	43da      	mvns	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	e00c      	b.n	80047bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	43da      	mvns	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4013      	ands	r3, r2
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d093      	beq.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047da:	e071      	b.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ea:	d123      	bne.n	8004834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004804:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004820:	f043 0204 	orr.w	r2, r3, #4
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e067      	b.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d041      	beq.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483c:	f7fe fa72 	bl	8002d24 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d136      	bne.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10c      	bne.n	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	43da      	mvns	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e00b      	b.n	800488e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	43da      	mvns	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d016      	beq.n	80048c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e021      	b.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	0c1b      	lsrs	r3, r3, #16
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10c      	bne.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4013      	ands	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	e00b      	b.n	80048fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	43da      	mvns	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4013      	ands	r3, r2
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bf14      	ite	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	2300      	moveq	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f47f af6d 	bne.w	80047dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004918:	e034      	b.n	8004984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f8e3 	bl	8004ae6 <I2C_IsAcknowledgeFailed>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e034      	b.n	8004994 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d028      	beq.n	8004984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fe f9f7 	bl	8002d24 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11d      	bne.n	8004984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004952:	2b80      	cmp	r3, #128	@ 0x80
 8004954:	d016      	beq.n	8004984 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	f043 0220 	orr.w	r2, r3, #32
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e007      	b.n	8004994 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	2b80      	cmp	r3, #128	@ 0x80
 8004990:	d1c3      	bne.n	800491a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049a8:	e034      	b.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f89b 	bl	8004ae6 <I2C_IsAcknowledgeFailed>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e034      	b.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d028      	beq.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c2:	f7fe f9af 	bl	8002d24 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d302      	bcc.n	80049d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d11d      	bne.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d016      	beq.n	8004a14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e007      	b.n	8004a24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d1c3      	bne.n	80049aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a38:	e049      	b.n	8004ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d119      	bne.n	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0210 	mvn.w	r2, #16
 8004a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e030      	b.n	8004ade <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7c:	f7fe f952 	bl	8002d24 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11d      	bne.n	8004ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9c:	2b40      	cmp	r3, #64	@ 0x40
 8004a9e:	d016      	beq.n	8004ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e007      	b.n	8004ade <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b40      	cmp	r3, #64	@ 0x40
 8004ada:	d1ae      	bne.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afc:	d11b      	bne.n	8004b36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	f043 0204 	orr.w	r2, r3, #4
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e267      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d075      	beq.n	8004c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b62:	4b88      	ldr	r3, [pc, #544]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d00c      	beq.n	8004b88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b6e:	4b85      	ldr	r3, [pc, #532]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d112      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b7a:	4b82      	ldr	r3, [pc, #520]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b86:	d10b      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b88:	4b7e      	ldr	r3, [pc, #504]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d05b      	beq.n	8004c4c <HAL_RCC_OscConfig+0x108>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d157      	bne.n	8004c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e242      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba8:	d106      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x74>
 8004baa:	4b76      	ldr	r3, [pc, #472]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a75      	ldr	r2, [pc, #468]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e01d      	b.n	8004bf4 <HAL_RCC_OscConfig+0xb0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x98>
 8004bc2:	4b70      	ldr	r3, [pc, #448]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4b6d      	ldr	r3, [pc, #436]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCC_OscConfig+0xb0>
 8004bdc:	4b69      	ldr	r3, [pc, #420]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a68      	ldr	r2, [pc, #416]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b66      	ldr	r3, [pc, #408]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a65      	ldr	r2, [pc, #404]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d013      	beq.n	8004c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fe f892 	bl	8002d24 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fe f88e 	bl	8002d24 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	@ 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e207      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	4b5b      	ldr	r3, [pc, #364]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0xc0>
 8004c22:	e014      	b.n	8004c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fe f87e 	bl	8002d24 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c2c:	f7fe f87a 	bl	8002d24 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	@ 0x64
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e1f3      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	4b51      	ldr	r3, [pc, #324]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0xe8>
 8004c4a:	e000      	b.n	8004c4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d063      	beq.n	8004d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c66:	4b47      	ldr	r3, [pc, #284]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d11c      	bne.n	8004cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c72:	4b44      	ldr	r3, [pc, #272]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d116      	bne.n	8004cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7e:	4b41      	ldr	r3, [pc, #260]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_RCC_OscConfig+0x152>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e1c7      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c96:	4b3b      	ldr	r3, [pc, #236]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4937      	ldr	r1, [pc, #220]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004caa:	e03a      	b.n	8004d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d020      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb4:	4b34      	ldr	r3, [pc, #208]	@ (8004d88 <HAL_RCC_OscConfig+0x244>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cba:	f7fe f833 	bl	8002d24 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc2:	f7fe f82f 	bl	8002d24 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e1a8      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce0:	4b28      	ldr	r3, [pc, #160]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4925      	ldr	r1, [pc, #148]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]
 8004cf4:	e015      	b.n	8004d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cf6:	4b24      	ldr	r3, [pc, #144]	@ (8004d88 <HAL_RCC_OscConfig+0x244>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fe f812 	bl	8002d24 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d04:	f7fe f80e 	bl	8002d24 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e187      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d16:	4b1b      	ldr	r3, [pc, #108]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d036      	beq.n	8004d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d016      	beq.n	8004d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d36:	4b15      	ldr	r3, [pc, #84]	@ (8004d8c <HAL_RCC_OscConfig+0x248>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fd fff2 	bl	8002d24 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d44:	f7fd ffee 	bl	8002d24 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e167      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d56:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <HAL_RCC_OscConfig+0x240>)
 8004d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x200>
 8004d62:	e01b      	b.n	8004d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d64:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_RCC_OscConfig+0x248>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6a:	f7fd ffdb 	bl	8002d24 <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d70:	e00e      	b.n	8004d90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d72:	f7fd ffd7 	bl	8002d24 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d907      	bls.n	8004d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e150      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
 8004d84:	40023800 	.word	0x40023800
 8004d88:	42470000 	.word	0x42470000
 8004d8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d90:	4b88      	ldr	r3, [pc, #544]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ea      	bne.n	8004d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8097 	beq.w	8004ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004daa:	2300      	movs	r3, #0
 8004dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dae:	4b81      	ldr	r3, [pc, #516]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10f      	bne.n	8004dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dca:	4b7a      	ldr	r3, [pc, #488]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b77      	ldr	r3, [pc, #476]	@ (8004fb8 <HAL_RCC_OscConfig+0x474>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d118      	bne.n	8004e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004de6:	4b74      	ldr	r3, [pc, #464]	@ (8004fb8 <HAL_RCC_OscConfig+0x474>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a73      	ldr	r2, [pc, #460]	@ (8004fb8 <HAL_RCC_OscConfig+0x474>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df2:	f7fd ff97 	bl	8002d24 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfa:	f7fd ff93 	bl	8002d24 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e10c      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8004fb8 <HAL_RCC_OscConfig+0x474>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCC_OscConfig+0x2ea>
 8004e20:	4b64      	ldr	r3, [pc, #400]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e24:	4a63      	ldr	r2, [pc, #396]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e2c:	e01c      	b.n	8004e68 <HAL_RCC_OscConfig+0x324>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x30c>
 8004e36:	4b5f      	ldr	r3, [pc, #380]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	f043 0304 	orr.w	r3, r3, #4
 8004e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e42:	4b5c      	ldr	r3, [pc, #368]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e46:	4a5b      	ldr	r2, [pc, #364]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e4e:	e00b      	b.n	8004e68 <HAL_RCC_OscConfig+0x324>
 8004e50:	4b58      	ldr	r3, [pc, #352]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e54:	4a57      	ldr	r2, [pc, #348]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e5c:	4b55      	ldr	r3, [pc, #340]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e60:	4a54      	ldr	r2, [pc, #336]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e62:	f023 0304 	bic.w	r3, r3, #4
 8004e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d015      	beq.n	8004e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e70:	f7fd ff58 	bl	8002d24 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e78:	f7fd ff54 	bl	8002d24 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e0cb      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8e:	4b49      	ldr	r3, [pc, #292]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0ee      	beq.n	8004e78 <HAL_RCC_OscConfig+0x334>
 8004e9a:	e014      	b.n	8004ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9c:	f7fd ff42 	bl	8002d24 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea2:	e00a      	b.n	8004eba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea4:	f7fd ff3e 	bl	8002d24 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e0b5      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eba:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1ee      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ecc:	4b39      	ldr	r3, [pc, #228]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed0:	4a38      	ldr	r2, [pc, #224]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80a1 	beq.w	8005024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ee2:	4b34      	ldr	r3, [pc, #208]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d05c      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d141      	bne.n	8004f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef6:	4b31      	ldr	r3, [pc, #196]	@ (8004fbc <HAL_RCC_OscConfig+0x478>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efc:	f7fd ff12 	bl	8002d24 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fd ff0e 	bl	8002d24 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e087      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f16:	4b27      	ldr	r3, [pc, #156]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69da      	ldr	r2, [r3, #28]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	019b      	lsls	r3, r3, #6
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	041b      	lsls	r3, r3, #16
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	491b      	ldr	r1, [pc, #108]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <HAL_RCC_OscConfig+0x478>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fd fee7 	bl	8002d24 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5a:	f7fd fee3 	bl	8002d24 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e05c      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6c:	4b11      	ldr	r3, [pc, #68]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x416>
 8004f78:	e054      	b.n	8005024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7a:	4b10      	ldr	r3, [pc, #64]	@ (8004fbc <HAL_RCC_OscConfig+0x478>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f80:	f7fd fed0 	bl	8002d24 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fd fecc 	bl	8002d24 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e045      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9a:	4b06      	ldr	r3, [pc, #24]	@ (8004fb4 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x444>
 8004fa6:	e03d      	b.n	8005024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e038      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005030 <HAL_RCC_OscConfig+0x4ec>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d028      	beq.n	8005020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d121      	bne.n	8005020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d11a      	bne.n	8005020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d111      	bne.n	8005020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	3b01      	subs	r3, #1
 800500a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800500c:	429a      	cmp	r2, r3
 800500e:	d107      	bne.n	8005020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800501c:	429a      	cmp	r2, r3
 800501e:	d001      	beq.n	8005024 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40023800 	.word	0x40023800

08005034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0cc      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005048:	4b68      	ldr	r3, [pc, #416]	@ (80051ec <HAL_RCC_ClockConfig+0x1b8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d90c      	bls.n	8005070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005056:	4b65      	ldr	r3, [pc, #404]	@ (80051ec <HAL_RCC_ClockConfig+0x1b8>)
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b63      	ldr	r3, [pc, #396]	@ (80051ec <HAL_RCC_ClockConfig+0x1b8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0b8      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d020      	beq.n	80050be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005088:	4b59      	ldr	r3, [pc, #356]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	4a58      	ldr	r2, [pc, #352]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a0:	4b53      	ldr	r3, [pc, #332]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4a52      	ldr	r2, [pc, #328]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ac:	4b50      	ldr	r3, [pc, #320]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	494d      	ldr	r1, [pc, #308]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d044      	beq.n	8005154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	4b47      	ldr	r3, [pc, #284]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d119      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e07f      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d003      	beq.n	80050f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d107      	bne.n	8005102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f2:	4b3f      	ldr	r3, [pc, #252]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e06f      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005102:	4b3b      	ldr	r3, [pc, #236]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e067      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005112:	4b37      	ldr	r3, [pc, #220]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4934      	ldr	r1, [pc, #208]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005124:	f7fd fdfe 	bl	8002d24 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	e00a      	b.n	8005142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fd fdfa 	bl	8002d24 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e04f      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	4b2b      	ldr	r3, [pc, #172]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 020c 	and.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	429a      	cmp	r2, r3
 8005152:	d1eb      	bne.n	800512c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005154:	4b25      	ldr	r3, [pc, #148]	@ (80051ec <HAL_RCC_ClockConfig+0x1b8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d20c      	bcs.n	800517c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b22      	ldr	r3, [pc, #136]	@ (80051ec <HAL_RCC_ClockConfig+0x1b8>)
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b20      	ldr	r3, [pc, #128]	@ (80051ec <HAL_RCC_ClockConfig+0x1b8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e032      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005188:	4b19      	ldr	r3, [pc, #100]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4916      	ldr	r1, [pc, #88]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	4313      	orrs	r3, r2
 8005198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051a6:	4b12      	ldr	r3, [pc, #72]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	490e      	ldr	r1, [pc, #56]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ba:	f000 f821 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 80051be:	4602      	mov	r2, r0
 80051c0:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	490a      	ldr	r1, [pc, #40]	@ (80051f4 <HAL_RCC_ClockConfig+0x1c0>)
 80051cc:	5ccb      	ldrb	r3, [r1, r3]
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	4a09      	ldr	r2, [pc, #36]	@ (80051f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051d6:	4b09      	ldr	r3, [pc, #36]	@ (80051fc <HAL_RCC_ClockConfig+0x1c8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fd fd5e 	bl	8002c9c <HAL_InitTick>

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40023c00 	.word	0x40023c00
 80051f0:	40023800 	.word	0x40023800
 80051f4:	080092f8 	.word	0x080092f8
 80051f8:	20000004 	.word	0x20000004
 80051fc:	20000008 	.word	0x20000008

08005200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005204:	b090      	sub	sp, #64	@ 0x40
 8005206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	637b      	str	r3, [r7, #52]	@ 0x34
 800520c:	2300      	movs	r3, #0
 800520e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005210:	2300      	movs	r3, #0
 8005212:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005218:	4b59      	ldr	r3, [pc, #356]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x180>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	2b08      	cmp	r3, #8
 8005222:	d00d      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0x40>
 8005224:	2b08      	cmp	r3, #8
 8005226:	f200 80a1 	bhi.w	800536c <HAL_RCC_GetSysClockFreq+0x16c>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_RCC_GetSysClockFreq+0x34>
 800522e:	2b04      	cmp	r3, #4
 8005230:	d003      	beq.n	800523a <HAL_RCC_GetSysClockFreq+0x3a>
 8005232:	e09b      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005234:	4b53      	ldr	r3, [pc, #332]	@ (8005384 <HAL_RCC_GetSysClockFreq+0x184>)
 8005236:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005238:	e09b      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800523a:	4b53      	ldr	r3, [pc, #332]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x188>)
 800523c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800523e:	e098      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005240:	4b4f      	ldr	r3, [pc, #316]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x180>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005248:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800524a:	4b4d      	ldr	r3, [pc, #308]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x180>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d028      	beq.n	80052a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005256:	4b4a      	ldr	r3, [pc, #296]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x180>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	099b      	lsrs	r3, r3, #6
 800525c:	2200      	movs	r2, #0
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	627a      	str	r2, [r7, #36]	@ 0x24
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005268:	2100      	movs	r1, #0
 800526a:	4b47      	ldr	r3, [pc, #284]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x188>)
 800526c:	fb03 f201 	mul.w	r2, r3, r1
 8005270:	2300      	movs	r3, #0
 8005272:	fb00 f303 	mul.w	r3, r0, r3
 8005276:	4413      	add	r3, r2
 8005278:	4a43      	ldr	r2, [pc, #268]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x188>)
 800527a:	fba0 1202 	umull	r1, r2, r0, r2
 800527e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005280:	460a      	mov	r2, r1
 8005282:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005286:	4413      	add	r3, r2
 8005288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800528a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800528c:	2200      	movs	r2, #0
 800528e:	61bb      	str	r3, [r7, #24]
 8005290:	61fa      	str	r2, [r7, #28]
 8005292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005296:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800529a:	f7fb fc51 	bl	8000b40 <__aeabi_uldivmod>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4613      	mov	r3, r2
 80052a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052a6:	e053      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a8:	4b35      	ldr	r3, [pc, #212]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x180>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	099b      	lsrs	r3, r3, #6
 80052ae:	2200      	movs	r2, #0
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	617a      	str	r2, [r7, #20]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052ba:	f04f 0b00 	mov.w	fp, #0
 80052be:	4652      	mov	r2, sl
 80052c0:	465b      	mov	r3, fp
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f04f 0100 	mov.w	r1, #0
 80052ca:	0159      	lsls	r1, r3, #5
 80052cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d0:	0150      	lsls	r0, r2, #5
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	ebb2 080a 	subs.w	r8, r2, sl
 80052da:	eb63 090b 	sbc.w	r9, r3, fp
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052f2:	ebb2 0408 	subs.w	r4, r2, r8
 80052f6:	eb63 0509 	sbc.w	r5, r3, r9
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	00eb      	lsls	r3, r5, #3
 8005304:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005308:	00e2      	lsls	r2, r4, #3
 800530a:	4614      	mov	r4, r2
 800530c:	461d      	mov	r5, r3
 800530e:	eb14 030a 	adds.w	r3, r4, sl
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	eb45 030b 	adc.w	r3, r5, fp
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005326:	4629      	mov	r1, r5
 8005328:	028b      	lsls	r3, r1, #10
 800532a:	4621      	mov	r1, r4
 800532c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005330:	4621      	mov	r1, r4
 8005332:	028a      	lsls	r2, r1, #10
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533a:	2200      	movs	r2, #0
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	60fa      	str	r2, [r7, #12]
 8005340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005344:	f7fb fbfc 	bl	8000b40 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4613      	mov	r3, r2
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005350:	4b0b      	ldr	r3, [pc, #44]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x180>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	3301      	adds	r3, #1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005360:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800536a:	e002      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800536c:	4b05      	ldr	r3, [pc, #20]	@ (8005384 <HAL_RCC_GetSysClockFreq+0x184>)
 800536e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005374:	4618      	mov	r0, r3
 8005376:	3740      	adds	r7, #64	@ 0x40
 8005378:	46bd      	mov	sp, r7
 800537a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800537e:	bf00      	nop
 8005380:	40023800 	.word	0x40023800
 8005384:	00f42400 	.word	0x00f42400
 8005388:	017d7840 	.word	0x017d7840

0800538c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005390:	4b03      	ldr	r3, [pc, #12]	@ (80053a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000004 	.word	0x20000004

080053a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053a8:	f7ff fff0 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0a9b      	lsrs	r3, r3, #10
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	@ (80053c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	08009308 	.word	0x08009308

080053cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053d0:	f7ff ffdc 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b05      	ldr	r3, [pc, #20]	@ (80053ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	0b5b      	lsrs	r3, r3, #13
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	4903      	ldr	r1, [pc, #12]	@ (80053f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40023800 	.word	0x40023800
 80053f0:	08009308 	.word	0x08009308

080053f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e041      	b.n	800548a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fd f9ae 	bl	800277c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f000 f9b8 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d109      	bne.n	80054b8 <HAL_TIM_PWM_Start+0x24>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e022      	b.n	80054fe <HAL_TIM_PWM_Start+0x6a>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d109      	bne.n	80054d2 <HAL_TIM_PWM_Start+0x3e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	bf14      	ite	ne
 80054ca:	2301      	movne	r3, #1
 80054cc:	2300      	moveq	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	e015      	b.n	80054fe <HAL_TIM_PWM_Start+0x6a>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d109      	bne.n	80054ec <HAL_TIM_PWM_Start+0x58>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	bf14      	ite	ne
 80054e4:	2301      	movne	r3, #1
 80054e6:	2300      	moveq	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	e008      	b.n	80054fe <HAL_TIM_PWM_Start+0x6a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	bf14      	ite	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	2300      	moveq	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e07c      	b.n	8005600 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d104      	bne.n	8005516 <HAL_TIM_PWM_Start+0x82>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005514:	e013      	b.n	800553e <HAL_TIM_PWM_Start+0xaa>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b04      	cmp	r3, #4
 800551a:	d104      	bne.n	8005526 <HAL_TIM_PWM_Start+0x92>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005524:	e00b      	b.n	800553e <HAL_TIM_PWM_Start+0xaa>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b08      	cmp	r3, #8
 800552a:	d104      	bne.n	8005536 <HAL_TIM_PWM_Start+0xa2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005534:	e003      	b.n	800553e <HAL_TIM_PWM_Start+0xaa>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2201      	movs	r2, #1
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fb8a 	bl	8005c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2d      	ldr	r2, [pc, #180]	@ (8005608 <HAL_TIM_PWM_Start+0x174>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_TIM_PWM_Start+0xcc>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2c      	ldr	r2, [pc, #176]	@ (800560c <HAL_TIM_PWM_Start+0x178>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d101      	bne.n	8005564 <HAL_TIM_PWM_Start+0xd0>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <HAL_TIM_PWM_Start+0xd2>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005578:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a22      	ldr	r2, [pc, #136]	@ (8005608 <HAL_TIM_PWM_Start+0x174>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d022      	beq.n	80055ca <HAL_TIM_PWM_Start+0x136>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558c:	d01d      	beq.n	80055ca <HAL_TIM_PWM_Start+0x136>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1f      	ldr	r2, [pc, #124]	@ (8005610 <HAL_TIM_PWM_Start+0x17c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d018      	beq.n	80055ca <HAL_TIM_PWM_Start+0x136>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1d      	ldr	r2, [pc, #116]	@ (8005614 <HAL_TIM_PWM_Start+0x180>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <HAL_TIM_PWM_Start+0x136>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005618 <HAL_TIM_PWM_Start+0x184>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00e      	beq.n	80055ca <HAL_TIM_PWM_Start+0x136>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a16      	ldr	r2, [pc, #88]	@ (800560c <HAL_TIM_PWM_Start+0x178>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_TIM_PWM_Start+0x136>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <HAL_TIM_PWM_Start+0x188>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_TIM_PWM_Start+0x136>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a16      	ldr	r2, [pc, #88]	@ (8005620 <HAL_TIM_PWM_Start+0x18c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d111      	bne.n	80055ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b06      	cmp	r3, #6
 80055da:	d010      	beq.n	80055fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ec:	e007      	b.n	80055fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40010000 	.word	0x40010000
 800560c:	40010400 	.word	0x40010400
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40014000 	.word	0x40014000
 8005620:	40001800 	.word	0x40001800

08005624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800563e:	2302      	movs	r3, #2
 8005640:	e0ae      	b.n	80057a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b0c      	cmp	r3, #12
 800564e:	f200 809f 	bhi.w	8005790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005652:	a201      	add	r2, pc, #4	@ (adr r2, 8005658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800568d 	.word	0x0800568d
 800565c:	08005791 	.word	0x08005791
 8005660:	08005791 	.word	0x08005791
 8005664:	08005791 	.word	0x08005791
 8005668:	080056cd 	.word	0x080056cd
 800566c:	08005791 	.word	0x08005791
 8005670:	08005791 	.word	0x08005791
 8005674:	08005791 	.word	0x08005791
 8005678:	0800570f 	.word	0x0800570f
 800567c:	08005791 	.word	0x08005791
 8005680:	08005791 	.word	0x08005791
 8005684:	08005791 	.word	0x08005791
 8005688:	0800574f 	.word	0x0800574f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f934 	bl	8005900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0204 	bic.w	r2, r2, #4
 80056b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6999      	ldr	r1, [r3, #24]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	619a      	str	r2, [r3, #24]
      break;
 80056ca:	e064      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f984 	bl	80059e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6999      	ldr	r1, [r3, #24]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	619a      	str	r2, [r3, #24]
      break;
 800570c:	e043      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	4618      	mov	r0, r3
 8005716:	f000 f9d9 	bl	8005acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0208 	orr.w	r2, r2, #8
 8005728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0204 	bic.w	r2, r2, #4
 8005738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69d9      	ldr	r1, [r3, #28]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	61da      	str	r2, [r3, #28]
      break;
 800574c:	e023      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fa2d 	bl	8005bb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69d9      	ldr	r1, [r3, #28]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	021a      	lsls	r2, r3, #8
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	61da      	str	r2, [r3, #28]
      break;
 800578e:	e002      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
      break;
 8005794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a46      	ldr	r2, [pc, #280]	@ (80058d4 <TIM_Base_SetConfig+0x12c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c6:	d00f      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a43      	ldr	r2, [pc, #268]	@ (80058d8 <TIM_Base_SetConfig+0x130>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a42      	ldr	r2, [pc, #264]	@ (80058dc <TIM_Base_SetConfig+0x134>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a41      	ldr	r2, [pc, #260]	@ (80058e0 <TIM_Base_SetConfig+0x138>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a40      	ldr	r2, [pc, #256]	@ (80058e4 <TIM_Base_SetConfig+0x13c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d108      	bne.n	80057fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a35      	ldr	r2, [pc, #212]	@ (80058d4 <TIM_Base_SetConfig+0x12c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d02b      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005808:	d027      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a32      	ldr	r2, [pc, #200]	@ (80058d8 <TIM_Base_SetConfig+0x130>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d023      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a31      	ldr	r2, [pc, #196]	@ (80058dc <TIM_Base_SetConfig+0x134>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01f      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a30      	ldr	r2, [pc, #192]	@ (80058e0 <TIM_Base_SetConfig+0x138>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01b      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2f      	ldr	r2, [pc, #188]	@ (80058e4 <TIM_Base_SetConfig+0x13c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d017      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2e      	ldr	r2, [pc, #184]	@ (80058e8 <TIM_Base_SetConfig+0x140>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2d      	ldr	r2, [pc, #180]	@ (80058ec <TIM_Base_SetConfig+0x144>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00f      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2c      	ldr	r2, [pc, #176]	@ (80058f0 <TIM_Base_SetConfig+0x148>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00b      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a2b      	ldr	r2, [pc, #172]	@ (80058f4 <TIM_Base_SetConfig+0x14c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a2a      	ldr	r2, [pc, #168]	@ (80058f8 <TIM_Base_SetConfig+0x150>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a29      	ldr	r2, [pc, #164]	@ (80058fc <TIM_Base_SetConfig+0x154>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d108      	bne.n	800586c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a10      	ldr	r2, [pc, #64]	@ (80058d4 <TIM_Base_SetConfig+0x12c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a12      	ldr	r2, [pc, #72]	@ (80058e4 <TIM_Base_SetConfig+0x13c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d103      	bne.n	80058a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f023 0201 	bic.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]
  }
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40010400 	.word	0x40010400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40014400 	.word	0x40014400
 80058f0:	40014800 	.word	0x40014800
 80058f4:	40001800 	.word	0x40001800
 80058f8:	40001c00 	.word	0x40001c00
 80058fc:	40002000 	.word	0x40002000

08005900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f023 0201 	bic.w	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f023 0302 	bic.w	r3, r3, #2
 8005948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a20      	ldr	r2, [pc, #128]	@ (80059d8 <TIM_OC1_SetConfig+0xd8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_OC1_SetConfig+0x64>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a1f      	ldr	r2, [pc, #124]	@ (80059dc <TIM_OC1_SetConfig+0xdc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d10c      	bne.n	800597e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0308 	bic.w	r3, r3, #8
 800596a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a15      	ldr	r2, [pc, #84]	@ (80059d8 <TIM_OC1_SetConfig+0xd8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d003      	beq.n	800598e <TIM_OC1_SetConfig+0x8e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a14      	ldr	r2, [pc, #80]	@ (80059dc <TIM_OC1_SetConfig+0xdc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d111      	bne.n	80059b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800599c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	621a      	str	r2, [r3, #32]
}
 80059cc:	bf00      	nop
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40010400 	.word	0x40010400

080059e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f023 0210 	bic.w	r2, r3, #16
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f023 0320 	bic.w	r3, r3, #32
 8005a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a22      	ldr	r2, [pc, #136]	@ (8005ac4 <TIM_OC2_SetConfig+0xe4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_OC2_SetConfig+0x68>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a21      	ldr	r2, [pc, #132]	@ (8005ac8 <TIM_OC2_SetConfig+0xe8>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d10d      	bne.n	8005a64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a17      	ldr	r2, [pc, #92]	@ (8005ac4 <TIM_OC2_SetConfig+0xe4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_OC2_SetConfig+0x94>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	@ (8005ac8 <TIM_OC2_SetConfig+0xe8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d113      	bne.n	8005a9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40010400 	.word	0x40010400

08005acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b087      	sub	sp, #28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	021b      	lsls	r3, r3, #8
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a21      	ldr	r2, [pc, #132]	@ (8005bac <TIM_OC3_SetConfig+0xe0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_OC3_SetConfig+0x66>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a20      	ldr	r2, [pc, #128]	@ (8005bb0 <TIM_OC3_SetConfig+0xe4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d10d      	bne.n	8005b4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <TIM_OC3_SetConfig+0xe0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_OC3_SetConfig+0x92>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a15      	ldr	r2, [pc, #84]	@ (8005bb0 <TIM_OC3_SetConfig+0xe4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d113      	bne.n	8005b86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	621a      	str	r2, [r3, #32]
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40010400 	.word	0x40010400

08005bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a12      	ldr	r2, [pc, #72]	@ (8005c58 <TIM_OC4_SetConfig+0xa4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_OC4_SetConfig+0x68>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a11      	ldr	r2, [pc, #68]	@ (8005c5c <TIM_OC4_SetConfig+0xa8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d109      	bne.n	8005c30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	019b      	lsls	r3, r3, #6
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40010400 	.word	0x40010400

08005c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	2201      	movs	r2, #1
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	fa01 f303 	lsl.w	r3, r1, r3
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e05a      	b.n	8005d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a21      	ldr	r2, [pc, #132]	@ (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d022      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d10:	d01d      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1d      	ldr	r2, [pc, #116]	@ (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d018      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	@ (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00e      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a18      	ldr	r2, [pc, #96]	@ (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a17      	ldr	r2, [pc, #92]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d10c      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800
 8005d94:	40000c00 	.word	0x40000c00
 8005d98:	40010400 	.word	0x40010400
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40001800 	.word	0x40001800

08005da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e042      	b.n	8005e3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fc fe04 	bl	80029d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2224      	movs	r2, #36	@ 0x24
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 f973 	bl	80070d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	@ 0x28
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d175      	bne.n	8005f50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_UART_Transmit+0x2c>
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e06e      	b.n	8005f52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2221      	movs	r2, #33	@ 0x21
 8005e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e82:	f7fc ff4f 	bl	8002d24 <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	88fa      	ldrh	r2, [r7, #6]
 8005e8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	88fa      	ldrh	r2, [r7, #6]
 8005e92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e9c:	d108      	bne.n	8005eb0 <HAL_UART_Transmit+0x6c>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d104      	bne.n	8005eb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e003      	b.n	8005eb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005eb8:	e02e      	b.n	8005f18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2180      	movs	r1, #128	@ 0x80
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fdeb 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e03a      	b.n	8005f52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ef0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	e007      	b.n	8005f0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	781a      	ldrb	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	3301      	adds	r3, #1
 8005f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1cb      	bne.n	8005eba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2140      	movs	r1, #64	@ 0x40
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fdb7 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e006      	b.n	8005f52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	e000      	b.n	8005f52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f50:	2302      	movs	r3, #2
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3720      	adds	r7, #32
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	4613      	mov	r3, r2
 8005f66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d112      	bne.n	8005f9a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_UART_Receive_DMA+0x26>
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e00b      	b.n	8005f9c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fddf 	bl	8006b54 <UART_Start_Receive_DMA>
 8005f96:	4603      	mov	r3, r0
 8005f98:	e000      	b.n	8005f9c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f9a:	2302      	movs	r3, #2
  }
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b09a      	sub	sp, #104	@ 0x68
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005fcc:	657a      	str	r2, [r7, #84]	@ 0x54
 8005fce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e5      	bne.n	8005fac <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3314      	adds	r3, #20
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3314      	adds	r3, #20
 8005ffe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006000:	643a      	str	r2, [r7, #64]	@ 0x40
 8006002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800600e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e5      	bne.n	8005fe0 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006018:	2b01      	cmp	r3, #1
 800601a:	d119      	bne.n	8006050 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	61fb      	str	r3, [r7, #28]
   return(result);
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f023 0310 	bic.w	r3, r3, #16
 8006032:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800603c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800603e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605a:	2b40      	cmp	r3, #64	@ 0x40
 800605c:	d136      	bne.n	80060cc <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3314      	adds	r3, #20
 8006064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	60bb      	str	r3, [r7, #8]
   return(result);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006074:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3314      	adds	r3, #20
 800607c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800607e:	61ba      	str	r2, [r7, #24]
 8006080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6979      	ldr	r1, [r7, #20]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	613b      	str	r3, [r7, #16]
   return(result);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e5      	bne.n	800605e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d018      	beq.n	80060cc <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609e:	2200      	movs	r2, #0
 80060a0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fd f884 	bl	80031b4 <HAL_DMA_Abort>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00c      	beq.n	80060cc <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fd fa98 	bl	80035ec <HAL_DMA_GetError>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d104      	bne.n	80060cc <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2210      	movs	r2, #16
 80060c6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e00a      	b.n	80060e2 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3768      	adds	r7, #104	@ 0x68
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b0a2      	sub	sp, #136	@ 0x88
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800610a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800610c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8006110:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800611e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006120:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006124:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006126:	e841 2300 	strex	r3, r2, [r1]
 800612a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800612c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1e3      	bne.n	80060fa <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3314      	adds	r3, #20
 8006138:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613c:	e853 3f00 	ldrex	r3, [r3]
 8006140:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3314      	adds	r3, #20
 8006150:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006152:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006154:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006156:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006158:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800615a:	e841 2300 	strex	r3, r2, [r1]
 800615e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1e5      	bne.n	8006132 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616a:	2b01      	cmp	r3, #1
 800616c:	d119      	bne.n	80061a2 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800617e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006180:	f023 0310 	bic.w	r3, r3, #16
 8006184:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	330c      	adds	r3, #12
 800618c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800618e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800619c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e5      	bne.n	800616e <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00f      	beq.n	80061ca <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b4:	2b80      	cmp	r3, #128	@ 0x80
 80061b6:	d104      	bne.n	80061c2 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061bc:	4a53      	ldr	r2, [pc, #332]	@ (800630c <HAL_UART_Abort_IT+0x220>)
 80061be:	651a      	str	r2, [r3, #80]	@ 0x50
 80061c0:	e003      	b.n	80061ca <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c6:	2200      	movs	r2, #0
 80061c8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00f      	beq.n	80061f2 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061dc:	2b40      	cmp	r3, #64	@ 0x40
 80061de:	d104      	bne.n	80061ea <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006310 <HAL_UART_Abort_IT+0x224>)
 80061e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80061e8:	e003      	b.n	80061f2 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ee:	2200      	movs	r2, #0
 80061f0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fc:	2b80      	cmp	r3, #128	@ 0x80
 80061fe:	d12d      	bne.n	800625c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3314      	adds	r3, #20
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	623b      	str	r3, [r7, #32]
   return(result);
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006216:	677b      	str	r3, [r7, #116]	@ 0x74
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3314      	adds	r3, #20
 800621e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006220:	633a      	str	r2, [r7, #48]	@ 0x30
 8006222:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e5      	bne.n	8006200 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00f      	beq.n	800625c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006240:	4618      	mov	r0, r3
 8006242:	f7fd f827 	bl	8003294 <HAL_DMA_Abort_IT>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d004      	beq.n	8006256 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	2200      	movs	r2, #0
 8006252:	651a      	str	r2, [r3, #80]	@ 0x50
 8006254:	e002      	b.n	800625c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8006256:	2300      	movs	r3, #0
 8006258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006266:	2b40      	cmp	r3, #64	@ 0x40
 8006268:	d130      	bne.n	80062cc <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3314      	adds	r3, #20
 8006270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	60fb      	str	r3, [r7, #12]
   return(result);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006280:	673b      	str	r3, [r7, #112]	@ 0x70
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3314      	adds	r3, #20
 8006288:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800628a:	61fa      	str	r2, [r7, #28]
 800628c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	69b9      	ldr	r1, [r7, #24]
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	617b      	str	r3, [r7, #20]
   return(result);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e5      	bne.n	800626a <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d012      	beq.n	80062cc <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fc fff2 	bl	8003294 <HAL_DMA_Abort_IT>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ba:	2200      	movs	r2, #0
 80062bc:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 80062be:	2301      	movs	r3, #1
 80062c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062c4:	e002      	b.n	80062cc <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80062cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d116      	bne.n	8006302 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 faaf 	bl	8006860 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3788      	adds	r7, #136	@ 0x88
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	08006dc7 	.word	0x08006dc7
 8006310:	08006e27 	.word	0x08006e27

08006314 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0ba      	sub	sp, #232	@ 0xe8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800633a:	2300      	movs	r3, #0
 800633c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006340:	2300      	movs	r3, #0
 8006342:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_UART_IRQHandler+0x66>
 8006366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fdef 	bl	8006f56 <UART_Receive_IT>
      return;
 8006378:	e25b      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800637a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80de 	beq.w	8006540 <HAL_UART_IRQHandler+0x22c>
 8006384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006394:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80d1 	beq.w	8006540 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <HAL_UART_IRQHandler+0xae>
 80063aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	f043 0201 	orr.w	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <HAL_UART_IRQHandler+0xd2>
 80063ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063de:	f043 0202 	orr.w	r2, r3, #2
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00b      	beq.n	800640a <HAL_UART_IRQHandler+0xf6>
 80063f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006402:	f043 0204 	orr.w	r2, r3, #4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d011      	beq.n	800643a <HAL_UART_IRQHandler+0x126>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d105      	bne.n	800642e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006432:	f043 0208 	orr.w	r2, r3, #8
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 81f2 	beq.w	8006828 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d008      	beq.n	8006462 <HAL_UART_IRQHandler+0x14e>
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fd7a 	bl	8006f56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646c:	2b40      	cmp	r3, #64	@ 0x40
 800646e:	bf0c      	ite	eq
 8006470:	2301      	moveq	r3, #1
 8006472:	2300      	movne	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <HAL_UART_IRQHandler+0x17a>
 8006486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04f      	beq.n	800652e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fc22 	bl	8006cd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649e:	2b40      	cmp	r3, #64	@ 0x40
 80064a0:	d141      	bne.n	8006526 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3314      	adds	r3, #20
 80064ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1d9      	bne.n	80064a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d013      	beq.n	800651e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fa:	4a7e      	ldr	r2, [pc, #504]	@ (80066f4 <HAL_UART_IRQHandler+0x3e0>)
 80064fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006502:	4618      	mov	r0, r3
 8006504:	f7fc fec6 	bl	8003294 <HAL_DMA_Abort_IT>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d016      	beq.n	800653c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651c:	e00e      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fa fdc4 	bl	80010ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e00a      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fa fdc0 	bl	80010ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e006      	b.n	800653c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fa fdbc 	bl	80010ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800653a:	e175      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653c:	bf00      	nop
    return;
 800653e:	e173      	b.n	8006828 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006544:	2b01      	cmp	r3, #1
 8006546:	f040 814f 	bne.w	80067e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8148 	beq.w	80067e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8141 	beq.w	80067e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006586:	2b40      	cmp	r3, #64	@ 0x40
 8006588:	f040 80b6 	bne.w	80066f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8145 	beq.w	800682c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065aa:	429a      	cmp	r2, r3
 80065ac:	f080 813e 	bcs.w	800682c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c2:	f000 8088 	beq.w	80066d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	330c      	adds	r3, #12
 80065ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1d9      	bne.n	80065c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006622:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3314      	adds	r3, #20
 8006632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006636:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800663a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800663e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e1      	bne.n	8006612 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800665e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3314      	adds	r3, #20
 800666e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006672:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006674:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006678:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e3      	bne.n	800664e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066a6:	f023 0310 	bic.w	r3, r3, #16
 80066aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80066b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e3      	bne.n	8006694 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fc fd6f 	bl	80031b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f8c1 	bl	8006874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066f2:	e09b      	b.n	800682c <HAL_UART_IRQHandler+0x518>
 80066f4:	08006d9f 	.word	0x08006d9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006700:	b29b      	uxth	r3, r3
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 808e 	beq.w	8006830 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8089 	beq.w	8006830 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800672e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006734:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	330c      	adds	r3, #12
 800673e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006742:	647a      	str	r2, [r7, #68]	@ 0x44
 8006744:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006748:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e3      	bne.n	800671e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3314      	adds	r3, #20
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	623b      	str	r3, [r7, #32]
   return(result);
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3314      	adds	r3, #20
 8006776:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800677a:	633a      	str	r2, [r7, #48]	@ 0x30
 800677c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e3      	bne.n	8006756 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0310 	bic.w	r3, r3, #16
 80067b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067c0:	61fa      	str	r2, [r7, #28]
 80067c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	69b9      	ldr	r1, [r7, #24]
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	617b      	str	r3, [r7, #20]
   return(result);
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e3      	bne.n	800679c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067de:	4619      	mov	r1, r3
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f847 	bl	8006874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067e6:	e023      	b.n	8006830 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <HAL_UART_IRQHandler+0x4f4>
 80067f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fb40 	bl	8006e86 <UART_Transmit_IT>
    return;
 8006806:	e014      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00e      	beq.n	8006832 <HAL_UART_IRQHandler+0x51e>
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fb80 	bl	8006f26 <UART_EndTransmit_IT>
    return;
 8006826:	e004      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
    return;
 8006828:	bf00      	nop
 800682a:	e002      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
      return;
 800682c:	bf00      	nop
 800682e:	e000      	b.n	8006832 <HAL_UART_IRQHandler+0x51e>
      return;
 8006830:	bf00      	nop
  }
}
 8006832:	37e8      	adds	r7, #232	@ 0xe8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b09c      	sub	sp, #112	@ 0x70
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d172      	bne.n	80069a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80068c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068c2:	2200      	movs	r2, #0
 80068c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80068e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80068e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e5      	bne.n	80068c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3314      	adds	r3, #20
 8006900:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800690a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	667b      	str	r3, [r7, #100]	@ 0x64
 8006912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3314      	adds	r3, #20
 8006918:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800691a:	647a      	str	r2, [r7, #68]	@ 0x44
 800691c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e5      	bne.n	80068fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3314      	adds	r3, #20
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	623b      	str	r3, [r7, #32]
   return(result);
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006944:	663b      	str	r3, [r7, #96]	@ 0x60
 8006946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3314      	adds	r3, #20
 800694c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800694e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006950:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800695c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e5      	bne.n	800692e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006964:	2220      	movs	r2, #32
 8006966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696e:	2b01      	cmp	r3, #1
 8006970:	d119      	bne.n	80069a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	330c      	adds	r3, #12
 8006978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	60fb      	str	r3, [r7, #12]
   return(result);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f023 0310 	bic.w	r3, r3, #16
 8006988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800698a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006992:	61fa      	str	r2, [r7, #28]
 8006994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	69b9      	ldr	r1, [r7, #24]
 8006998:	69fa      	ldr	r2, [r7, #28]
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	617b      	str	r3, [r7, #20]
   return(result);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e5      	bne.n	8006972 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069a8:	2200      	movs	r2, #0
 80069aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d106      	bne.n	80069c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069b8:	4619      	mov	r1, r3
 80069ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80069bc:	f7ff ff5a 	bl	8006874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069c0:	e002      	b.n	80069c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80069c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80069c4:	f7fa fb46 	bl	8001054 <HAL_UART_RxCpltCallback>
}
 80069c8:	bf00      	nop
 80069ca:	3770      	adds	r7, #112	@ 0x70
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d108      	bne.n	80069fe <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	4619      	mov	r1, r3
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f7ff ff3c 	bl	8006874 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069fc:	e002      	b.n	8006a04 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff ff24 	bl	800684c <HAL_UART_RxHalfCpltCallback>
}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a28:	2b80      	cmp	r3, #128	@ 0x80
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b21      	cmp	r3, #33	@ 0x21
 8006a3e:	d108      	bne.n	8006a52 <UART_DMAError+0x46>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006a4c:	68b8      	ldr	r0, [r7, #8]
 8006a4e:	f000 f91b 	bl	8006c88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5c:	2b40      	cmp	r3, #64	@ 0x40
 8006a5e:	bf0c      	ite	eq
 8006a60:	2301      	moveq	r3, #1
 8006a62:	2300      	movne	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b22      	cmp	r3, #34	@ 0x22
 8006a72:	d108      	bne.n	8006a86 <UART_DMAError+0x7a>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	f000 f929 	bl	8006cd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8a:	f043 0210 	orr.w	r2, r3, #16
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a92:	68b8      	ldr	r0, [r7, #8]
 8006a94:	f7fa fb0a 	bl	80010ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab0:	e03b      	b.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d037      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aba:	f7fc f933 	bl	8002d24 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	6a3a      	ldr	r2, [r7, #32]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d302      	bcc.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e03a      	b.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d023      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b80      	cmp	r3, #128	@ 0x80
 8006ae6:	d020      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	d01d      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d116      	bne.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006afc:	2300      	movs	r3, #0
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f8e0 	bl	8006cd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2208      	movs	r2, #8
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e00f      	b.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4013      	ands	r3, r2
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	bf0c      	ite	eq
 8006b3a:	2301      	moveq	r3, #1
 8006b3c:	2300      	movne	r3, #0
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d0b4      	beq.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b098      	sub	sp, #96	@ 0x60
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	88fa      	ldrh	r2, [r7, #6]
 8006b6c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2222      	movs	r2, #34	@ 0x22
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b80:	4a3e      	ldr	r2, [pc, #248]	@ (8006c7c <UART_Start_Receive_DMA+0x128>)
 8006b82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b88:	4a3d      	ldr	r2, [pc, #244]	@ (8006c80 <UART_Start_Receive_DMA+0x12c>)
 8006b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b90:	4a3c      	ldr	r2, [pc, #240]	@ (8006c84 <UART_Start_Receive_DMA+0x130>)
 8006b92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b98:	2200      	movs	r2, #0
 8006b9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006b9c:	f107 0308 	add.w	r3, r7, #8
 8006ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	f7fc faa6 	bl	8003104 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d019      	beq.n	8006c0a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bf6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006bfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e5      	bne.n	8006bd6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c2a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006c30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e5      	bne.n	8006c0a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3314      	adds	r3, #20
 8006c44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c54:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3314      	adds	r3, #20
 8006c5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6a39      	ldr	r1, [r7, #32]
 8006c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e5      	bne.n	8006c3e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3760      	adds	r7, #96	@ 0x60
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	080068a5 	.word	0x080068a5
 8006c80:	080069d1 	.word	0x080069d1
 8006c84:	08006a0d 	.word	0x08006a0d

08006c88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b089      	sub	sp, #36	@ 0x24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	61ba      	str	r2, [r7, #24]
 8006cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6979      	ldr	r1, [r7, #20]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006ccc:	bf00      	nop
 8006cce:	3724      	adds	r7, #36	@ 0x24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b095      	sub	sp, #84	@ 0x54
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d00:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e5      	bne.n	8006ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3314      	adds	r3, #20
 8006d32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e5      	bne.n	8006d14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d119      	bne.n	8006d84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	330c      	adds	r3, #12
 8006d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	e853 3f00 	ldrex	r3, [r3]
 8006d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f023 0310 	bic.w	r3, r3, #16
 8006d66:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	330c      	adds	r3, #12
 8006d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d70:	61ba      	str	r2, [r7, #24]
 8006d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	6979      	ldr	r1, [r7, #20]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	e841 2300 	strex	r3, r2, [r1]
 8006d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e5      	bne.n	8006d50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d92:	bf00      	nop
 8006d94:	3754      	adds	r7, #84	@ 0x54
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7fa f977 	bl	80010ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd8:	2200      	movs	r2, #0
 8006dda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d117      	bne.n	8006e1e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff fd22 	bl	8006860 <HAL_UART_AbortCpltCallback>
 8006e1c:	e000      	b.n	8006e20 <UART_DMATxAbortCallback+0x5a>
      return;
 8006e1e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e32:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e38:	2200      	movs	r2, #0
 8006e3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d117      	bne.n	8006e7e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f7ff fcf2 	bl	8006860 <HAL_UART_AbortCpltCallback>
 8006e7c:	e000      	b.n	8006e80 <UART_DMARxAbortCallback+0x5a>
      return;
 8006e7e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b21      	cmp	r3, #33	@ 0x21
 8006e98:	d13e      	bne.n	8006f18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea2:	d114      	bne.n	8006ece <UART_Transmit_IT+0x48>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d110      	bne.n	8006ece <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ec0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	1c9a      	adds	r2, r3, #2
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	621a      	str	r2, [r3, #32]
 8006ecc:	e008      	b.n	8006ee0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	1c59      	adds	r1, r3, #1
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6211      	str	r1, [r2, #32]
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	4619      	mov	r1, r3
 8006eee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10f      	bne.n	8006f14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e000      	b.n	8006f1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f18:	2302      	movs	r3, #2
  }
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7ff fc76 	bl	8006838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b08c      	sub	sp, #48	@ 0x30
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b22      	cmp	r3, #34	@ 0x22
 8006f68:	f040 80ae 	bne.w	80070c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f74:	d117      	bne.n	8006fa6 <UART_Receive_IT+0x50>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d113      	bne.n	8006fa6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f86:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9e:	1c9a      	adds	r2, r3, #2
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fa4:	e026      	b.n	8006ff4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fb8:	d007      	beq.n	8006fca <UART_Receive_IT+0x74>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10a      	bne.n	8006fd8 <UART_Receive_IT+0x82>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e008      	b.n	8006fea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	4619      	mov	r1, r3
 8007002:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007004:	2b00      	cmp	r3, #0
 8007006:	d15d      	bne.n	80070c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0220 	bic.w	r2, r2, #32
 8007016:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007026:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0201 	bic.w	r2, r2, #1
 8007036:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704a:	2b01      	cmp	r3, #1
 800704c:	d135      	bne.n	80070ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	613b      	str	r3, [r7, #16]
   return(result);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f023 0310 	bic.w	r3, r3, #16
 800706a:	627b      	str	r3, [r7, #36]	@ 0x24
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007074:	623a      	str	r2, [r7, #32]
 8007076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	69f9      	ldr	r1, [r7, #28]
 800707a:	6a3a      	ldr	r2, [r7, #32]
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	61bb      	str	r3, [r7, #24]
   return(result);
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0310 	and.w	r3, r3, #16
 8007092:	2b10      	cmp	r3, #16
 8007094:	d10a      	bne.n	80070ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fbde 	bl	8006874 <HAL_UARTEx_RxEventCallback>
 80070b8:	e002      	b.n	80070c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7f9 ffca 	bl	8001054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	e002      	b.n	80070ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	e000      	b.n	80070ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070c8:	2302      	movs	r3, #2
  }
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3730      	adds	r7, #48	@ 0x30
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070d8:	b0c0      	sub	sp, #256	@ 0x100
 80070da:	af00      	add	r7, sp, #0
 80070dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f0:	68d9      	ldr	r1, [r3, #12]
 80070f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	ea40 0301 	orr.w	r3, r0, r1
 80070fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	431a      	orrs	r2, r3
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	431a      	orrs	r2, r3
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800712c:	f021 010c 	bic.w	r1, r1, #12
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800713a:	430b      	orrs	r3, r1
 800713c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800713e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714e:	6999      	ldr	r1, [r3, #24]
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	ea40 0301 	orr.w	r3, r0, r1
 800715a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4b8f      	ldr	r3, [pc, #572]	@ (80073a0 <UART_SetConfig+0x2cc>)
 8007164:	429a      	cmp	r2, r3
 8007166:	d005      	beq.n	8007174 <UART_SetConfig+0xa0>
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b8d      	ldr	r3, [pc, #564]	@ (80073a4 <UART_SetConfig+0x2d0>)
 8007170:	429a      	cmp	r2, r3
 8007172:	d104      	bne.n	800717e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007174:	f7fe f92a 	bl	80053cc <HAL_RCC_GetPCLK2Freq>
 8007178:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800717c:	e003      	b.n	8007186 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800717e:	f7fe f911 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 8007182:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007190:	f040 810c 	bne.w	80073ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007198:	2200      	movs	r2, #0
 800719a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800719e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80071a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80071a6:	4622      	mov	r2, r4
 80071a8:	462b      	mov	r3, r5
 80071aa:	1891      	adds	r1, r2, r2
 80071ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80071ae:	415b      	adcs	r3, r3
 80071b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80071b6:	4621      	mov	r1, r4
 80071b8:	eb12 0801 	adds.w	r8, r2, r1
 80071bc:	4629      	mov	r1, r5
 80071be:	eb43 0901 	adc.w	r9, r3, r1
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071d6:	4690      	mov	r8, r2
 80071d8:	4699      	mov	r9, r3
 80071da:	4623      	mov	r3, r4
 80071dc:	eb18 0303 	adds.w	r3, r8, r3
 80071e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071e4:	462b      	mov	r3, r5
 80071e6:	eb49 0303 	adc.w	r3, r9, r3
 80071ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007202:	460b      	mov	r3, r1
 8007204:	18db      	adds	r3, r3, r3
 8007206:	653b      	str	r3, [r7, #80]	@ 0x50
 8007208:	4613      	mov	r3, r2
 800720a:	eb42 0303 	adc.w	r3, r2, r3
 800720e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007218:	f7f9 fc92 	bl	8000b40 <__aeabi_uldivmod>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4b61      	ldr	r3, [pc, #388]	@ (80073a8 <UART_SetConfig+0x2d4>)
 8007222:	fba3 2302 	umull	r2, r3, r3, r2
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	011c      	lsls	r4, r3, #4
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800722e:	2200      	movs	r2, #0
 8007230:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007234:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	1891      	adds	r1, r2, r2
 8007242:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007244:	415b      	adcs	r3, r3
 8007246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800724c:	4641      	mov	r1, r8
 800724e:	eb12 0a01 	adds.w	sl, r2, r1
 8007252:	4649      	mov	r1, r9
 8007254:	eb43 0b01 	adc.w	fp, r3, r1
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800726c:	4692      	mov	sl, r2
 800726e:	469b      	mov	fp, r3
 8007270:	4643      	mov	r3, r8
 8007272:	eb1a 0303 	adds.w	r3, sl, r3
 8007276:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800727a:	464b      	mov	r3, r9
 800727c:	eb4b 0303 	adc.w	r3, fp, r3
 8007280:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007290:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007298:	460b      	mov	r3, r1
 800729a:	18db      	adds	r3, r3, r3
 800729c:	643b      	str	r3, [r7, #64]	@ 0x40
 800729e:	4613      	mov	r3, r2
 80072a0:	eb42 0303 	adc.w	r3, r2, r3
 80072a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80072ae:	f7f9 fc47 	bl	8000b40 <__aeabi_uldivmod>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	4b3b      	ldr	r3, [pc, #236]	@ (80073a8 <UART_SetConfig+0x2d4>)
 80072ba:	fba3 2301 	umull	r2, r3, r3, r1
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	2264      	movs	r2, #100	@ 0x64
 80072c2:	fb02 f303 	mul.w	r3, r2, r3
 80072c6:	1acb      	subs	r3, r1, r3
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072ce:	4b36      	ldr	r3, [pc, #216]	@ (80073a8 <UART_SetConfig+0x2d4>)
 80072d0:	fba3 2302 	umull	r2, r3, r3, r2
 80072d4:	095b      	lsrs	r3, r3, #5
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072dc:	441c      	add	r4, r3
 80072de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072f0:	4642      	mov	r2, r8
 80072f2:	464b      	mov	r3, r9
 80072f4:	1891      	adds	r1, r2, r2
 80072f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072f8:	415b      	adcs	r3, r3
 80072fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007300:	4641      	mov	r1, r8
 8007302:	1851      	adds	r1, r2, r1
 8007304:	6339      	str	r1, [r7, #48]	@ 0x30
 8007306:	4649      	mov	r1, r9
 8007308:	414b      	adcs	r3, r1
 800730a:	637b      	str	r3, [r7, #52]	@ 0x34
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007318:	4659      	mov	r1, fp
 800731a:	00cb      	lsls	r3, r1, #3
 800731c:	4651      	mov	r1, sl
 800731e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007322:	4651      	mov	r1, sl
 8007324:	00ca      	lsls	r2, r1, #3
 8007326:	4610      	mov	r0, r2
 8007328:	4619      	mov	r1, r3
 800732a:	4603      	mov	r3, r0
 800732c:	4642      	mov	r2, r8
 800732e:	189b      	adds	r3, r3, r2
 8007330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007334:	464b      	mov	r3, r9
 8007336:	460a      	mov	r2, r1
 8007338:	eb42 0303 	adc.w	r3, r2, r3
 800733c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800734c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007354:	460b      	mov	r3, r1
 8007356:	18db      	adds	r3, r3, r3
 8007358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800735a:	4613      	mov	r3, r2
 800735c:	eb42 0303 	adc.w	r3, r2, r3
 8007360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800736a:	f7f9 fbe9 	bl	8000b40 <__aeabi_uldivmod>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4b0d      	ldr	r3, [pc, #52]	@ (80073a8 <UART_SetConfig+0x2d4>)
 8007374:	fba3 1302 	umull	r1, r3, r3, r2
 8007378:	095b      	lsrs	r3, r3, #5
 800737a:	2164      	movs	r1, #100	@ 0x64
 800737c:	fb01 f303 	mul.w	r3, r1, r3
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	3332      	adds	r3, #50	@ 0x32
 8007386:	4a08      	ldr	r2, [pc, #32]	@ (80073a8 <UART_SetConfig+0x2d4>)
 8007388:	fba2 2303 	umull	r2, r3, r2, r3
 800738c:	095b      	lsrs	r3, r3, #5
 800738e:	f003 0207 	and.w	r2, r3, #7
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4422      	add	r2, r4
 800739a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800739c:	e106      	b.n	80075ac <UART_SetConfig+0x4d8>
 800739e:	bf00      	nop
 80073a0:	40011000 	.word	0x40011000
 80073a4:	40011400 	.word	0x40011400
 80073a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80073ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80073be:	4642      	mov	r2, r8
 80073c0:	464b      	mov	r3, r9
 80073c2:	1891      	adds	r1, r2, r2
 80073c4:	6239      	str	r1, [r7, #32]
 80073c6:	415b      	adcs	r3, r3
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073ce:	4641      	mov	r1, r8
 80073d0:	1854      	adds	r4, r2, r1
 80073d2:	4649      	mov	r1, r9
 80073d4:	eb43 0501 	adc.w	r5, r3, r1
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	00eb      	lsls	r3, r5, #3
 80073e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073e6:	00e2      	lsls	r2, r4, #3
 80073e8:	4614      	mov	r4, r2
 80073ea:	461d      	mov	r5, r3
 80073ec:	4643      	mov	r3, r8
 80073ee:	18e3      	adds	r3, r4, r3
 80073f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073f4:	464b      	mov	r3, r9
 80073f6:	eb45 0303 	adc.w	r3, r5, r3
 80073fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800740a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800740e:	f04f 0200 	mov.w	r2, #0
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800741a:	4629      	mov	r1, r5
 800741c:	008b      	lsls	r3, r1, #2
 800741e:	4621      	mov	r1, r4
 8007420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007424:	4621      	mov	r1, r4
 8007426:	008a      	lsls	r2, r1, #2
 8007428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800742c:	f7f9 fb88 	bl	8000b40 <__aeabi_uldivmod>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4b60      	ldr	r3, [pc, #384]	@ (80075b8 <UART_SetConfig+0x4e4>)
 8007436:	fba3 2302 	umull	r2, r3, r3, r2
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	011c      	lsls	r4, r3, #4
 800743e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007442:	2200      	movs	r2, #0
 8007444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007448:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800744c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007450:	4642      	mov	r2, r8
 8007452:	464b      	mov	r3, r9
 8007454:	1891      	adds	r1, r2, r2
 8007456:	61b9      	str	r1, [r7, #24]
 8007458:	415b      	adcs	r3, r3
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007460:	4641      	mov	r1, r8
 8007462:	1851      	adds	r1, r2, r1
 8007464:	6139      	str	r1, [r7, #16]
 8007466:	4649      	mov	r1, r9
 8007468:	414b      	adcs	r3, r1
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007478:	4659      	mov	r1, fp
 800747a:	00cb      	lsls	r3, r1, #3
 800747c:	4651      	mov	r1, sl
 800747e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007482:	4651      	mov	r1, sl
 8007484:	00ca      	lsls	r2, r1, #3
 8007486:	4610      	mov	r0, r2
 8007488:	4619      	mov	r1, r3
 800748a:	4603      	mov	r3, r0
 800748c:	4642      	mov	r2, r8
 800748e:	189b      	adds	r3, r3, r2
 8007490:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007494:	464b      	mov	r3, r9
 8007496:	460a      	mov	r2, r1
 8007498:	eb42 0303 	adc.w	r3, r2, r3
 800749c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80074ac:	f04f 0200 	mov.w	r2, #0
 80074b0:	f04f 0300 	mov.w	r3, #0
 80074b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80074b8:	4649      	mov	r1, r9
 80074ba:	008b      	lsls	r3, r1, #2
 80074bc:	4641      	mov	r1, r8
 80074be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c2:	4641      	mov	r1, r8
 80074c4:	008a      	lsls	r2, r1, #2
 80074c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80074ca:	f7f9 fb39 	bl	8000b40 <__aeabi_uldivmod>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	4b38      	ldr	r3, [pc, #224]	@ (80075b8 <UART_SetConfig+0x4e4>)
 80074d6:	fba3 2301 	umull	r2, r3, r3, r1
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	2264      	movs	r2, #100	@ 0x64
 80074de:	fb02 f303 	mul.w	r3, r2, r3
 80074e2:	1acb      	subs	r3, r1, r3
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	3332      	adds	r3, #50	@ 0x32
 80074e8:	4a33      	ldr	r2, [pc, #204]	@ (80075b8 <UART_SetConfig+0x4e4>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074f4:	441c      	add	r4, r3
 80074f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074fa:	2200      	movs	r2, #0
 80074fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80074fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8007500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007504:	4642      	mov	r2, r8
 8007506:	464b      	mov	r3, r9
 8007508:	1891      	adds	r1, r2, r2
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	415b      	adcs	r3, r3
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007514:	4641      	mov	r1, r8
 8007516:	1851      	adds	r1, r2, r1
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	4649      	mov	r1, r9
 800751c:	414b      	adcs	r3, r1
 800751e:	607b      	str	r3, [r7, #4]
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800752c:	4659      	mov	r1, fp
 800752e:	00cb      	lsls	r3, r1, #3
 8007530:	4651      	mov	r1, sl
 8007532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007536:	4651      	mov	r1, sl
 8007538:	00ca      	lsls	r2, r1, #3
 800753a:	4610      	mov	r0, r2
 800753c:	4619      	mov	r1, r3
 800753e:	4603      	mov	r3, r0
 8007540:	4642      	mov	r2, r8
 8007542:	189b      	adds	r3, r3, r2
 8007544:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007546:	464b      	mov	r3, r9
 8007548:	460a      	mov	r2, r1
 800754a:	eb42 0303 	adc.w	r3, r2, r3
 800754e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	663b      	str	r3, [r7, #96]	@ 0x60
 800755a:	667a      	str	r2, [r7, #100]	@ 0x64
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007568:	4649      	mov	r1, r9
 800756a:	008b      	lsls	r3, r1, #2
 800756c:	4641      	mov	r1, r8
 800756e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007572:	4641      	mov	r1, r8
 8007574:	008a      	lsls	r2, r1, #2
 8007576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800757a:	f7f9 fae1 	bl	8000b40 <__aeabi_uldivmod>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4b0d      	ldr	r3, [pc, #52]	@ (80075b8 <UART_SetConfig+0x4e4>)
 8007584:	fba3 1302 	umull	r1, r3, r3, r2
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	2164      	movs	r1, #100	@ 0x64
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	3332      	adds	r3, #50	@ 0x32
 8007596:	4a08      	ldr	r2, [pc, #32]	@ (80075b8 <UART_SetConfig+0x4e4>)
 8007598:	fba2 2303 	umull	r2, r3, r2, r3
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	f003 020f 	and.w	r2, r3, #15
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4422      	add	r2, r4
 80075aa:	609a      	str	r2, [r3, #8]
}
 80075ac:	bf00      	nop
 80075ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80075b2:	46bd      	mov	sp, r7
 80075b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075b8:	51eb851f 	.word	0x51eb851f

080075bc <memset>:
 80075bc:	4402      	add	r2, r0
 80075be:	4603      	mov	r3, r0
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d100      	bne.n	80075c6 <memset+0xa>
 80075c4:	4770      	bx	lr
 80075c6:	f803 1b01 	strb.w	r1, [r3], #1
 80075ca:	e7f9      	b.n	80075c0 <memset+0x4>

080075cc <__errno>:
 80075cc:	4b01      	ldr	r3, [pc, #4]	@ (80075d4 <__errno+0x8>)
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000010 	.word	0x20000010

080075d8 <__libc_init_array>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	4d0d      	ldr	r5, [pc, #52]	@ (8007610 <__libc_init_array+0x38>)
 80075dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007614 <__libc_init_array+0x3c>)
 80075de:	1b64      	subs	r4, r4, r5
 80075e0:	10a4      	asrs	r4, r4, #2
 80075e2:	2600      	movs	r6, #0
 80075e4:	42a6      	cmp	r6, r4
 80075e6:	d109      	bne.n	80075fc <__libc_init_array+0x24>
 80075e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007618 <__libc_init_array+0x40>)
 80075ea:	4c0c      	ldr	r4, [pc, #48]	@ (800761c <__libc_init_array+0x44>)
 80075ec:	f001 fe0c 	bl	8009208 <_init>
 80075f0:	1b64      	subs	r4, r4, r5
 80075f2:	10a4      	asrs	r4, r4, #2
 80075f4:	2600      	movs	r6, #0
 80075f6:	42a6      	cmp	r6, r4
 80075f8:	d105      	bne.n	8007606 <__libc_init_array+0x2e>
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007600:	4798      	blx	r3
 8007602:	3601      	adds	r6, #1
 8007604:	e7ee      	b.n	80075e4 <__libc_init_array+0xc>
 8007606:	f855 3b04 	ldr.w	r3, [r5], #4
 800760a:	4798      	blx	r3
 800760c:	3601      	adds	r6, #1
 800760e:	e7f2      	b.n	80075f6 <__libc_init_array+0x1e>
 8007610:	08009398 	.word	0x08009398
 8007614:	08009398 	.word	0x08009398
 8007618:	08009398 	.word	0x08009398
 800761c:	0800939c 	.word	0x0800939c

08007620 <acos>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	ed2d 8b02 	vpush	{d8}
 8007626:	ec55 4b10 	vmov	r4, r5, d0
 800762a:	f000 fb8d 	bl	8007d48 <__ieee754_acos>
 800762e:	4622      	mov	r2, r4
 8007630:	462b      	mov	r3, r5
 8007632:	4620      	mov	r0, r4
 8007634:	4629      	mov	r1, r5
 8007636:	eeb0 8a40 	vmov.f32	s16, s0
 800763a:	eef0 8a60 	vmov.f32	s17, s1
 800763e:	f7f9 fa19 	bl	8000a74 <__aeabi_dcmpun>
 8007642:	b9a8      	cbnz	r0, 8007670 <acos+0x50>
 8007644:	ec45 4b10 	vmov	d0, r4, r5
 8007648:	f000 fa86 	bl	8007b58 <fabs>
 800764c:	4b0c      	ldr	r3, [pc, #48]	@ (8007680 <acos+0x60>)
 800764e:	ec51 0b10 	vmov	r0, r1, d0
 8007652:	2200      	movs	r2, #0
 8007654:	f7f9 fa04 	bl	8000a60 <__aeabi_dcmpgt>
 8007658:	b150      	cbz	r0, 8007670 <acos+0x50>
 800765a:	f7ff ffb7 	bl	80075cc <__errno>
 800765e:	ecbd 8b02 	vpop	{d8}
 8007662:	2321      	movs	r3, #33	@ 0x21
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800766a:	4806      	ldr	r0, [pc, #24]	@ (8007684 <acos+0x64>)
 800766c:	f000 ba88 	b.w	8007b80 <nan>
 8007670:	eeb0 0a48 	vmov.f32	s0, s16
 8007674:	eef0 0a68 	vmov.f32	s1, s17
 8007678:	ecbd 8b02 	vpop	{d8}
 800767c:	bd38      	pop	{r3, r4, r5, pc}
 800767e:	bf00      	nop
 8007680:	3ff00000 	.word	0x3ff00000
 8007684:	08009318 	.word	0x08009318

08007688 <asin>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	ed2d 8b02 	vpush	{d8}
 800768e:	ec55 4b10 	vmov	r4, r5, d0
 8007692:	f000 fdb5 	bl	8008200 <__ieee754_asin>
 8007696:	4622      	mov	r2, r4
 8007698:	462b      	mov	r3, r5
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	eeb0 8a40 	vmov.f32	s16, s0
 80076a2:	eef0 8a60 	vmov.f32	s17, s1
 80076a6:	f7f9 f9e5 	bl	8000a74 <__aeabi_dcmpun>
 80076aa:	b9a8      	cbnz	r0, 80076d8 <asin+0x50>
 80076ac:	ec45 4b10 	vmov	d0, r4, r5
 80076b0:	f000 fa52 	bl	8007b58 <fabs>
 80076b4:	4b0c      	ldr	r3, [pc, #48]	@ (80076e8 <asin+0x60>)
 80076b6:	ec51 0b10 	vmov	r0, r1, d0
 80076ba:	2200      	movs	r2, #0
 80076bc:	f7f9 f9d0 	bl	8000a60 <__aeabi_dcmpgt>
 80076c0:	b150      	cbz	r0, 80076d8 <asin+0x50>
 80076c2:	f7ff ff83 	bl	80075cc <__errno>
 80076c6:	ecbd 8b02 	vpop	{d8}
 80076ca:	2321      	movs	r3, #33	@ 0x21
 80076cc:	6003      	str	r3, [r0, #0]
 80076ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d2:	4806      	ldr	r0, [pc, #24]	@ (80076ec <asin+0x64>)
 80076d4:	f000 ba54 	b.w	8007b80 <nan>
 80076d8:	eeb0 0a48 	vmov.f32	s0, s16
 80076dc:	eef0 0a68 	vmov.f32	s1, s17
 80076e0:	ecbd 8b02 	vpop	{d8}
 80076e4:	bd38      	pop	{r3, r4, r5, pc}
 80076e6:	bf00      	nop
 80076e8:	3ff00000 	.word	0x3ff00000
 80076ec:	08009318 	.word	0x08009318

080076f0 <pow>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	ed2d 8b02 	vpush	{d8}
 80076f6:	eeb0 8a40 	vmov.f32	s16, s0
 80076fa:	eef0 8a60 	vmov.f32	s17, s1
 80076fe:	ec55 4b11 	vmov	r4, r5, d1
 8007702:	f000 ff81 	bl	8008608 <__ieee754_pow>
 8007706:	4622      	mov	r2, r4
 8007708:	462b      	mov	r3, r5
 800770a:	4620      	mov	r0, r4
 800770c:	4629      	mov	r1, r5
 800770e:	ec57 6b10 	vmov	r6, r7, d0
 8007712:	f7f9 f9af 	bl	8000a74 <__aeabi_dcmpun>
 8007716:	2800      	cmp	r0, #0
 8007718:	d13b      	bne.n	8007792 <pow+0xa2>
 800771a:	ec51 0b18 	vmov	r0, r1, d8
 800771e:	2200      	movs	r2, #0
 8007720:	2300      	movs	r3, #0
 8007722:	f7f9 f975 	bl	8000a10 <__aeabi_dcmpeq>
 8007726:	b1b8      	cbz	r0, 8007758 <pow+0x68>
 8007728:	2200      	movs	r2, #0
 800772a:	2300      	movs	r3, #0
 800772c:	4620      	mov	r0, r4
 800772e:	4629      	mov	r1, r5
 8007730:	f7f9 f96e 	bl	8000a10 <__aeabi_dcmpeq>
 8007734:	2800      	cmp	r0, #0
 8007736:	d146      	bne.n	80077c6 <pow+0xd6>
 8007738:	ec45 4b10 	vmov	d0, r4, r5
 800773c:	f000 fa14 	bl	8007b68 <finite>
 8007740:	b338      	cbz	r0, 8007792 <pow+0xa2>
 8007742:	2200      	movs	r2, #0
 8007744:	2300      	movs	r3, #0
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	f7f9 f96b 	bl	8000a24 <__aeabi_dcmplt>
 800774e:	b300      	cbz	r0, 8007792 <pow+0xa2>
 8007750:	f7ff ff3c 	bl	80075cc <__errno>
 8007754:	2322      	movs	r3, #34	@ 0x22
 8007756:	e01b      	b.n	8007790 <pow+0xa0>
 8007758:	ec47 6b10 	vmov	d0, r6, r7
 800775c:	f000 fa04 	bl	8007b68 <finite>
 8007760:	b9e0      	cbnz	r0, 800779c <pow+0xac>
 8007762:	eeb0 0a48 	vmov.f32	s0, s16
 8007766:	eef0 0a68 	vmov.f32	s1, s17
 800776a:	f000 f9fd 	bl	8007b68 <finite>
 800776e:	b1a8      	cbz	r0, 800779c <pow+0xac>
 8007770:	ec45 4b10 	vmov	d0, r4, r5
 8007774:	f000 f9f8 	bl	8007b68 <finite>
 8007778:	b180      	cbz	r0, 800779c <pow+0xac>
 800777a:	4632      	mov	r2, r6
 800777c:	463b      	mov	r3, r7
 800777e:	4630      	mov	r0, r6
 8007780:	4639      	mov	r1, r7
 8007782:	f7f9 f977 	bl	8000a74 <__aeabi_dcmpun>
 8007786:	2800      	cmp	r0, #0
 8007788:	d0e2      	beq.n	8007750 <pow+0x60>
 800778a:	f7ff ff1f 	bl	80075cc <__errno>
 800778e:	2321      	movs	r3, #33	@ 0x21
 8007790:	6003      	str	r3, [r0, #0]
 8007792:	ecbd 8b02 	vpop	{d8}
 8007796:	ec47 6b10 	vmov	d0, r6, r7
 800779a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800779c:	2200      	movs	r2, #0
 800779e:	2300      	movs	r3, #0
 80077a0:	4630      	mov	r0, r6
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f9 f934 	bl	8000a10 <__aeabi_dcmpeq>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d0f2      	beq.n	8007792 <pow+0xa2>
 80077ac:	eeb0 0a48 	vmov.f32	s0, s16
 80077b0:	eef0 0a68 	vmov.f32	s1, s17
 80077b4:	f000 f9d8 	bl	8007b68 <finite>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d0ea      	beq.n	8007792 <pow+0xa2>
 80077bc:	ec45 4b10 	vmov	d0, r4, r5
 80077c0:	f000 f9d2 	bl	8007b68 <finite>
 80077c4:	e7c3      	b.n	800774e <pow+0x5e>
 80077c6:	4f01      	ldr	r7, [pc, #4]	@ (80077cc <pow+0xdc>)
 80077c8:	2600      	movs	r6, #0
 80077ca:	e7e2      	b.n	8007792 <pow+0xa2>
 80077cc:	3ff00000 	.word	0x3ff00000

080077d0 <sqrt>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	ed2d 8b02 	vpush	{d8}
 80077d6:	ec55 4b10 	vmov	r4, r5, d0
 80077da:	f000 f9d9 	bl	8007b90 <__ieee754_sqrt>
 80077de:	4622      	mov	r2, r4
 80077e0:	462b      	mov	r3, r5
 80077e2:	4620      	mov	r0, r4
 80077e4:	4629      	mov	r1, r5
 80077e6:	eeb0 8a40 	vmov.f32	s16, s0
 80077ea:	eef0 8a60 	vmov.f32	s17, s1
 80077ee:	f7f9 f941 	bl	8000a74 <__aeabi_dcmpun>
 80077f2:	b990      	cbnz	r0, 800781a <sqrt+0x4a>
 80077f4:	2200      	movs	r2, #0
 80077f6:	2300      	movs	r3, #0
 80077f8:	4620      	mov	r0, r4
 80077fa:	4629      	mov	r1, r5
 80077fc:	f7f9 f912 	bl	8000a24 <__aeabi_dcmplt>
 8007800:	b158      	cbz	r0, 800781a <sqrt+0x4a>
 8007802:	f7ff fee3 	bl	80075cc <__errno>
 8007806:	2321      	movs	r3, #33	@ 0x21
 8007808:	6003      	str	r3, [r0, #0]
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	4610      	mov	r0, r2
 8007810:	4619      	mov	r1, r3
 8007812:	f7f8 ffbf 	bl	8000794 <__aeabi_ddiv>
 8007816:	ec41 0b18 	vmov	d8, r0, r1
 800781a:	eeb0 0a48 	vmov.f32	s0, s16
 800781e:	eef0 0a68 	vmov.f32	s1, s17
 8007822:	ecbd 8b02 	vpop	{d8}
 8007826:	bd38      	pop	{r3, r4, r5, pc}

08007828 <atan>:
 8007828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	ec55 4b10 	vmov	r4, r5, d0
 8007830:	4bbf      	ldr	r3, [pc, #764]	@ (8007b30 <atan+0x308>)
 8007832:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007836:	429e      	cmp	r6, r3
 8007838:	46ab      	mov	fp, r5
 800783a:	d918      	bls.n	800786e <atan+0x46>
 800783c:	4bbd      	ldr	r3, [pc, #756]	@ (8007b34 <atan+0x30c>)
 800783e:	429e      	cmp	r6, r3
 8007840:	d801      	bhi.n	8007846 <atan+0x1e>
 8007842:	d109      	bne.n	8007858 <atan+0x30>
 8007844:	b144      	cbz	r4, 8007858 <atan+0x30>
 8007846:	4622      	mov	r2, r4
 8007848:	462b      	mov	r3, r5
 800784a:	4620      	mov	r0, r4
 800784c:	4629      	mov	r1, r5
 800784e:	f7f8 fcc1 	bl	80001d4 <__adddf3>
 8007852:	4604      	mov	r4, r0
 8007854:	460d      	mov	r5, r1
 8007856:	e006      	b.n	8007866 <atan+0x3e>
 8007858:	f1bb 0f00 	cmp.w	fp, #0
 800785c:	f340 812b 	ble.w	8007ab6 <atan+0x28e>
 8007860:	a597      	add	r5, pc, #604	@ (adr r5, 8007ac0 <atan+0x298>)
 8007862:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007866:	ec45 4b10 	vmov	d0, r4, r5
 800786a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786e:	4bb2      	ldr	r3, [pc, #712]	@ (8007b38 <atan+0x310>)
 8007870:	429e      	cmp	r6, r3
 8007872:	d813      	bhi.n	800789c <atan+0x74>
 8007874:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007878:	429e      	cmp	r6, r3
 800787a:	d80c      	bhi.n	8007896 <atan+0x6e>
 800787c:	a392      	add	r3, pc, #584	@ (adr r3, 8007ac8 <atan+0x2a0>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	4620      	mov	r0, r4
 8007884:	4629      	mov	r1, r5
 8007886:	f7f8 fca5 	bl	80001d4 <__adddf3>
 800788a:	4bac      	ldr	r3, [pc, #688]	@ (8007b3c <atan+0x314>)
 800788c:	2200      	movs	r2, #0
 800788e:	f7f9 f8e7 	bl	8000a60 <__aeabi_dcmpgt>
 8007892:	2800      	cmp	r0, #0
 8007894:	d1e7      	bne.n	8007866 <atan+0x3e>
 8007896:	f04f 3aff 	mov.w	sl, #4294967295
 800789a:	e029      	b.n	80078f0 <atan+0xc8>
 800789c:	f000 f95c 	bl	8007b58 <fabs>
 80078a0:	4ba7      	ldr	r3, [pc, #668]	@ (8007b40 <atan+0x318>)
 80078a2:	429e      	cmp	r6, r3
 80078a4:	ec55 4b10 	vmov	r4, r5, d0
 80078a8:	f200 80bc 	bhi.w	8007a24 <atan+0x1fc>
 80078ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80078b0:	429e      	cmp	r6, r3
 80078b2:	f200 809e 	bhi.w	80079f2 <atan+0x1ca>
 80078b6:	4622      	mov	r2, r4
 80078b8:	462b      	mov	r3, r5
 80078ba:	4620      	mov	r0, r4
 80078bc:	4629      	mov	r1, r5
 80078be:	f7f8 fc89 	bl	80001d4 <__adddf3>
 80078c2:	4b9e      	ldr	r3, [pc, #632]	@ (8007b3c <atan+0x314>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	f7f8 fc83 	bl	80001d0 <__aeabi_dsub>
 80078ca:	2200      	movs	r2, #0
 80078cc:	4606      	mov	r6, r0
 80078ce:	460f      	mov	r7, r1
 80078d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80078d4:	4620      	mov	r0, r4
 80078d6:	4629      	mov	r1, r5
 80078d8:	f7f8 fc7c 	bl	80001d4 <__adddf3>
 80078dc:	4602      	mov	r2, r0
 80078de:	460b      	mov	r3, r1
 80078e0:	4630      	mov	r0, r6
 80078e2:	4639      	mov	r1, r7
 80078e4:	f7f8 ff56 	bl	8000794 <__aeabi_ddiv>
 80078e8:	f04f 0a00 	mov.w	sl, #0
 80078ec:	4604      	mov	r4, r0
 80078ee:	460d      	mov	r5, r1
 80078f0:	4622      	mov	r2, r4
 80078f2:	462b      	mov	r3, r5
 80078f4:	4620      	mov	r0, r4
 80078f6:	4629      	mov	r1, r5
 80078f8:	f7f8 fe22 	bl	8000540 <__aeabi_dmul>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4680      	mov	r8, r0
 8007902:	4689      	mov	r9, r1
 8007904:	f7f8 fe1c 	bl	8000540 <__aeabi_dmul>
 8007908:	a371      	add	r3, pc, #452	@ (adr r3, 8007ad0 <atan+0x2a8>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	4606      	mov	r6, r0
 8007910:	460f      	mov	r7, r1
 8007912:	f7f8 fe15 	bl	8000540 <__aeabi_dmul>
 8007916:	a370      	add	r3, pc, #448	@ (adr r3, 8007ad8 <atan+0x2b0>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f7f8 fc5a 	bl	80001d4 <__adddf3>
 8007920:	4632      	mov	r2, r6
 8007922:	463b      	mov	r3, r7
 8007924:	f7f8 fe0c 	bl	8000540 <__aeabi_dmul>
 8007928:	a36d      	add	r3, pc, #436	@ (adr r3, 8007ae0 <atan+0x2b8>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	f7f8 fc51 	bl	80001d4 <__adddf3>
 8007932:	4632      	mov	r2, r6
 8007934:	463b      	mov	r3, r7
 8007936:	f7f8 fe03 	bl	8000540 <__aeabi_dmul>
 800793a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007ae8 <atan+0x2c0>)
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	f7f8 fc48 	bl	80001d4 <__adddf3>
 8007944:	4632      	mov	r2, r6
 8007946:	463b      	mov	r3, r7
 8007948:	f7f8 fdfa 	bl	8000540 <__aeabi_dmul>
 800794c:	a368      	add	r3, pc, #416	@ (adr r3, 8007af0 <atan+0x2c8>)
 800794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007952:	f7f8 fc3f 	bl	80001d4 <__adddf3>
 8007956:	4632      	mov	r2, r6
 8007958:	463b      	mov	r3, r7
 800795a:	f7f8 fdf1 	bl	8000540 <__aeabi_dmul>
 800795e:	a366      	add	r3, pc, #408	@ (adr r3, 8007af8 <atan+0x2d0>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	f7f8 fc36 	bl	80001d4 <__adddf3>
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	f7f8 fde8 	bl	8000540 <__aeabi_dmul>
 8007970:	a363      	add	r3, pc, #396	@ (adr r3, 8007b00 <atan+0x2d8>)
 8007972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007976:	4680      	mov	r8, r0
 8007978:	4689      	mov	r9, r1
 800797a:	4630      	mov	r0, r6
 800797c:	4639      	mov	r1, r7
 800797e:	f7f8 fddf 	bl	8000540 <__aeabi_dmul>
 8007982:	a361      	add	r3, pc, #388	@ (adr r3, 8007b08 <atan+0x2e0>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fc22 	bl	80001d0 <__aeabi_dsub>
 800798c:	4632      	mov	r2, r6
 800798e:	463b      	mov	r3, r7
 8007990:	f7f8 fdd6 	bl	8000540 <__aeabi_dmul>
 8007994:	a35e      	add	r3, pc, #376	@ (adr r3, 8007b10 <atan+0x2e8>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f8 fc19 	bl	80001d0 <__aeabi_dsub>
 800799e:	4632      	mov	r2, r6
 80079a0:	463b      	mov	r3, r7
 80079a2:	f7f8 fdcd 	bl	8000540 <__aeabi_dmul>
 80079a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007b18 <atan+0x2f0>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	f7f8 fc10 	bl	80001d0 <__aeabi_dsub>
 80079b0:	4632      	mov	r2, r6
 80079b2:	463b      	mov	r3, r7
 80079b4:	f7f8 fdc4 	bl	8000540 <__aeabi_dmul>
 80079b8:	a359      	add	r3, pc, #356	@ (adr r3, 8007b20 <atan+0x2f8>)
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f7f8 fc07 	bl	80001d0 <__aeabi_dsub>
 80079c2:	4632      	mov	r2, r6
 80079c4:	463b      	mov	r3, r7
 80079c6:	f7f8 fdbb 	bl	8000540 <__aeabi_dmul>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4640      	mov	r0, r8
 80079d0:	4649      	mov	r1, r9
 80079d2:	f7f8 fbff 	bl	80001d4 <__adddf3>
 80079d6:	4622      	mov	r2, r4
 80079d8:	462b      	mov	r3, r5
 80079da:	f7f8 fdb1 	bl	8000540 <__aeabi_dmul>
 80079de:	f1ba 3fff 	cmp.w	sl, #4294967295
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	d148      	bne.n	8007a7a <atan+0x252>
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fbf0 	bl	80001d0 <__aeabi_dsub>
 80079f0:	e72f      	b.n	8007852 <atan+0x2a>
 80079f2:	4b52      	ldr	r3, [pc, #328]	@ (8007b3c <atan+0x314>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	4620      	mov	r0, r4
 80079f8:	4629      	mov	r1, r5
 80079fa:	f7f8 fbe9 	bl	80001d0 <__aeabi_dsub>
 80079fe:	4b4f      	ldr	r3, [pc, #316]	@ (8007b3c <atan+0x314>)
 8007a00:	4606      	mov	r6, r0
 8007a02:	460f      	mov	r7, r1
 8007a04:	2200      	movs	r2, #0
 8007a06:	4620      	mov	r0, r4
 8007a08:	4629      	mov	r1, r5
 8007a0a:	f7f8 fbe3 	bl	80001d4 <__adddf3>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4630      	mov	r0, r6
 8007a14:	4639      	mov	r1, r7
 8007a16:	f7f8 febd 	bl	8000794 <__aeabi_ddiv>
 8007a1a:	f04f 0a01 	mov.w	sl, #1
 8007a1e:	4604      	mov	r4, r0
 8007a20:	460d      	mov	r5, r1
 8007a22:	e765      	b.n	80078f0 <atan+0xc8>
 8007a24:	4b47      	ldr	r3, [pc, #284]	@ (8007b44 <atan+0x31c>)
 8007a26:	429e      	cmp	r6, r3
 8007a28:	d21c      	bcs.n	8007a64 <atan+0x23c>
 8007a2a:	4b47      	ldr	r3, [pc, #284]	@ (8007b48 <atan+0x320>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f8 fbcd 	bl	80001d0 <__aeabi_dsub>
 8007a36:	4b44      	ldr	r3, [pc, #272]	@ (8007b48 <atan+0x320>)
 8007a38:	4606      	mov	r6, r0
 8007a3a:	460f      	mov	r7, r1
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4629      	mov	r1, r5
 8007a42:	f7f8 fd7d 	bl	8000540 <__aeabi_dmul>
 8007a46:	4b3d      	ldr	r3, [pc, #244]	@ (8007b3c <atan+0x314>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f7f8 fbc3 	bl	80001d4 <__adddf3>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4630      	mov	r0, r6
 8007a54:	4639      	mov	r1, r7
 8007a56:	f7f8 fe9d 	bl	8000794 <__aeabi_ddiv>
 8007a5a:	f04f 0a02 	mov.w	sl, #2
 8007a5e:	4604      	mov	r4, r0
 8007a60:	460d      	mov	r5, r1
 8007a62:	e745      	b.n	80078f0 <atan+0xc8>
 8007a64:	4622      	mov	r2, r4
 8007a66:	462b      	mov	r3, r5
 8007a68:	4938      	ldr	r1, [pc, #224]	@ (8007b4c <atan+0x324>)
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	f7f8 fe92 	bl	8000794 <__aeabi_ddiv>
 8007a70:	f04f 0a03 	mov.w	sl, #3
 8007a74:	4604      	mov	r4, r0
 8007a76:	460d      	mov	r5, r1
 8007a78:	e73a      	b.n	80078f0 <atan+0xc8>
 8007a7a:	4b35      	ldr	r3, [pc, #212]	@ (8007b50 <atan+0x328>)
 8007a7c:	4e35      	ldr	r6, [pc, #212]	@ (8007b54 <atan+0x32c>)
 8007a7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f7f8 fba3 	bl	80001d0 <__aeabi_dsub>
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	f7f8 fb9f 	bl	80001d0 <__aeabi_dsub>
 8007a92:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007a9e:	f7f8 fb97 	bl	80001d0 <__aeabi_dsub>
 8007aa2:	f1bb 0f00 	cmp.w	fp, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	460d      	mov	r5, r1
 8007aaa:	f6bf aedc 	bge.w	8007866 <atan+0x3e>
 8007aae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ab2:	461d      	mov	r5, r3
 8007ab4:	e6d7      	b.n	8007866 <atan+0x3e>
 8007ab6:	a51c      	add	r5, pc, #112	@ (adr r5, 8007b28 <atan+0x300>)
 8007ab8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007abc:	e6d3      	b.n	8007866 <atan+0x3e>
 8007abe:	bf00      	nop
 8007ac0:	54442d18 	.word	0x54442d18
 8007ac4:	3ff921fb 	.word	0x3ff921fb
 8007ac8:	8800759c 	.word	0x8800759c
 8007acc:	7e37e43c 	.word	0x7e37e43c
 8007ad0:	e322da11 	.word	0xe322da11
 8007ad4:	3f90ad3a 	.word	0x3f90ad3a
 8007ad8:	24760deb 	.word	0x24760deb
 8007adc:	3fa97b4b 	.word	0x3fa97b4b
 8007ae0:	a0d03d51 	.word	0xa0d03d51
 8007ae4:	3fb10d66 	.word	0x3fb10d66
 8007ae8:	c54c206e 	.word	0xc54c206e
 8007aec:	3fb745cd 	.word	0x3fb745cd
 8007af0:	920083ff 	.word	0x920083ff
 8007af4:	3fc24924 	.word	0x3fc24924
 8007af8:	5555550d 	.word	0x5555550d
 8007afc:	3fd55555 	.word	0x3fd55555
 8007b00:	2c6a6c2f 	.word	0x2c6a6c2f
 8007b04:	bfa2b444 	.word	0xbfa2b444
 8007b08:	52defd9a 	.word	0x52defd9a
 8007b0c:	3fadde2d 	.word	0x3fadde2d
 8007b10:	af749a6d 	.word	0xaf749a6d
 8007b14:	3fb3b0f2 	.word	0x3fb3b0f2
 8007b18:	fe231671 	.word	0xfe231671
 8007b1c:	3fbc71c6 	.word	0x3fbc71c6
 8007b20:	9998ebc4 	.word	0x9998ebc4
 8007b24:	3fc99999 	.word	0x3fc99999
 8007b28:	54442d18 	.word	0x54442d18
 8007b2c:	bff921fb 	.word	0xbff921fb
 8007b30:	440fffff 	.word	0x440fffff
 8007b34:	7ff00000 	.word	0x7ff00000
 8007b38:	3fdbffff 	.word	0x3fdbffff
 8007b3c:	3ff00000 	.word	0x3ff00000
 8007b40:	3ff2ffff 	.word	0x3ff2ffff
 8007b44:	40038000 	.word	0x40038000
 8007b48:	3ff80000 	.word	0x3ff80000
 8007b4c:	bff00000 	.word	0xbff00000
 8007b50:	08009320 	.word	0x08009320
 8007b54:	08009340 	.word	0x08009340

08007b58 <fabs>:
 8007b58:	ec51 0b10 	vmov	r0, r1, d0
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007b62:	ec43 2b10 	vmov	d0, r2, r3
 8007b66:	4770      	bx	lr

08007b68 <finite>:
 8007b68:	b082      	sub	sp, #8
 8007b6a:	ed8d 0b00 	vstr	d0, [sp]
 8007b6e:	9801      	ldr	r0, [sp, #4]
 8007b70:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8007b74:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007b78:	0fc0      	lsrs	r0, r0, #31
 8007b7a:	b002      	add	sp, #8
 8007b7c:	4770      	bx	lr
	...

08007b80 <nan>:
 8007b80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007b88 <nan+0x8>
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	7ff80000 	.word	0x7ff80000

08007b90 <__ieee754_sqrt>:
 8007b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	4a68      	ldr	r2, [pc, #416]	@ (8007d38 <__ieee754_sqrt+0x1a8>)
 8007b96:	ec55 4b10 	vmov	r4, r5, d0
 8007b9a:	43aa      	bics	r2, r5
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	d110      	bne.n	8007bc4 <__ieee754_sqrt+0x34>
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f7f8 fcca 	bl	8000540 <__aeabi_dmul>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	f7f8 fb0e 	bl	80001d4 <__adddf3>
 8007bb8:	4604      	mov	r4, r0
 8007bba:	460d      	mov	r5, r1
 8007bbc:	ec45 4b10 	vmov	d0, r4, r5
 8007bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc4:	2d00      	cmp	r5, #0
 8007bc6:	dc0e      	bgt.n	8007be6 <__ieee754_sqrt+0x56>
 8007bc8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007bcc:	4322      	orrs	r2, r4
 8007bce:	d0f5      	beq.n	8007bbc <__ieee754_sqrt+0x2c>
 8007bd0:	b19d      	cbz	r5, 8007bfa <__ieee754_sqrt+0x6a>
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	f7f8 fafa 	bl	80001d0 <__aeabi_dsub>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	f7f8 fdd8 	bl	8000794 <__aeabi_ddiv>
 8007be4:	e7e8      	b.n	8007bb8 <__ieee754_sqrt+0x28>
 8007be6:	152a      	asrs	r2, r5, #20
 8007be8:	d115      	bne.n	8007c16 <__ieee754_sqrt+0x86>
 8007bea:	2000      	movs	r0, #0
 8007bec:	e009      	b.n	8007c02 <__ieee754_sqrt+0x72>
 8007bee:	0acb      	lsrs	r3, r1, #11
 8007bf0:	3a15      	subs	r2, #21
 8007bf2:	0549      	lsls	r1, r1, #21
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0fa      	beq.n	8007bee <__ieee754_sqrt+0x5e>
 8007bf8:	e7f7      	b.n	8007bea <__ieee754_sqrt+0x5a>
 8007bfa:	462a      	mov	r2, r5
 8007bfc:	e7fa      	b.n	8007bf4 <__ieee754_sqrt+0x64>
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	3001      	adds	r0, #1
 8007c02:	02dc      	lsls	r4, r3, #11
 8007c04:	d5fb      	bpl.n	8007bfe <__ieee754_sqrt+0x6e>
 8007c06:	1e44      	subs	r4, r0, #1
 8007c08:	1b12      	subs	r2, r2, r4
 8007c0a:	f1c0 0420 	rsb	r4, r0, #32
 8007c0e:	fa21 f404 	lsr.w	r4, r1, r4
 8007c12:	4323      	orrs	r3, r4
 8007c14:	4081      	lsls	r1, r0
 8007c16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c1a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c22:	07d2      	lsls	r2, r2, #31
 8007c24:	bf5c      	itt	pl
 8007c26:	005b      	lslpl	r3, r3, #1
 8007c28:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c30:	bf58      	it	pl
 8007c32:	0049      	lslpl	r1, r1, #1
 8007c34:	2600      	movs	r6, #0
 8007c36:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007c3a:	106d      	asrs	r5, r5, #1
 8007c3c:	0049      	lsls	r1, r1, #1
 8007c3e:	2016      	movs	r0, #22
 8007c40:	4632      	mov	r2, r6
 8007c42:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007c46:	1917      	adds	r7, r2, r4
 8007c48:	429f      	cmp	r7, r3
 8007c4a:	bfde      	ittt	le
 8007c4c:	193a      	addle	r2, r7, r4
 8007c4e:	1bdb      	suble	r3, r3, r7
 8007c50:	1936      	addle	r6, r6, r4
 8007c52:	0fcf      	lsrs	r7, r1, #31
 8007c54:	3801      	subs	r0, #1
 8007c56:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007c5a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007c5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007c62:	d1f0      	bne.n	8007c46 <__ieee754_sqrt+0xb6>
 8007c64:	4604      	mov	r4, r0
 8007c66:	2720      	movs	r7, #32
 8007c68:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	eb00 0e0c 	add.w	lr, r0, ip
 8007c72:	db02      	blt.n	8007c7a <__ieee754_sqrt+0xea>
 8007c74:	d113      	bne.n	8007c9e <__ieee754_sqrt+0x10e>
 8007c76:	458e      	cmp	lr, r1
 8007c78:	d811      	bhi.n	8007c9e <__ieee754_sqrt+0x10e>
 8007c7a:	f1be 0f00 	cmp.w	lr, #0
 8007c7e:	eb0e 000c 	add.w	r0, lr, ip
 8007c82:	da42      	bge.n	8007d0a <__ieee754_sqrt+0x17a>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	db40      	blt.n	8007d0a <__ieee754_sqrt+0x17a>
 8007c88:	f102 0801 	add.w	r8, r2, #1
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	458e      	cmp	lr, r1
 8007c90:	bf88      	it	hi
 8007c92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007c96:	eba1 010e 	sub.w	r1, r1, lr
 8007c9a:	4464      	add	r4, ip
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007ca2:	3f01      	subs	r7, #1
 8007ca4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007ca8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007cac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007cb0:	d1dc      	bne.n	8007c6c <__ieee754_sqrt+0xdc>
 8007cb2:	4319      	orrs	r1, r3
 8007cb4:	d01b      	beq.n	8007cee <__ieee754_sqrt+0x15e>
 8007cb6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007d3c <__ieee754_sqrt+0x1ac>
 8007cba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007d40 <__ieee754_sqrt+0x1b0>
 8007cbe:	e9da 0100 	ldrd	r0, r1, [sl]
 8007cc2:	e9db 2300 	ldrd	r2, r3, [fp]
 8007cc6:	f7f8 fa83 	bl	80001d0 <__aeabi_dsub>
 8007cca:	e9da 8900 	ldrd	r8, r9, [sl]
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	f7f8 feaf 	bl	8000a38 <__aeabi_dcmple>
 8007cda:	b140      	cbz	r0, 8007cee <__ieee754_sqrt+0x15e>
 8007cdc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007ce0:	e9da 0100 	ldrd	r0, r1, [sl]
 8007ce4:	e9db 2300 	ldrd	r2, r3, [fp]
 8007ce8:	d111      	bne.n	8007d0e <__ieee754_sqrt+0x17e>
 8007cea:	3601      	adds	r6, #1
 8007cec:	463c      	mov	r4, r7
 8007cee:	1072      	asrs	r2, r6, #1
 8007cf0:	0863      	lsrs	r3, r4, #1
 8007cf2:	07f1      	lsls	r1, r6, #31
 8007cf4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007cf8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007cfc:	bf48      	it	mi
 8007cfe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007d02:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007d06:	4618      	mov	r0, r3
 8007d08:	e756      	b.n	8007bb8 <__ieee754_sqrt+0x28>
 8007d0a:	4690      	mov	r8, r2
 8007d0c:	e7be      	b.n	8007c8c <__ieee754_sqrt+0xfc>
 8007d0e:	f7f8 fa61 	bl	80001d4 <__adddf3>
 8007d12:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	f7f8 fe81 	bl	8000a24 <__aeabi_dcmplt>
 8007d22:	b120      	cbz	r0, 8007d2e <__ieee754_sqrt+0x19e>
 8007d24:	1ca0      	adds	r0, r4, #2
 8007d26:	bf08      	it	eq
 8007d28:	3601      	addeq	r6, #1
 8007d2a:	3402      	adds	r4, #2
 8007d2c:	e7df      	b.n	8007cee <__ieee754_sqrt+0x15e>
 8007d2e:	1c63      	adds	r3, r4, #1
 8007d30:	f023 0401 	bic.w	r4, r3, #1
 8007d34:	e7db      	b.n	8007cee <__ieee754_sqrt+0x15e>
 8007d36:	bf00      	nop
 8007d38:	7ff00000 	.word	0x7ff00000
 8007d3c:	20000068 	.word	0x20000068
 8007d40:	20000060 	.word	0x20000060
 8007d44:	00000000 	.word	0x00000000

08007d48 <__ieee754_acos>:
 8007d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	ec55 4b10 	vmov	r4, r5, d0
 8007d50:	49b7      	ldr	r1, [pc, #732]	@ (8008030 <__ieee754_acos+0x2e8>)
 8007d52:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007d56:	428b      	cmp	r3, r1
 8007d58:	d919      	bls.n	8007d8e <__ieee754_acos+0x46>
 8007d5a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8007d5e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007d62:	4323      	orrs	r3, r4
 8007d64:	d106      	bne.n	8007d74 <__ieee754_acos+0x2c>
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	f340 8210 	ble.w	800818c <__ieee754_acos+0x444>
 8007d6c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8007fc0 <__ieee754_acos+0x278>
 8007d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	4622      	mov	r2, r4
 8007d76:	462b      	mov	r3, r5
 8007d78:	4620      	mov	r0, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	f7f8 fa28 	bl	80001d0 <__aeabi_dsub>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	f7f8 fd06 	bl	8000794 <__aeabi_ddiv>
 8007d88:	ec41 0b10 	vmov	d0, r0, r1
 8007d8c:	e7f0      	b.n	8007d70 <__ieee754_acos+0x28>
 8007d8e:	49a9      	ldr	r1, [pc, #676]	@ (8008034 <__ieee754_acos+0x2ec>)
 8007d90:	428b      	cmp	r3, r1
 8007d92:	f200 8085 	bhi.w	8007ea0 <__ieee754_acos+0x158>
 8007d96:	4aa8      	ldr	r2, [pc, #672]	@ (8008038 <__ieee754_acos+0x2f0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	f240 81fa 	bls.w	8008192 <__ieee754_acos+0x44a>
 8007d9e:	4622      	mov	r2, r4
 8007da0:	462b      	mov	r3, r5
 8007da2:	4620      	mov	r0, r4
 8007da4:	4629      	mov	r1, r5
 8007da6:	f7f8 fbcb 	bl	8000540 <__aeabi_dmul>
 8007daa:	a387      	add	r3, pc, #540	@ (adr r3, 8007fc8 <__ieee754_acos+0x280>)
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	4606      	mov	r6, r0
 8007db2:	460f      	mov	r7, r1
 8007db4:	f7f8 fbc4 	bl	8000540 <__aeabi_dmul>
 8007db8:	a385      	add	r3, pc, #532	@ (adr r3, 8007fd0 <__ieee754_acos+0x288>)
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f7f8 fa09 	bl	80001d4 <__adddf3>
 8007dc2:	4632      	mov	r2, r6
 8007dc4:	463b      	mov	r3, r7
 8007dc6:	f7f8 fbbb 	bl	8000540 <__aeabi_dmul>
 8007dca:	a383      	add	r3, pc, #524	@ (adr r3, 8007fd8 <__ieee754_acos+0x290>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f7f8 f9fe 	bl	80001d0 <__aeabi_dsub>
 8007dd4:	4632      	mov	r2, r6
 8007dd6:	463b      	mov	r3, r7
 8007dd8:	f7f8 fbb2 	bl	8000540 <__aeabi_dmul>
 8007ddc:	a380      	add	r3, pc, #512	@ (adr r3, 8007fe0 <__ieee754_acos+0x298>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7f8 f9f7 	bl	80001d4 <__adddf3>
 8007de6:	4632      	mov	r2, r6
 8007de8:	463b      	mov	r3, r7
 8007dea:	f7f8 fba9 	bl	8000540 <__aeabi_dmul>
 8007dee:	a37e      	add	r3, pc, #504	@ (adr r3, 8007fe8 <__ieee754_acos+0x2a0>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 f9ec 	bl	80001d0 <__aeabi_dsub>
 8007df8:	4632      	mov	r2, r6
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	f7f8 fba0 	bl	8000540 <__aeabi_dmul>
 8007e00:	a37b      	add	r3, pc, #492	@ (adr r3, 8007ff0 <__ieee754_acos+0x2a8>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 f9e5 	bl	80001d4 <__adddf3>
 8007e0a:	4632      	mov	r2, r6
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	f7f8 fb97 	bl	8000540 <__aeabi_dmul>
 8007e12:	a379      	add	r3, pc, #484	@ (adr r3, 8007ff8 <__ieee754_acos+0x2b0>)
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4639      	mov	r1, r7
 8007e20:	f7f8 fb8e 	bl	8000540 <__aeabi_dmul>
 8007e24:	a376      	add	r3, pc, #472	@ (adr r3, 8008000 <__ieee754_acos+0x2b8>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f7f8 f9d1 	bl	80001d0 <__aeabi_dsub>
 8007e2e:	4632      	mov	r2, r6
 8007e30:	463b      	mov	r3, r7
 8007e32:	f7f8 fb85 	bl	8000540 <__aeabi_dmul>
 8007e36:	a374      	add	r3, pc, #464	@ (adr r3, 8008008 <__ieee754_acos+0x2c0>)
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f7f8 f9ca 	bl	80001d4 <__adddf3>
 8007e40:	4632      	mov	r2, r6
 8007e42:	463b      	mov	r3, r7
 8007e44:	f7f8 fb7c 	bl	8000540 <__aeabi_dmul>
 8007e48:	a371      	add	r3, pc, #452	@ (adr r3, 8008010 <__ieee754_acos+0x2c8>)
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	f7f8 f9bf 	bl	80001d0 <__aeabi_dsub>
 8007e52:	4632      	mov	r2, r6
 8007e54:	463b      	mov	r3, r7
 8007e56:	f7f8 fb73 	bl	8000540 <__aeabi_dmul>
 8007e5a:	4b78      	ldr	r3, [pc, #480]	@ (800803c <__ieee754_acos+0x2f4>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f7f8 f9b9 	bl	80001d4 <__adddf3>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f7f8 fc93 	bl	8000794 <__aeabi_ddiv>
 8007e6e:	4622      	mov	r2, r4
 8007e70:	462b      	mov	r3, r5
 8007e72:	f7f8 fb65 	bl	8000540 <__aeabi_dmul>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	a167      	add	r1, pc, #412	@ (adr r1, 8008018 <__ieee754_acos+0x2d0>)
 8007e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e80:	f7f8 f9a6 	bl	80001d0 <__aeabi_dsub>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4620      	mov	r0, r4
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	f7f8 f9a0 	bl	80001d0 <__aeabi_dsub>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	a162      	add	r1, pc, #392	@ (adr r1, 8008020 <__ieee754_acos+0x2d8>)
 8007e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e9a:	f7f8 f999 	bl	80001d0 <__aeabi_dsub>
 8007e9e:	e773      	b.n	8007d88 <__ieee754_acos+0x40>
 8007ea0:	2d00      	cmp	r5, #0
 8007ea2:	f280 80cf 	bge.w	8008044 <__ieee754_acos+0x2fc>
 8007ea6:	4b65      	ldr	r3, [pc, #404]	@ (800803c <__ieee754_acos+0x2f4>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4620      	mov	r0, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7f8 f991 	bl	80001d4 <__adddf3>
 8007eb2:	4b63      	ldr	r3, [pc, #396]	@ (8008040 <__ieee754_acos+0x2f8>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f7f8 fb43 	bl	8000540 <__aeabi_dmul>
 8007eba:	a343      	add	r3, pc, #268	@ (adr r3, 8007fc8 <__ieee754_acos+0x280>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	f7f8 fb3c 	bl	8000540 <__aeabi_dmul>
 8007ec8:	a341      	add	r3, pc, #260	@ (adr r3, 8007fd0 <__ieee754_acos+0x288>)
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	f7f8 f981 	bl	80001d4 <__adddf3>
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	462b      	mov	r3, r5
 8007ed6:	f7f8 fb33 	bl	8000540 <__aeabi_dmul>
 8007eda:	a33f      	add	r3, pc, #252	@ (adr r3, 8007fd8 <__ieee754_acos+0x290>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f7f8 f976 	bl	80001d0 <__aeabi_dsub>
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	462b      	mov	r3, r5
 8007ee8:	f7f8 fb2a 	bl	8000540 <__aeabi_dmul>
 8007eec:	a33c      	add	r3, pc, #240	@ (adr r3, 8007fe0 <__ieee754_acos+0x298>)
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	f7f8 f96f 	bl	80001d4 <__adddf3>
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	462b      	mov	r3, r5
 8007efa:	f7f8 fb21 	bl	8000540 <__aeabi_dmul>
 8007efe:	a33a      	add	r3, pc, #232	@ (adr r3, 8007fe8 <__ieee754_acos+0x2a0>)
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f7f8 f964 	bl	80001d0 <__aeabi_dsub>
 8007f08:	4622      	mov	r2, r4
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	f7f8 fb18 	bl	8000540 <__aeabi_dmul>
 8007f10:	a337      	add	r3, pc, #220	@ (adr r3, 8007ff0 <__ieee754_acos+0x2a8>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	f7f8 f95d 	bl	80001d4 <__adddf3>
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	462b      	mov	r3, r5
 8007f1e:	f7f8 fb0f 	bl	8000540 <__aeabi_dmul>
 8007f22:	a335      	add	r3, pc, #212	@ (adr r3, 8007ff8 <__ieee754_acos+0x2b0>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	4606      	mov	r6, r0
 8007f2a:	460f      	mov	r7, r1
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	4629      	mov	r1, r5
 8007f30:	f7f8 fb06 	bl	8000540 <__aeabi_dmul>
 8007f34:	a332      	add	r3, pc, #200	@ (adr r3, 8008000 <__ieee754_acos+0x2b8>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	f7f8 f949 	bl	80001d0 <__aeabi_dsub>
 8007f3e:	4622      	mov	r2, r4
 8007f40:	462b      	mov	r3, r5
 8007f42:	f7f8 fafd 	bl	8000540 <__aeabi_dmul>
 8007f46:	a330      	add	r3, pc, #192	@ (adr r3, 8008008 <__ieee754_acos+0x2c0>)
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 f942 	bl	80001d4 <__adddf3>
 8007f50:	4622      	mov	r2, r4
 8007f52:	462b      	mov	r3, r5
 8007f54:	f7f8 faf4 	bl	8000540 <__aeabi_dmul>
 8007f58:	a32d      	add	r3, pc, #180	@ (adr r3, 8008010 <__ieee754_acos+0x2c8>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 f937 	bl	80001d0 <__aeabi_dsub>
 8007f62:	4622      	mov	r2, r4
 8007f64:	462b      	mov	r3, r5
 8007f66:	f7f8 faeb 	bl	8000540 <__aeabi_dmul>
 8007f6a:	4b34      	ldr	r3, [pc, #208]	@ (800803c <__ieee754_acos+0x2f4>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f7f8 f931 	bl	80001d4 <__adddf3>
 8007f72:	ec45 4b10 	vmov	d0, r4, r5
 8007f76:	4680      	mov	r8, r0
 8007f78:	4689      	mov	r9, r1
 8007f7a:	f7ff fe09 	bl	8007b90 <__ieee754_sqrt>
 8007f7e:	ec55 4b10 	vmov	r4, r5, d0
 8007f82:	4642      	mov	r2, r8
 8007f84:	464b      	mov	r3, r9
 8007f86:	4630      	mov	r0, r6
 8007f88:	4639      	mov	r1, r7
 8007f8a:	f7f8 fc03 	bl	8000794 <__aeabi_ddiv>
 8007f8e:	4622      	mov	r2, r4
 8007f90:	462b      	mov	r3, r5
 8007f92:	f7f8 fad5 	bl	8000540 <__aeabi_dmul>
 8007f96:	a320      	add	r3, pc, #128	@ (adr r3, 8008018 <__ieee754_acos+0x2d0>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	f7f8 f918 	bl	80001d0 <__aeabi_dsub>
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	462b      	mov	r3, r5
 8007fa4:	f7f8 f916 	bl	80001d4 <__adddf3>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	f7f8 f912 	bl	80001d4 <__adddf3>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	a11c      	add	r1, pc, #112	@ (adr r1, 8008028 <__ieee754_acos+0x2e0>)
 8007fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fba:	e76e      	b.n	8007e9a <__ieee754_acos+0x152>
 8007fbc:	f3af 8000 	nop.w
	...
 8007fc8:	0dfdf709 	.word	0x0dfdf709
 8007fcc:	3f023de1 	.word	0x3f023de1
 8007fd0:	7501b288 	.word	0x7501b288
 8007fd4:	3f49efe0 	.word	0x3f49efe0
 8007fd8:	b5688f3b 	.word	0xb5688f3b
 8007fdc:	3fa48228 	.word	0x3fa48228
 8007fe0:	0e884455 	.word	0x0e884455
 8007fe4:	3fc9c155 	.word	0x3fc9c155
 8007fe8:	03eb6f7d 	.word	0x03eb6f7d
 8007fec:	3fd4d612 	.word	0x3fd4d612
 8007ff0:	55555555 	.word	0x55555555
 8007ff4:	3fc55555 	.word	0x3fc55555
 8007ff8:	b12e9282 	.word	0xb12e9282
 8007ffc:	3fb3b8c5 	.word	0x3fb3b8c5
 8008000:	1b8d0159 	.word	0x1b8d0159
 8008004:	3fe6066c 	.word	0x3fe6066c
 8008008:	9c598ac8 	.word	0x9c598ac8
 800800c:	40002ae5 	.word	0x40002ae5
 8008010:	1c8a2d4b 	.word	0x1c8a2d4b
 8008014:	40033a27 	.word	0x40033a27
 8008018:	33145c07 	.word	0x33145c07
 800801c:	3c91a626 	.word	0x3c91a626
 8008020:	54442d18 	.word	0x54442d18
 8008024:	3ff921fb 	.word	0x3ff921fb
 8008028:	54442d18 	.word	0x54442d18
 800802c:	400921fb 	.word	0x400921fb
 8008030:	3fefffff 	.word	0x3fefffff
 8008034:	3fdfffff 	.word	0x3fdfffff
 8008038:	3c600000 	.word	0x3c600000
 800803c:	3ff00000 	.word	0x3ff00000
 8008040:	3fe00000 	.word	0x3fe00000
 8008044:	4622      	mov	r2, r4
 8008046:	462b      	mov	r3, r5
 8008048:	496b      	ldr	r1, [pc, #428]	@ (80081f8 <__ieee754_acos+0x4b0>)
 800804a:	2000      	movs	r0, #0
 800804c:	f7f8 f8c0 	bl	80001d0 <__aeabi_dsub>
 8008050:	4b6a      	ldr	r3, [pc, #424]	@ (80081fc <__ieee754_acos+0x4b4>)
 8008052:	2200      	movs	r2, #0
 8008054:	f7f8 fa74 	bl	8000540 <__aeabi_dmul>
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	ec45 4b10 	vmov	d0, r4, r5
 8008060:	f7ff fd96 	bl	8007b90 <__ieee754_sqrt>
 8008064:	a34c      	add	r3, pc, #304	@ (adr r3, 8008198 <__ieee754_acos+0x450>)
 8008066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806a:	4620      	mov	r0, r4
 800806c:	4629      	mov	r1, r5
 800806e:	ec59 8b10 	vmov	r8, r9, d0
 8008072:	f7f8 fa65 	bl	8000540 <__aeabi_dmul>
 8008076:	a34a      	add	r3, pc, #296	@ (adr r3, 80081a0 <__ieee754_acos+0x458>)
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	f7f8 f8aa 	bl	80001d4 <__adddf3>
 8008080:	4622      	mov	r2, r4
 8008082:	462b      	mov	r3, r5
 8008084:	f7f8 fa5c 	bl	8000540 <__aeabi_dmul>
 8008088:	a347      	add	r3, pc, #284	@ (adr r3, 80081a8 <__ieee754_acos+0x460>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 f89f 	bl	80001d0 <__aeabi_dsub>
 8008092:	4622      	mov	r2, r4
 8008094:	462b      	mov	r3, r5
 8008096:	f7f8 fa53 	bl	8000540 <__aeabi_dmul>
 800809a:	a345      	add	r3, pc, #276	@ (adr r3, 80081b0 <__ieee754_acos+0x468>)
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	f7f8 f898 	bl	80001d4 <__adddf3>
 80080a4:	4622      	mov	r2, r4
 80080a6:	462b      	mov	r3, r5
 80080a8:	f7f8 fa4a 	bl	8000540 <__aeabi_dmul>
 80080ac:	a342      	add	r3, pc, #264	@ (adr r3, 80081b8 <__ieee754_acos+0x470>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 f88d 	bl	80001d0 <__aeabi_dsub>
 80080b6:	4622      	mov	r2, r4
 80080b8:	462b      	mov	r3, r5
 80080ba:	f7f8 fa41 	bl	8000540 <__aeabi_dmul>
 80080be:	a340      	add	r3, pc, #256	@ (adr r3, 80081c0 <__ieee754_acos+0x478>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f7f8 f886 	bl	80001d4 <__adddf3>
 80080c8:	4622      	mov	r2, r4
 80080ca:	462b      	mov	r3, r5
 80080cc:	f7f8 fa38 	bl	8000540 <__aeabi_dmul>
 80080d0:	a33d      	add	r3, pc, #244	@ (adr r3, 80081c8 <__ieee754_acos+0x480>)
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	4682      	mov	sl, r0
 80080d8:	468b      	mov	fp, r1
 80080da:	4620      	mov	r0, r4
 80080dc:	4629      	mov	r1, r5
 80080de:	f7f8 fa2f 	bl	8000540 <__aeabi_dmul>
 80080e2:	a33b      	add	r3, pc, #236	@ (adr r3, 80081d0 <__ieee754_acos+0x488>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f872 	bl	80001d0 <__aeabi_dsub>
 80080ec:	4622      	mov	r2, r4
 80080ee:	462b      	mov	r3, r5
 80080f0:	f7f8 fa26 	bl	8000540 <__aeabi_dmul>
 80080f4:	a338      	add	r3, pc, #224	@ (adr r3, 80081d8 <__ieee754_acos+0x490>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f86b 	bl	80001d4 <__adddf3>
 80080fe:	4622      	mov	r2, r4
 8008100:	462b      	mov	r3, r5
 8008102:	f7f8 fa1d 	bl	8000540 <__aeabi_dmul>
 8008106:	a336      	add	r3, pc, #216	@ (adr r3, 80081e0 <__ieee754_acos+0x498>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 f860 	bl	80001d0 <__aeabi_dsub>
 8008110:	4622      	mov	r2, r4
 8008112:	462b      	mov	r3, r5
 8008114:	f7f8 fa14 	bl	8000540 <__aeabi_dmul>
 8008118:	4b37      	ldr	r3, [pc, #220]	@ (80081f8 <__ieee754_acos+0x4b0>)
 800811a:	2200      	movs	r2, #0
 800811c:	f7f8 f85a 	bl	80001d4 <__adddf3>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4650      	mov	r0, sl
 8008126:	4659      	mov	r1, fp
 8008128:	f7f8 fb34 	bl	8000794 <__aeabi_ddiv>
 800812c:	4642      	mov	r2, r8
 800812e:	464b      	mov	r3, r9
 8008130:	f7f8 fa06 	bl	8000540 <__aeabi_dmul>
 8008134:	2600      	movs	r6, #0
 8008136:	4682      	mov	sl, r0
 8008138:	468b      	mov	fp, r1
 800813a:	4632      	mov	r2, r6
 800813c:	464b      	mov	r3, r9
 800813e:	4630      	mov	r0, r6
 8008140:	4649      	mov	r1, r9
 8008142:	f7f8 f9fd 	bl	8000540 <__aeabi_dmul>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 f83f 	bl	80001d0 <__aeabi_dsub>
 8008152:	4632      	mov	r2, r6
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	464b      	mov	r3, r9
 800815a:	4640      	mov	r0, r8
 800815c:	4649      	mov	r1, r9
 800815e:	f7f8 f839 	bl	80001d4 <__adddf3>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 fb13 	bl	8000794 <__aeabi_ddiv>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4650      	mov	r0, sl
 8008174:	4659      	mov	r1, fp
 8008176:	f7f8 f82d 	bl	80001d4 <__adddf3>
 800817a:	4632      	mov	r2, r6
 800817c:	464b      	mov	r3, r9
 800817e:	f7f8 f829 	bl	80001d4 <__adddf3>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	f7f8 f825 	bl	80001d4 <__adddf3>
 800818a:	e5fd      	b.n	8007d88 <__ieee754_acos+0x40>
 800818c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80081e8 <__ieee754_acos+0x4a0>
 8008190:	e5ee      	b.n	8007d70 <__ieee754_acos+0x28>
 8008192:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80081f0 <__ieee754_acos+0x4a8>
 8008196:	e5eb      	b.n	8007d70 <__ieee754_acos+0x28>
 8008198:	0dfdf709 	.word	0x0dfdf709
 800819c:	3f023de1 	.word	0x3f023de1
 80081a0:	7501b288 	.word	0x7501b288
 80081a4:	3f49efe0 	.word	0x3f49efe0
 80081a8:	b5688f3b 	.word	0xb5688f3b
 80081ac:	3fa48228 	.word	0x3fa48228
 80081b0:	0e884455 	.word	0x0e884455
 80081b4:	3fc9c155 	.word	0x3fc9c155
 80081b8:	03eb6f7d 	.word	0x03eb6f7d
 80081bc:	3fd4d612 	.word	0x3fd4d612
 80081c0:	55555555 	.word	0x55555555
 80081c4:	3fc55555 	.word	0x3fc55555
 80081c8:	b12e9282 	.word	0xb12e9282
 80081cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80081d0:	1b8d0159 	.word	0x1b8d0159
 80081d4:	3fe6066c 	.word	0x3fe6066c
 80081d8:	9c598ac8 	.word	0x9c598ac8
 80081dc:	40002ae5 	.word	0x40002ae5
 80081e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80081e4:	40033a27 	.word	0x40033a27
 80081e8:	54442d18 	.word	0x54442d18
 80081ec:	400921fb 	.word	0x400921fb
 80081f0:	54442d18 	.word	0x54442d18
 80081f4:	3ff921fb 	.word	0x3ff921fb
 80081f8:	3ff00000 	.word	0x3ff00000
 80081fc:	3fe00000 	.word	0x3fe00000

08008200 <__ieee754_asin>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	ec55 4b10 	vmov	r4, r5, d0
 8008208:	4bc7      	ldr	r3, [pc, #796]	@ (8008528 <__ieee754_asin+0x328>)
 800820a:	b087      	sub	sp, #28
 800820c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008210:	429e      	cmp	r6, r3
 8008212:	9501      	str	r5, [sp, #4]
 8008214:	d92d      	bls.n	8008272 <__ieee754_asin+0x72>
 8008216:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800821a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800821e:	4326      	orrs	r6, r4
 8008220:	d116      	bne.n	8008250 <__ieee754_asin+0x50>
 8008222:	a3a7      	add	r3, pc, #668	@ (adr r3, 80084c0 <__ieee754_asin+0x2c0>)
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	4620      	mov	r0, r4
 800822a:	4629      	mov	r1, r5
 800822c:	f7f8 f988 	bl	8000540 <__aeabi_dmul>
 8008230:	a3a5      	add	r3, pc, #660	@ (adr r3, 80084c8 <__ieee754_asin+0x2c8>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	4606      	mov	r6, r0
 8008238:	460f      	mov	r7, r1
 800823a:	4620      	mov	r0, r4
 800823c:	4629      	mov	r1, r5
 800823e:	f7f8 f97f 	bl	8000540 <__aeabi_dmul>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f7 ffc3 	bl	80001d4 <__adddf3>
 800824e:	e009      	b.n	8008264 <__ieee754_asin+0x64>
 8008250:	4622      	mov	r2, r4
 8008252:	462b      	mov	r3, r5
 8008254:	4620      	mov	r0, r4
 8008256:	4629      	mov	r1, r5
 8008258:	f7f7 ffba 	bl	80001d0 <__aeabi_dsub>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	f7f8 fa98 	bl	8000794 <__aeabi_ddiv>
 8008264:	4604      	mov	r4, r0
 8008266:	460d      	mov	r5, r1
 8008268:	ec45 4b10 	vmov	d0, r4, r5
 800826c:	b007      	add	sp, #28
 800826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008272:	4bae      	ldr	r3, [pc, #696]	@ (800852c <__ieee754_asin+0x32c>)
 8008274:	429e      	cmp	r6, r3
 8008276:	d810      	bhi.n	800829a <__ieee754_asin+0x9a>
 8008278:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800827c:	f080 80ad 	bcs.w	80083da <__ieee754_asin+0x1da>
 8008280:	a393      	add	r3, pc, #588	@ (adr r3, 80084d0 <__ieee754_asin+0x2d0>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f7 ffa3 	bl	80001d4 <__adddf3>
 800828e:	4ba8      	ldr	r3, [pc, #672]	@ (8008530 <__ieee754_asin+0x330>)
 8008290:	2200      	movs	r2, #0
 8008292:	f7f8 fbe5 	bl	8000a60 <__aeabi_dcmpgt>
 8008296:	2800      	cmp	r0, #0
 8008298:	d1e6      	bne.n	8008268 <__ieee754_asin+0x68>
 800829a:	ec45 4b10 	vmov	d0, r4, r5
 800829e:	f7ff fc5b 	bl	8007b58 <fabs>
 80082a2:	49a3      	ldr	r1, [pc, #652]	@ (8008530 <__ieee754_asin+0x330>)
 80082a4:	ec53 2b10 	vmov	r2, r3, d0
 80082a8:	2000      	movs	r0, #0
 80082aa:	f7f7 ff91 	bl	80001d0 <__aeabi_dsub>
 80082ae:	4ba1      	ldr	r3, [pc, #644]	@ (8008534 <__ieee754_asin+0x334>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	f7f8 f945 	bl	8000540 <__aeabi_dmul>
 80082b6:	a388      	add	r3, pc, #544	@ (adr r3, 80084d8 <__ieee754_asin+0x2d8>)
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	4604      	mov	r4, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	f7f8 f93e 	bl	8000540 <__aeabi_dmul>
 80082c4:	a386      	add	r3, pc, #536	@ (adr r3, 80084e0 <__ieee754_asin+0x2e0>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 ff83 	bl	80001d4 <__adddf3>
 80082ce:	4622      	mov	r2, r4
 80082d0:	462b      	mov	r3, r5
 80082d2:	f7f8 f935 	bl	8000540 <__aeabi_dmul>
 80082d6:	a384      	add	r3, pc, #528	@ (adr r3, 80084e8 <__ieee754_asin+0x2e8>)
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	f7f7 ff78 	bl	80001d0 <__aeabi_dsub>
 80082e0:	4622      	mov	r2, r4
 80082e2:	462b      	mov	r3, r5
 80082e4:	f7f8 f92c 	bl	8000540 <__aeabi_dmul>
 80082e8:	a381      	add	r3, pc, #516	@ (adr r3, 80084f0 <__ieee754_asin+0x2f0>)
 80082ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ee:	f7f7 ff71 	bl	80001d4 <__adddf3>
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	f7f8 f923 	bl	8000540 <__aeabi_dmul>
 80082fa:	a37f      	add	r3, pc, #508	@ (adr r3, 80084f8 <__ieee754_asin+0x2f8>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	f7f7 ff66 	bl	80001d0 <__aeabi_dsub>
 8008304:	4622      	mov	r2, r4
 8008306:	462b      	mov	r3, r5
 8008308:	f7f8 f91a 	bl	8000540 <__aeabi_dmul>
 800830c:	a37c      	add	r3, pc, #496	@ (adr r3, 8008500 <__ieee754_asin+0x300>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f7f7 ff5f 	bl	80001d4 <__adddf3>
 8008316:	4622      	mov	r2, r4
 8008318:	462b      	mov	r3, r5
 800831a:	f7f8 f911 	bl	8000540 <__aeabi_dmul>
 800831e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008508 <__ieee754_asin+0x308>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008328:	4620      	mov	r0, r4
 800832a:	4629      	mov	r1, r5
 800832c:	f7f8 f908 	bl	8000540 <__aeabi_dmul>
 8008330:	a377      	add	r3, pc, #476	@ (adr r3, 8008510 <__ieee754_asin+0x310>)
 8008332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008336:	f7f7 ff4b 	bl	80001d0 <__aeabi_dsub>
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	f7f8 f8ff 	bl	8000540 <__aeabi_dmul>
 8008342:	a375      	add	r3, pc, #468	@ (adr r3, 8008518 <__ieee754_asin+0x318>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f7f7 ff44 	bl	80001d4 <__adddf3>
 800834c:	4622      	mov	r2, r4
 800834e:	462b      	mov	r3, r5
 8008350:	f7f8 f8f6 	bl	8000540 <__aeabi_dmul>
 8008354:	a372      	add	r3, pc, #456	@ (adr r3, 8008520 <__ieee754_asin+0x320>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f7 ff39 	bl	80001d0 <__aeabi_dsub>
 800835e:	4622      	mov	r2, r4
 8008360:	462b      	mov	r3, r5
 8008362:	f7f8 f8ed 	bl	8000540 <__aeabi_dmul>
 8008366:	4b72      	ldr	r3, [pc, #456]	@ (8008530 <__ieee754_asin+0x330>)
 8008368:	2200      	movs	r2, #0
 800836a:	f7f7 ff33 	bl	80001d4 <__adddf3>
 800836e:	ec45 4b10 	vmov	d0, r4, r5
 8008372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008376:	f7ff fc0b 	bl	8007b90 <__ieee754_sqrt>
 800837a:	4b6f      	ldr	r3, [pc, #444]	@ (8008538 <__ieee754_asin+0x338>)
 800837c:	429e      	cmp	r6, r3
 800837e:	ec5b ab10 	vmov	sl, fp, d0
 8008382:	f240 80db 	bls.w	800853c <__ieee754_asin+0x33c>
 8008386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800838a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838e:	f7f8 fa01 	bl	8000794 <__aeabi_ddiv>
 8008392:	4652      	mov	r2, sl
 8008394:	465b      	mov	r3, fp
 8008396:	f7f8 f8d3 	bl	8000540 <__aeabi_dmul>
 800839a:	4652      	mov	r2, sl
 800839c:	465b      	mov	r3, fp
 800839e:	f7f7 ff19 	bl	80001d4 <__adddf3>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	f7f7 ff15 	bl	80001d4 <__adddf3>
 80083aa:	a347      	add	r3, pc, #284	@ (adr r3, 80084c8 <__ieee754_asin+0x2c8>)
 80083ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b0:	f7f7 ff0e 	bl	80001d0 <__aeabi_dsub>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	a141      	add	r1, pc, #260	@ (adr r1, 80084c0 <__ieee754_asin+0x2c0>)
 80083ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083be:	f7f7 ff07 	bl	80001d0 <__aeabi_dsub>
 80083c2:	9b01      	ldr	r3, [sp, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bfdc      	itt	le
 80083c8:	4602      	movle	r2, r0
 80083ca:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80083ce:	4604      	mov	r4, r0
 80083d0:	460d      	mov	r5, r1
 80083d2:	bfdc      	itt	le
 80083d4:	4614      	movle	r4, r2
 80083d6:	461d      	movle	r5, r3
 80083d8:	e746      	b.n	8008268 <__ieee754_asin+0x68>
 80083da:	4622      	mov	r2, r4
 80083dc:	462b      	mov	r3, r5
 80083de:	4620      	mov	r0, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	f7f8 f8ad 	bl	8000540 <__aeabi_dmul>
 80083e6:	a33c      	add	r3, pc, #240	@ (adr r3, 80084d8 <__ieee754_asin+0x2d8>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	4606      	mov	r6, r0
 80083ee:	460f      	mov	r7, r1
 80083f0:	f7f8 f8a6 	bl	8000540 <__aeabi_dmul>
 80083f4:	a33a      	add	r3, pc, #232	@ (adr r3, 80084e0 <__ieee754_asin+0x2e0>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f7f7 feeb 	bl	80001d4 <__adddf3>
 80083fe:	4632      	mov	r2, r6
 8008400:	463b      	mov	r3, r7
 8008402:	f7f8 f89d 	bl	8000540 <__aeabi_dmul>
 8008406:	a338      	add	r3, pc, #224	@ (adr r3, 80084e8 <__ieee754_asin+0x2e8>)
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	f7f7 fee0 	bl	80001d0 <__aeabi_dsub>
 8008410:	4632      	mov	r2, r6
 8008412:	463b      	mov	r3, r7
 8008414:	f7f8 f894 	bl	8000540 <__aeabi_dmul>
 8008418:	a335      	add	r3, pc, #212	@ (adr r3, 80084f0 <__ieee754_asin+0x2f0>)
 800841a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841e:	f7f7 fed9 	bl	80001d4 <__adddf3>
 8008422:	4632      	mov	r2, r6
 8008424:	463b      	mov	r3, r7
 8008426:	f7f8 f88b 	bl	8000540 <__aeabi_dmul>
 800842a:	a333      	add	r3, pc, #204	@ (adr r3, 80084f8 <__ieee754_asin+0x2f8>)
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	f7f7 fece 	bl	80001d0 <__aeabi_dsub>
 8008434:	4632      	mov	r2, r6
 8008436:	463b      	mov	r3, r7
 8008438:	f7f8 f882 	bl	8000540 <__aeabi_dmul>
 800843c:	a330      	add	r3, pc, #192	@ (adr r3, 8008500 <__ieee754_asin+0x300>)
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f7f7 fec7 	bl	80001d4 <__adddf3>
 8008446:	4632      	mov	r2, r6
 8008448:	463b      	mov	r3, r7
 800844a:	f7f8 f879 	bl	8000540 <__aeabi_dmul>
 800844e:	a32e      	add	r3, pc, #184	@ (adr r3, 8008508 <__ieee754_asin+0x308>)
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	4680      	mov	r8, r0
 8008456:	4689      	mov	r9, r1
 8008458:	4630      	mov	r0, r6
 800845a:	4639      	mov	r1, r7
 800845c:	f7f8 f870 	bl	8000540 <__aeabi_dmul>
 8008460:	a32b      	add	r3, pc, #172	@ (adr r3, 8008510 <__ieee754_asin+0x310>)
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f7f7 feb3 	bl	80001d0 <__aeabi_dsub>
 800846a:	4632      	mov	r2, r6
 800846c:	463b      	mov	r3, r7
 800846e:	f7f8 f867 	bl	8000540 <__aeabi_dmul>
 8008472:	a329      	add	r3, pc, #164	@ (adr r3, 8008518 <__ieee754_asin+0x318>)
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f7f7 feac 	bl	80001d4 <__adddf3>
 800847c:	4632      	mov	r2, r6
 800847e:	463b      	mov	r3, r7
 8008480:	f7f8 f85e 	bl	8000540 <__aeabi_dmul>
 8008484:	a326      	add	r3, pc, #152	@ (adr r3, 8008520 <__ieee754_asin+0x320>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f7f7 fea1 	bl	80001d0 <__aeabi_dsub>
 800848e:	4632      	mov	r2, r6
 8008490:	463b      	mov	r3, r7
 8008492:	f7f8 f855 	bl	8000540 <__aeabi_dmul>
 8008496:	4b26      	ldr	r3, [pc, #152]	@ (8008530 <__ieee754_asin+0x330>)
 8008498:	2200      	movs	r2, #0
 800849a:	f7f7 fe9b 	bl	80001d4 <__adddf3>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	f7f8 f975 	bl	8000794 <__aeabi_ddiv>
 80084aa:	4622      	mov	r2, r4
 80084ac:	462b      	mov	r3, r5
 80084ae:	f7f8 f847 	bl	8000540 <__aeabi_dmul>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4620      	mov	r0, r4
 80084b8:	4629      	mov	r1, r5
 80084ba:	e6c6      	b.n	800824a <__ieee754_asin+0x4a>
 80084bc:	f3af 8000 	nop.w
 80084c0:	54442d18 	.word	0x54442d18
 80084c4:	3ff921fb 	.word	0x3ff921fb
 80084c8:	33145c07 	.word	0x33145c07
 80084cc:	3c91a626 	.word	0x3c91a626
 80084d0:	8800759c 	.word	0x8800759c
 80084d4:	7e37e43c 	.word	0x7e37e43c
 80084d8:	0dfdf709 	.word	0x0dfdf709
 80084dc:	3f023de1 	.word	0x3f023de1
 80084e0:	7501b288 	.word	0x7501b288
 80084e4:	3f49efe0 	.word	0x3f49efe0
 80084e8:	b5688f3b 	.word	0xb5688f3b
 80084ec:	3fa48228 	.word	0x3fa48228
 80084f0:	0e884455 	.word	0x0e884455
 80084f4:	3fc9c155 	.word	0x3fc9c155
 80084f8:	03eb6f7d 	.word	0x03eb6f7d
 80084fc:	3fd4d612 	.word	0x3fd4d612
 8008500:	55555555 	.word	0x55555555
 8008504:	3fc55555 	.word	0x3fc55555
 8008508:	b12e9282 	.word	0xb12e9282
 800850c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008510:	1b8d0159 	.word	0x1b8d0159
 8008514:	3fe6066c 	.word	0x3fe6066c
 8008518:	9c598ac8 	.word	0x9c598ac8
 800851c:	40002ae5 	.word	0x40002ae5
 8008520:	1c8a2d4b 	.word	0x1c8a2d4b
 8008524:	40033a27 	.word	0x40033a27
 8008528:	3fefffff 	.word	0x3fefffff
 800852c:	3fdfffff 	.word	0x3fdfffff
 8008530:	3ff00000 	.word	0x3ff00000
 8008534:	3fe00000 	.word	0x3fe00000
 8008538:	3fef3332 	.word	0x3fef3332
 800853c:	4652      	mov	r2, sl
 800853e:	465b      	mov	r3, fp
 8008540:	4650      	mov	r0, sl
 8008542:	4659      	mov	r1, fp
 8008544:	f7f7 fe46 	bl	80001d4 <__adddf3>
 8008548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800854c:	4606      	mov	r6, r0
 800854e:	460f      	mov	r7, r1
 8008550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008554:	f7f8 f91e 	bl	8000794 <__aeabi_ddiv>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4630      	mov	r0, r6
 800855e:	4639      	mov	r1, r7
 8008560:	f7f7 ffee 	bl	8000540 <__aeabi_dmul>
 8008564:	f04f 0800 	mov.w	r8, #0
 8008568:	4606      	mov	r6, r0
 800856a:	460f      	mov	r7, r1
 800856c:	4642      	mov	r2, r8
 800856e:	465b      	mov	r3, fp
 8008570:	4640      	mov	r0, r8
 8008572:	4659      	mov	r1, fp
 8008574:	f7f7 ffe4 	bl	8000540 <__aeabi_dmul>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f7f7 fe26 	bl	80001d0 <__aeabi_dsub>
 8008584:	4642      	mov	r2, r8
 8008586:	4604      	mov	r4, r0
 8008588:	460d      	mov	r5, r1
 800858a:	465b      	mov	r3, fp
 800858c:	4650      	mov	r0, sl
 800858e:	4659      	mov	r1, fp
 8008590:	f7f7 fe20 	bl	80001d4 <__adddf3>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4620      	mov	r0, r4
 800859a:	4629      	mov	r1, r5
 800859c:	f7f8 f8fa 	bl	8000794 <__aeabi_ddiv>
 80085a0:	4602      	mov	r2, r0
 80085a2:	460b      	mov	r3, r1
 80085a4:	f7f7 fe16 	bl	80001d4 <__adddf3>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	a112      	add	r1, pc, #72	@ (adr r1, 80085f8 <__ieee754_asin+0x3f8>)
 80085ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085b2:	f7f7 fe0d 	bl	80001d0 <__aeabi_dsub>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4630      	mov	r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	f7f7 fe07 	bl	80001d0 <__aeabi_dsub>
 80085c2:	4642      	mov	r2, r8
 80085c4:	4604      	mov	r4, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	465b      	mov	r3, fp
 80085ca:	4640      	mov	r0, r8
 80085cc:	4659      	mov	r1, fp
 80085ce:	f7f7 fe01 	bl	80001d4 <__adddf3>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	a10a      	add	r1, pc, #40	@ (adr r1, 8008600 <__ieee754_asin+0x400>)
 80085d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085dc:	f7f7 fdf8 	bl	80001d0 <__aeabi_dsub>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4620      	mov	r0, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f7 fdf2 	bl	80001d0 <__aeabi_dsub>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	a103      	add	r1, pc, #12	@ (adr r1, 8008600 <__ieee754_asin+0x400>)
 80085f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085f6:	e6e2      	b.n	80083be <__ieee754_asin+0x1be>
 80085f8:	33145c07 	.word	0x33145c07
 80085fc:	3c91a626 	.word	0x3c91a626
 8008600:	54442d18 	.word	0x54442d18
 8008604:	3fe921fb 	.word	0x3fe921fb

08008608 <__ieee754_pow>:
 8008608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	b091      	sub	sp, #68	@ 0x44
 800860e:	ed8d 1b00 	vstr	d1, [sp]
 8008612:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008616:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800861a:	ea5a 0001 	orrs.w	r0, sl, r1
 800861e:	ec57 6b10 	vmov	r6, r7, d0
 8008622:	d113      	bne.n	800864c <__ieee754_pow+0x44>
 8008624:	19b3      	adds	r3, r6, r6
 8008626:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800862a:	4152      	adcs	r2, r2
 800862c:	4298      	cmp	r0, r3
 800862e:	4b98      	ldr	r3, [pc, #608]	@ (8008890 <__ieee754_pow+0x288>)
 8008630:	4193      	sbcs	r3, r2
 8008632:	f080 84ea 	bcs.w	800900a <__ieee754_pow+0xa02>
 8008636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800863a:	4630      	mov	r0, r6
 800863c:	4639      	mov	r1, r7
 800863e:	f7f7 fdc9 	bl	80001d4 <__adddf3>
 8008642:	ec41 0b10 	vmov	d0, r0, r1
 8008646:	b011      	add	sp, #68	@ 0x44
 8008648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864c:	4a91      	ldr	r2, [pc, #580]	@ (8008894 <__ieee754_pow+0x28c>)
 800864e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008652:	4590      	cmp	r8, r2
 8008654:	463d      	mov	r5, r7
 8008656:	4633      	mov	r3, r6
 8008658:	d806      	bhi.n	8008668 <__ieee754_pow+0x60>
 800865a:	d101      	bne.n	8008660 <__ieee754_pow+0x58>
 800865c:	2e00      	cmp	r6, #0
 800865e:	d1ea      	bne.n	8008636 <__ieee754_pow+0x2e>
 8008660:	4592      	cmp	sl, r2
 8008662:	d801      	bhi.n	8008668 <__ieee754_pow+0x60>
 8008664:	d10e      	bne.n	8008684 <__ieee754_pow+0x7c>
 8008666:	b169      	cbz	r1, 8008684 <__ieee754_pow+0x7c>
 8008668:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800866c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008670:	431d      	orrs	r5, r3
 8008672:	d1e0      	bne.n	8008636 <__ieee754_pow+0x2e>
 8008674:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008678:	18db      	adds	r3, r3, r3
 800867a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800867e:	4152      	adcs	r2, r2
 8008680:	429d      	cmp	r5, r3
 8008682:	e7d4      	b.n	800862e <__ieee754_pow+0x26>
 8008684:	2d00      	cmp	r5, #0
 8008686:	46c3      	mov	fp, r8
 8008688:	da3a      	bge.n	8008700 <__ieee754_pow+0xf8>
 800868a:	4a83      	ldr	r2, [pc, #524]	@ (8008898 <__ieee754_pow+0x290>)
 800868c:	4592      	cmp	sl, r2
 800868e:	d84d      	bhi.n	800872c <__ieee754_pow+0x124>
 8008690:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008694:	4592      	cmp	sl, r2
 8008696:	f240 84c7 	bls.w	8009028 <__ieee754_pow+0xa20>
 800869a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800869e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80086a2:	2a14      	cmp	r2, #20
 80086a4:	dd0f      	ble.n	80086c6 <__ieee754_pow+0xbe>
 80086a6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80086aa:	fa21 f402 	lsr.w	r4, r1, r2
 80086ae:	fa04 f202 	lsl.w	r2, r4, r2
 80086b2:	428a      	cmp	r2, r1
 80086b4:	f040 84b8 	bne.w	8009028 <__ieee754_pow+0xa20>
 80086b8:	f004 0401 	and.w	r4, r4, #1
 80086bc:	f1c4 0402 	rsb	r4, r4, #2
 80086c0:	2900      	cmp	r1, #0
 80086c2:	d158      	bne.n	8008776 <__ieee754_pow+0x16e>
 80086c4:	e00e      	b.n	80086e4 <__ieee754_pow+0xdc>
 80086c6:	2900      	cmp	r1, #0
 80086c8:	d154      	bne.n	8008774 <__ieee754_pow+0x16c>
 80086ca:	f1c2 0214 	rsb	r2, r2, #20
 80086ce:	fa4a f402 	asr.w	r4, sl, r2
 80086d2:	fa04 f202 	lsl.w	r2, r4, r2
 80086d6:	4552      	cmp	r2, sl
 80086d8:	f040 84a3 	bne.w	8009022 <__ieee754_pow+0xa1a>
 80086dc:	f004 0401 	and.w	r4, r4, #1
 80086e0:	f1c4 0402 	rsb	r4, r4, #2
 80086e4:	4a6d      	ldr	r2, [pc, #436]	@ (800889c <__ieee754_pow+0x294>)
 80086e6:	4592      	cmp	sl, r2
 80086e8:	d12e      	bne.n	8008748 <__ieee754_pow+0x140>
 80086ea:	f1b9 0f00 	cmp.w	r9, #0
 80086ee:	f280 8494 	bge.w	800901a <__ieee754_pow+0xa12>
 80086f2:	496a      	ldr	r1, [pc, #424]	@ (800889c <__ieee754_pow+0x294>)
 80086f4:	4632      	mov	r2, r6
 80086f6:	463b      	mov	r3, r7
 80086f8:	2000      	movs	r0, #0
 80086fa:	f7f8 f84b 	bl	8000794 <__aeabi_ddiv>
 80086fe:	e7a0      	b.n	8008642 <__ieee754_pow+0x3a>
 8008700:	2400      	movs	r4, #0
 8008702:	bbc1      	cbnz	r1, 8008776 <__ieee754_pow+0x16e>
 8008704:	4a63      	ldr	r2, [pc, #396]	@ (8008894 <__ieee754_pow+0x28c>)
 8008706:	4592      	cmp	sl, r2
 8008708:	d1ec      	bne.n	80086e4 <__ieee754_pow+0xdc>
 800870a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800870e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008712:	431a      	orrs	r2, r3
 8008714:	f000 8479 	beq.w	800900a <__ieee754_pow+0xa02>
 8008718:	4b61      	ldr	r3, [pc, #388]	@ (80088a0 <__ieee754_pow+0x298>)
 800871a:	4598      	cmp	r8, r3
 800871c:	d908      	bls.n	8008730 <__ieee754_pow+0x128>
 800871e:	f1b9 0f00 	cmp.w	r9, #0
 8008722:	f2c0 8476 	blt.w	8009012 <__ieee754_pow+0xa0a>
 8008726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800872a:	e78a      	b.n	8008642 <__ieee754_pow+0x3a>
 800872c:	2402      	movs	r4, #2
 800872e:	e7e8      	b.n	8008702 <__ieee754_pow+0xfa>
 8008730:	f1b9 0f00 	cmp.w	r9, #0
 8008734:	f04f 0000 	mov.w	r0, #0
 8008738:	f04f 0100 	mov.w	r1, #0
 800873c:	da81      	bge.n	8008642 <__ieee754_pow+0x3a>
 800873e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008742:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008746:	e77c      	b.n	8008642 <__ieee754_pow+0x3a>
 8008748:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800874c:	d106      	bne.n	800875c <__ieee754_pow+0x154>
 800874e:	4632      	mov	r2, r6
 8008750:	463b      	mov	r3, r7
 8008752:	4630      	mov	r0, r6
 8008754:	4639      	mov	r1, r7
 8008756:	f7f7 fef3 	bl	8000540 <__aeabi_dmul>
 800875a:	e772      	b.n	8008642 <__ieee754_pow+0x3a>
 800875c:	4a51      	ldr	r2, [pc, #324]	@ (80088a4 <__ieee754_pow+0x29c>)
 800875e:	4591      	cmp	r9, r2
 8008760:	d109      	bne.n	8008776 <__ieee754_pow+0x16e>
 8008762:	2d00      	cmp	r5, #0
 8008764:	db07      	blt.n	8008776 <__ieee754_pow+0x16e>
 8008766:	ec47 6b10 	vmov	d0, r6, r7
 800876a:	b011      	add	sp, #68	@ 0x44
 800876c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	f7ff ba0e 	b.w	8007b90 <__ieee754_sqrt>
 8008774:	2400      	movs	r4, #0
 8008776:	ec47 6b10 	vmov	d0, r6, r7
 800877a:	9302      	str	r3, [sp, #8]
 800877c:	f7ff f9ec 	bl	8007b58 <fabs>
 8008780:	9b02      	ldr	r3, [sp, #8]
 8008782:	ec51 0b10 	vmov	r0, r1, d0
 8008786:	bb53      	cbnz	r3, 80087de <__ieee754_pow+0x1d6>
 8008788:	4b44      	ldr	r3, [pc, #272]	@ (800889c <__ieee754_pow+0x294>)
 800878a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800878e:	429a      	cmp	r2, r3
 8008790:	d002      	beq.n	8008798 <__ieee754_pow+0x190>
 8008792:	f1b8 0f00 	cmp.w	r8, #0
 8008796:	d122      	bne.n	80087de <__ieee754_pow+0x1d6>
 8008798:	f1b9 0f00 	cmp.w	r9, #0
 800879c:	da05      	bge.n	80087aa <__ieee754_pow+0x1a2>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	2000      	movs	r0, #0
 80087a4:	493d      	ldr	r1, [pc, #244]	@ (800889c <__ieee754_pow+0x294>)
 80087a6:	f7f7 fff5 	bl	8000794 <__aeabi_ddiv>
 80087aa:	2d00      	cmp	r5, #0
 80087ac:	f6bf af49 	bge.w	8008642 <__ieee754_pow+0x3a>
 80087b0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80087b4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80087b8:	ea58 0804 	orrs.w	r8, r8, r4
 80087bc:	d108      	bne.n	80087d0 <__ieee754_pow+0x1c8>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4610      	mov	r0, r2
 80087c4:	4619      	mov	r1, r3
 80087c6:	f7f7 fd03 	bl	80001d0 <__aeabi_dsub>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	e794      	b.n	80086fa <__ieee754_pow+0xf2>
 80087d0:	2c01      	cmp	r4, #1
 80087d2:	f47f af36 	bne.w	8008642 <__ieee754_pow+0x3a>
 80087d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80087da:	4619      	mov	r1, r3
 80087dc:	e731      	b.n	8008642 <__ieee754_pow+0x3a>
 80087de:	0feb      	lsrs	r3, r5, #31
 80087e0:	3b01      	subs	r3, #1
 80087e2:	ea53 0204 	orrs.w	r2, r3, r4
 80087e6:	d102      	bne.n	80087ee <__ieee754_pow+0x1e6>
 80087e8:	4632      	mov	r2, r6
 80087ea:	463b      	mov	r3, r7
 80087ec:	e7e9      	b.n	80087c2 <__ieee754_pow+0x1ba>
 80087ee:	3c01      	subs	r4, #1
 80087f0:	431c      	orrs	r4, r3
 80087f2:	d016      	beq.n	8008822 <__ieee754_pow+0x21a>
 80087f4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008880 <__ieee754_pow+0x278>
 80087f8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80087fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008800:	f240 8112 	bls.w	8008a28 <__ieee754_pow+0x420>
 8008804:	4b28      	ldr	r3, [pc, #160]	@ (80088a8 <__ieee754_pow+0x2a0>)
 8008806:	459a      	cmp	sl, r3
 8008808:	4b25      	ldr	r3, [pc, #148]	@ (80088a0 <__ieee754_pow+0x298>)
 800880a:	d916      	bls.n	800883a <__ieee754_pow+0x232>
 800880c:	4598      	cmp	r8, r3
 800880e:	d80b      	bhi.n	8008828 <__ieee754_pow+0x220>
 8008810:	f1b9 0f00 	cmp.w	r9, #0
 8008814:	da0b      	bge.n	800882e <__ieee754_pow+0x226>
 8008816:	2000      	movs	r0, #0
 8008818:	b011      	add	sp, #68	@ 0x44
 800881a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881e:	f000 bceb 	b.w	80091f8 <__math_oflow>
 8008822:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008888 <__ieee754_pow+0x280>
 8008826:	e7e7      	b.n	80087f8 <__ieee754_pow+0x1f0>
 8008828:	f1b9 0f00 	cmp.w	r9, #0
 800882c:	dcf3      	bgt.n	8008816 <__ieee754_pow+0x20e>
 800882e:	2000      	movs	r0, #0
 8008830:	b011      	add	sp, #68	@ 0x44
 8008832:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008836:	f000 bcd7 	b.w	80091e8 <__math_uflow>
 800883a:	4598      	cmp	r8, r3
 800883c:	d20c      	bcs.n	8008858 <__ieee754_pow+0x250>
 800883e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008842:	2200      	movs	r2, #0
 8008844:	2300      	movs	r3, #0
 8008846:	f7f8 f8ed 	bl	8000a24 <__aeabi_dcmplt>
 800884a:	3800      	subs	r0, #0
 800884c:	bf18      	it	ne
 800884e:	2001      	movne	r0, #1
 8008850:	f1b9 0f00 	cmp.w	r9, #0
 8008854:	daec      	bge.n	8008830 <__ieee754_pow+0x228>
 8008856:	e7df      	b.n	8008818 <__ieee754_pow+0x210>
 8008858:	4b10      	ldr	r3, [pc, #64]	@ (800889c <__ieee754_pow+0x294>)
 800885a:	4598      	cmp	r8, r3
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	d924      	bls.n	80088ac <__ieee754_pow+0x2a4>
 8008862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008866:	2300      	movs	r3, #0
 8008868:	f7f8 f8dc 	bl	8000a24 <__aeabi_dcmplt>
 800886c:	3800      	subs	r0, #0
 800886e:	bf18      	it	ne
 8008870:	2001      	movne	r0, #1
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	dccf      	bgt.n	8008818 <__ieee754_pow+0x210>
 8008878:	e7da      	b.n	8008830 <__ieee754_pow+0x228>
 800887a:	bf00      	nop
 800887c:	f3af 8000 	nop.w
 8008880:	00000000 	.word	0x00000000
 8008884:	3ff00000 	.word	0x3ff00000
 8008888:	00000000 	.word	0x00000000
 800888c:	bff00000 	.word	0xbff00000
 8008890:	fff00000 	.word	0xfff00000
 8008894:	7ff00000 	.word	0x7ff00000
 8008898:	433fffff 	.word	0x433fffff
 800889c:	3ff00000 	.word	0x3ff00000
 80088a0:	3fefffff 	.word	0x3fefffff
 80088a4:	3fe00000 	.word	0x3fe00000
 80088a8:	43f00000 	.word	0x43f00000
 80088ac:	4b5a      	ldr	r3, [pc, #360]	@ (8008a18 <__ieee754_pow+0x410>)
 80088ae:	f7f7 fc8f 	bl	80001d0 <__aeabi_dsub>
 80088b2:	a351      	add	r3, pc, #324	@ (adr r3, 80089f8 <__ieee754_pow+0x3f0>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	4604      	mov	r4, r0
 80088ba:	460d      	mov	r5, r1
 80088bc:	f7f7 fe40 	bl	8000540 <__aeabi_dmul>
 80088c0:	a34f      	add	r3, pc, #316	@ (adr r3, 8008a00 <__ieee754_pow+0x3f8>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	4606      	mov	r6, r0
 80088c8:	460f      	mov	r7, r1
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	f7f7 fe37 	bl	8000540 <__aeabi_dmul>
 80088d2:	4b52      	ldr	r3, [pc, #328]	@ (8008a1c <__ieee754_pow+0x414>)
 80088d4:	4682      	mov	sl, r0
 80088d6:	468b      	mov	fp, r1
 80088d8:	2200      	movs	r2, #0
 80088da:	4620      	mov	r0, r4
 80088dc:	4629      	mov	r1, r5
 80088de:	f7f7 fe2f 	bl	8000540 <__aeabi_dmul>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	a148      	add	r1, pc, #288	@ (adr r1, 8008a08 <__ieee754_pow+0x400>)
 80088e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ec:	f7f7 fc70 	bl	80001d0 <__aeabi_dsub>
 80088f0:	4622      	mov	r2, r4
 80088f2:	462b      	mov	r3, r5
 80088f4:	f7f7 fe24 	bl	8000540 <__aeabi_dmul>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	2000      	movs	r0, #0
 80088fe:	4948      	ldr	r1, [pc, #288]	@ (8008a20 <__ieee754_pow+0x418>)
 8008900:	f7f7 fc66 	bl	80001d0 <__aeabi_dsub>
 8008904:	4622      	mov	r2, r4
 8008906:	4680      	mov	r8, r0
 8008908:	4689      	mov	r9, r1
 800890a:	462b      	mov	r3, r5
 800890c:	4620      	mov	r0, r4
 800890e:	4629      	mov	r1, r5
 8008910:	f7f7 fe16 	bl	8000540 <__aeabi_dmul>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4640      	mov	r0, r8
 800891a:	4649      	mov	r1, r9
 800891c:	f7f7 fe10 	bl	8000540 <__aeabi_dmul>
 8008920:	a33b      	add	r3, pc, #236	@ (adr r3, 8008a10 <__ieee754_pow+0x408>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fe0b 	bl	8000540 <__aeabi_dmul>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4650      	mov	r0, sl
 8008930:	4659      	mov	r1, fp
 8008932:	f7f7 fc4d 	bl	80001d0 <__aeabi_dsub>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4680      	mov	r8, r0
 800893c:	4689      	mov	r9, r1
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	f7f7 fc47 	bl	80001d4 <__adddf3>
 8008946:	2400      	movs	r4, #0
 8008948:	4632      	mov	r2, r6
 800894a:	463b      	mov	r3, r7
 800894c:	4620      	mov	r0, r4
 800894e:	460d      	mov	r5, r1
 8008950:	f7f7 fc3e 	bl	80001d0 <__aeabi_dsub>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4640      	mov	r0, r8
 800895a:	4649      	mov	r1, r9
 800895c:	f7f7 fc38 	bl	80001d0 <__aeabi_dsub>
 8008960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008964:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008968:	2300      	movs	r3, #0
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008970:	4606      	mov	r6, r0
 8008972:	460f      	mov	r7, r1
 8008974:	4652      	mov	r2, sl
 8008976:	465b      	mov	r3, fp
 8008978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800897c:	f7f7 fc28 	bl	80001d0 <__aeabi_dsub>
 8008980:	4622      	mov	r2, r4
 8008982:	462b      	mov	r3, r5
 8008984:	f7f7 fddc 	bl	8000540 <__aeabi_dmul>
 8008988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800898c:	4680      	mov	r8, r0
 800898e:	4689      	mov	r9, r1
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fdd4 	bl	8000540 <__aeabi_dmul>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4640      	mov	r0, r8
 800899e:	4649      	mov	r1, r9
 80089a0:	f7f7 fc18 	bl	80001d4 <__adddf3>
 80089a4:	4652      	mov	r2, sl
 80089a6:	465b      	mov	r3, fp
 80089a8:	4606      	mov	r6, r0
 80089aa:	460f      	mov	r7, r1
 80089ac:	4620      	mov	r0, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7f7 fdc6 	bl	8000540 <__aeabi_dmul>
 80089b4:	460b      	mov	r3, r1
 80089b6:	4602      	mov	r2, r0
 80089b8:	4680      	mov	r8, r0
 80089ba:	4689      	mov	r9, r1
 80089bc:	4630      	mov	r0, r6
 80089be:	4639      	mov	r1, r7
 80089c0:	f7f7 fc08 	bl	80001d4 <__adddf3>
 80089c4:	4b17      	ldr	r3, [pc, #92]	@ (8008a24 <__ieee754_pow+0x41c>)
 80089c6:	4299      	cmp	r1, r3
 80089c8:	4604      	mov	r4, r0
 80089ca:	460d      	mov	r5, r1
 80089cc:	468a      	mov	sl, r1
 80089ce:	468b      	mov	fp, r1
 80089d0:	f340 82ef 	ble.w	8008fb2 <__ieee754_pow+0x9aa>
 80089d4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80089d8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80089dc:	4303      	orrs	r3, r0
 80089de:	f000 81e8 	beq.w	8008db2 <__ieee754_pow+0x7aa>
 80089e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089e6:	2200      	movs	r2, #0
 80089e8:	2300      	movs	r3, #0
 80089ea:	f7f8 f81b 	bl	8000a24 <__aeabi_dcmplt>
 80089ee:	3800      	subs	r0, #0
 80089f0:	bf18      	it	ne
 80089f2:	2001      	movne	r0, #1
 80089f4:	e710      	b.n	8008818 <__ieee754_pow+0x210>
 80089f6:	bf00      	nop
 80089f8:	60000000 	.word	0x60000000
 80089fc:	3ff71547 	.word	0x3ff71547
 8008a00:	f85ddf44 	.word	0xf85ddf44
 8008a04:	3e54ae0b 	.word	0x3e54ae0b
 8008a08:	55555555 	.word	0x55555555
 8008a0c:	3fd55555 	.word	0x3fd55555
 8008a10:	652b82fe 	.word	0x652b82fe
 8008a14:	3ff71547 	.word	0x3ff71547
 8008a18:	3ff00000 	.word	0x3ff00000
 8008a1c:	3fd00000 	.word	0x3fd00000
 8008a20:	3fe00000 	.word	0x3fe00000
 8008a24:	408fffff 	.word	0x408fffff
 8008a28:	4bd5      	ldr	r3, [pc, #852]	@ (8008d80 <__ieee754_pow+0x778>)
 8008a2a:	402b      	ands	r3, r5
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	b92b      	cbnz	r3, 8008a3c <__ieee754_pow+0x434>
 8008a30:	4bd4      	ldr	r3, [pc, #848]	@ (8008d84 <__ieee754_pow+0x77c>)
 8008a32:	f7f7 fd85 	bl	8000540 <__aeabi_dmul>
 8008a36:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008a3a:	468b      	mov	fp, r1
 8008a3c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008a40:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008a44:	4413      	add	r3, r2
 8008a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a48:	4bcf      	ldr	r3, [pc, #828]	@ (8008d88 <__ieee754_pow+0x780>)
 8008a4a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008a4e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008a52:	459b      	cmp	fp, r3
 8008a54:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008a58:	dd08      	ble.n	8008a6c <__ieee754_pow+0x464>
 8008a5a:	4bcc      	ldr	r3, [pc, #816]	@ (8008d8c <__ieee754_pow+0x784>)
 8008a5c:	459b      	cmp	fp, r3
 8008a5e:	f340 81a5 	ble.w	8008dac <__ieee754_pow+0x7a4>
 8008a62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a64:	3301      	adds	r3, #1
 8008a66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a68:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008a6c:	f04f 0a00 	mov.w	sl, #0
 8008a70:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008a74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a76:	4bc6      	ldr	r3, [pc, #792]	@ (8008d90 <__ieee754_pow+0x788>)
 8008a78:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a7c:	ed93 7b00 	vldr	d7, [r3]
 8008a80:	4629      	mov	r1, r5
 8008a82:	ec53 2b17 	vmov	r2, r3, d7
 8008a86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008a8a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a8e:	f7f7 fb9f 	bl	80001d0 <__aeabi_dsub>
 8008a92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a96:	4606      	mov	r6, r0
 8008a98:	460f      	mov	r7, r1
 8008a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a9e:	f7f7 fb99 	bl	80001d4 <__adddf3>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	49ba      	ldr	r1, [pc, #744]	@ (8008d94 <__ieee754_pow+0x78c>)
 8008aaa:	f7f7 fe73 	bl	8000794 <__aeabi_ddiv>
 8008aae:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	4639      	mov	r1, r7
 8008aba:	f7f7 fd41 	bl	8000540 <__aeabi_dmul>
 8008abe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ac2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008ac6:	106d      	asrs	r5, r5, #1
 8008ac8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008acc:	f04f 0b00 	mov.w	fp, #0
 8008ad0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008ad4:	4661      	mov	r1, ip
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008adc:	4658      	mov	r0, fp
 8008ade:	46e1      	mov	r9, ip
 8008ae0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	461d      	mov	r5, r3
 8008ae8:	f7f7 fd2a 	bl	8000540 <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4630      	mov	r0, r6
 8008af2:	4639      	mov	r1, r7
 8008af4:	f7f7 fb6c 	bl	80001d0 <__aeabi_dsub>
 8008af8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008afc:	4606      	mov	r6, r0
 8008afe:	460f      	mov	r7, r1
 8008b00:	4620      	mov	r0, r4
 8008b02:	4629      	mov	r1, r5
 8008b04:	f7f7 fb64 	bl	80001d0 <__aeabi_dsub>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b10:	f7f7 fb5e 	bl	80001d0 <__aeabi_dsub>
 8008b14:	465a      	mov	r2, fp
 8008b16:	464b      	mov	r3, r9
 8008b18:	f7f7 fd12 	bl	8000540 <__aeabi_dmul>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4630      	mov	r0, r6
 8008b22:	4639      	mov	r1, r7
 8008b24:	f7f7 fb54 	bl	80001d0 <__aeabi_dsub>
 8008b28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008b2c:	f7f7 fd08 	bl	8000540 <__aeabi_dmul>
 8008b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	f7f7 fd00 	bl	8000540 <__aeabi_dmul>
 8008b40:	a37d      	add	r3, pc, #500	@ (adr r3, 8008d38 <__ieee754_pow+0x730>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	4604      	mov	r4, r0
 8008b48:	460d      	mov	r5, r1
 8008b4a:	f7f7 fcf9 	bl	8000540 <__aeabi_dmul>
 8008b4e:	a37c      	add	r3, pc, #496	@ (adr r3, 8008d40 <__ieee754_pow+0x738>)
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	f7f7 fb3e 	bl	80001d4 <__adddf3>
 8008b58:	4622      	mov	r2, r4
 8008b5a:	462b      	mov	r3, r5
 8008b5c:	f7f7 fcf0 	bl	8000540 <__aeabi_dmul>
 8008b60:	a379      	add	r3, pc, #484	@ (adr r3, 8008d48 <__ieee754_pow+0x740>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 fb35 	bl	80001d4 <__adddf3>
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	462b      	mov	r3, r5
 8008b6e:	f7f7 fce7 	bl	8000540 <__aeabi_dmul>
 8008b72:	a377      	add	r3, pc, #476	@ (adr r3, 8008d50 <__ieee754_pow+0x748>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f7f7 fb2c 	bl	80001d4 <__adddf3>
 8008b7c:	4622      	mov	r2, r4
 8008b7e:	462b      	mov	r3, r5
 8008b80:	f7f7 fcde 	bl	8000540 <__aeabi_dmul>
 8008b84:	a374      	add	r3, pc, #464	@ (adr r3, 8008d58 <__ieee754_pow+0x750>)
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fb23 	bl	80001d4 <__adddf3>
 8008b8e:	4622      	mov	r2, r4
 8008b90:	462b      	mov	r3, r5
 8008b92:	f7f7 fcd5 	bl	8000540 <__aeabi_dmul>
 8008b96:	a372      	add	r3, pc, #456	@ (adr r3, 8008d60 <__ieee754_pow+0x758>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	f7f7 fb1a 	bl	80001d4 <__adddf3>
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460f      	mov	r7, r1
 8008ba6:	462b      	mov	r3, r5
 8008ba8:	4620      	mov	r0, r4
 8008baa:	4629      	mov	r1, r5
 8008bac:	f7f7 fcc8 	bl	8000540 <__aeabi_dmul>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f7 fcc2 	bl	8000540 <__aeabi_dmul>
 8008bbc:	465a      	mov	r2, fp
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	460d      	mov	r5, r1
 8008bc2:	464b      	mov	r3, r9
 8008bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bc8:	f7f7 fb04 	bl	80001d4 <__adddf3>
 8008bcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bd0:	f7f7 fcb6 	bl	8000540 <__aeabi_dmul>
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	462b      	mov	r3, r5
 8008bd8:	f7f7 fafc 	bl	80001d4 <__adddf3>
 8008bdc:	465a      	mov	r2, fp
 8008bde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008be2:	464b      	mov	r3, r9
 8008be4:	4658      	mov	r0, fp
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 fcaa 	bl	8000540 <__aeabi_dmul>
 8008bec:	4b6a      	ldr	r3, [pc, #424]	@ (8008d98 <__ieee754_pow+0x790>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	460f      	mov	r7, r1
 8008bf4:	f7f7 faee 	bl	80001d4 <__adddf3>
 8008bf8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bfc:	f7f7 faea 	bl	80001d4 <__adddf3>
 8008c00:	46d8      	mov	r8, fp
 8008c02:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008c06:	460d      	mov	r5, r1
 8008c08:	465a      	mov	r2, fp
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	4649      	mov	r1, r9
 8008c10:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008c14:	f7f7 fc94 	bl	8000540 <__aeabi_dmul>
 8008c18:	465c      	mov	r4, fp
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	4689      	mov	r9, r1
 8008c1e:	4b5e      	ldr	r3, [pc, #376]	@ (8008d98 <__ieee754_pow+0x790>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 fad3 	bl	80001d0 <__aeabi_dsub>
 8008c2a:	4632      	mov	r2, r6
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	f7f7 facf 	bl	80001d0 <__aeabi_dsub>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c3a:	f7f7 fac9 	bl	80001d0 <__aeabi_dsub>
 8008c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c42:	f7f7 fc7d 	bl	8000540 <__aeabi_dmul>
 8008c46:	4622      	mov	r2, r4
 8008c48:	4606      	mov	r6, r0
 8008c4a:	460f      	mov	r7, r1
 8008c4c:	462b      	mov	r3, r5
 8008c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c52:	f7f7 fc75 	bl	8000540 <__aeabi_dmul>
 8008c56:	4602      	mov	r2, r0
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	f7f7 fab9 	bl	80001d4 <__adddf3>
 8008c62:	4606      	mov	r6, r0
 8008c64:	460f      	mov	r7, r1
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	f7f7 fab1 	bl	80001d4 <__adddf3>
 8008c72:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008c76:	a33c      	add	r3, pc, #240	@ (adr r3, 8008d68 <__ieee754_pow+0x760>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	4658      	mov	r0, fp
 8008c7e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008c82:	460d      	mov	r5, r1
 8008c84:	f7f7 fc5c 	bl	8000540 <__aeabi_dmul>
 8008c88:	465c      	mov	r4, fp
 8008c8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c8e:	4642      	mov	r2, r8
 8008c90:	464b      	mov	r3, r9
 8008c92:	4620      	mov	r0, r4
 8008c94:	4629      	mov	r1, r5
 8008c96:	f7f7 fa9b 	bl	80001d0 <__aeabi_dsub>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	f7f7 fa95 	bl	80001d0 <__aeabi_dsub>
 8008ca6:	a332      	add	r3, pc, #200	@ (adr r3, 8008d70 <__ieee754_pow+0x768>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fc48 	bl	8000540 <__aeabi_dmul>
 8008cb0:	a331      	add	r3, pc, #196	@ (adr r3, 8008d78 <__ieee754_pow+0x770>)
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460f      	mov	r7, r1
 8008cba:	4620      	mov	r0, r4
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	f7f7 fc3f 	bl	8000540 <__aeabi_dmul>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4639      	mov	r1, r7
 8008cca:	f7f7 fa83 	bl	80001d4 <__adddf3>
 8008cce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008cd0:	4b32      	ldr	r3, [pc, #200]	@ (8008d9c <__ieee754_pow+0x794>)
 8008cd2:	4413      	add	r3, r2
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f7f7 fa7c 	bl	80001d4 <__adddf3>
 8008cdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ce0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ce2:	f7f7 fbc3 	bl	800046c <__aeabi_i2d>
 8008ce6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8008da0 <__ieee754_pow+0x798>)
 8008cea:	4413      	add	r3, r2
 8008cec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cfc:	f7f7 fa6a 	bl	80001d4 <__adddf3>
 8008d00:	4642      	mov	r2, r8
 8008d02:	464b      	mov	r3, r9
 8008d04:	f7f7 fa66 	bl	80001d4 <__adddf3>
 8008d08:	4632      	mov	r2, r6
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	f7f7 fa62 	bl	80001d4 <__adddf3>
 8008d10:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008d14:	4632      	mov	r2, r6
 8008d16:	463b      	mov	r3, r7
 8008d18:	4658      	mov	r0, fp
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	f7f7 fa58 	bl	80001d0 <__aeabi_dsub>
 8008d20:	4642      	mov	r2, r8
 8008d22:	464b      	mov	r3, r9
 8008d24:	f7f7 fa54 	bl	80001d0 <__aeabi_dsub>
 8008d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d2c:	f7f7 fa50 	bl	80001d0 <__aeabi_dsub>
 8008d30:	465c      	mov	r4, fp
 8008d32:	4602      	mov	r2, r0
 8008d34:	e036      	b.n	8008da4 <__ieee754_pow+0x79c>
 8008d36:	bf00      	nop
 8008d38:	4a454eef 	.word	0x4a454eef
 8008d3c:	3fca7e28 	.word	0x3fca7e28
 8008d40:	93c9db65 	.word	0x93c9db65
 8008d44:	3fcd864a 	.word	0x3fcd864a
 8008d48:	a91d4101 	.word	0xa91d4101
 8008d4c:	3fd17460 	.word	0x3fd17460
 8008d50:	518f264d 	.word	0x518f264d
 8008d54:	3fd55555 	.word	0x3fd55555
 8008d58:	db6fabff 	.word	0xdb6fabff
 8008d5c:	3fdb6db6 	.word	0x3fdb6db6
 8008d60:	33333303 	.word	0x33333303
 8008d64:	3fe33333 	.word	0x3fe33333
 8008d68:	e0000000 	.word	0xe0000000
 8008d6c:	3feec709 	.word	0x3feec709
 8008d70:	dc3a03fd 	.word	0xdc3a03fd
 8008d74:	3feec709 	.word	0x3feec709
 8008d78:	145b01f5 	.word	0x145b01f5
 8008d7c:	be3e2fe0 	.word	0xbe3e2fe0
 8008d80:	7ff00000 	.word	0x7ff00000
 8008d84:	43400000 	.word	0x43400000
 8008d88:	0003988e 	.word	0x0003988e
 8008d8c:	000bb679 	.word	0x000bb679
 8008d90:	08009380 	.word	0x08009380
 8008d94:	3ff00000 	.word	0x3ff00000
 8008d98:	40080000 	.word	0x40080000
 8008d9c:	08009360 	.word	0x08009360
 8008da0:	08009370 	.word	0x08009370
 8008da4:	460b      	mov	r3, r1
 8008da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008daa:	e5d7      	b.n	800895c <__ieee754_pow+0x354>
 8008dac:	f04f 0a01 	mov.w	sl, #1
 8008db0:	e65e      	b.n	8008a70 <__ieee754_pow+0x468>
 8008db2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8009084 <__ieee754_pow+0xa7c>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	4630      	mov	r0, r6
 8008dba:	4639      	mov	r1, r7
 8008dbc:	f7f7 fa0a 	bl	80001d4 <__adddf3>
 8008dc0:	4642      	mov	r2, r8
 8008dc2:	e9cd 0100 	strd	r0, r1, [sp]
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	4620      	mov	r0, r4
 8008dca:	4629      	mov	r1, r5
 8008dcc:	f7f7 fa00 	bl	80001d0 <__aeabi_dsub>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dd8:	f7f7 fe42 	bl	8000a60 <__aeabi_dcmpgt>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	f47f ae00 	bne.w	80089e2 <__ieee754_pow+0x3da>
 8008de2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008de6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008dea:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008dee:	fa43 fa0a 	asr.w	sl, r3, sl
 8008df2:	44da      	add	sl, fp
 8008df4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008df8:	489d      	ldr	r0, [pc, #628]	@ (8009070 <__ieee754_pow+0xa68>)
 8008dfa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008dfe:	4108      	asrs	r0, r1
 8008e00:	ea00 030a 	and.w	r3, r0, sl
 8008e04:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008e08:	f1c1 0114 	rsb	r1, r1, #20
 8008e0c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008e10:	fa4a fa01 	asr.w	sl, sl, r1
 8008e14:	f1bb 0f00 	cmp.w	fp, #0
 8008e18:	4640      	mov	r0, r8
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	f04f 0200 	mov.w	r2, #0
 8008e20:	bfb8      	it	lt
 8008e22:	f1ca 0a00 	rsblt	sl, sl, #0
 8008e26:	f7f7 f9d3 	bl	80001d0 <__aeabi_dsub>
 8008e2a:	4680      	mov	r8, r0
 8008e2c:	4689      	mov	r9, r1
 8008e2e:	4632      	mov	r2, r6
 8008e30:	463b      	mov	r3, r7
 8008e32:	4640      	mov	r0, r8
 8008e34:	4649      	mov	r1, r9
 8008e36:	f7f7 f9cd 	bl	80001d4 <__adddf3>
 8008e3a:	2400      	movs	r4, #0
 8008e3c:	a37c      	add	r3, pc, #496	@ (adr r3, 8009030 <__ieee754_pow+0xa28>)
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	4620      	mov	r0, r4
 8008e44:	460d      	mov	r5, r1
 8008e46:	f7f7 fb7b 	bl	8000540 <__aeabi_dmul>
 8008e4a:	4642      	mov	r2, r8
 8008e4c:	e9cd 0100 	strd	r0, r1, [sp]
 8008e50:	464b      	mov	r3, r9
 8008e52:	4620      	mov	r0, r4
 8008e54:	4629      	mov	r1, r5
 8008e56:	f7f7 f9bb 	bl	80001d0 <__aeabi_dsub>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4630      	mov	r0, r6
 8008e60:	4639      	mov	r1, r7
 8008e62:	f7f7 f9b5 	bl	80001d0 <__aeabi_dsub>
 8008e66:	a374      	add	r3, pc, #464	@ (adr r3, 8009038 <__ieee754_pow+0xa30>)
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f7f7 fb68 	bl	8000540 <__aeabi_dmul>
 8008e70:	a373      	add	r3, pc, #460	@ (adr r3, 8009040 <__ieee754_pow+0xa38>)
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	4680      	mov	r8, r0
 8008e78:	4689      	mov	r9, r1
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	f7f7 fb5f 	bl	8000540 <__aeabi_dmul>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4640      	mov	r0, r8
 8008e88:	4649      	mov	r1, r9
 8008e8a:	f7f7 f9a3 	bl	80001d4 <__adddf3>
 8008e8e:	4604      	mov	r4, r0
 8008e90:	460d      	mov	r5, r1
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e9a:	f7f7 f99b 	bl	80001d4 <__adddf3>
 8008e9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ea2:	4680      	mov	r8, r0
 8008ea4:	4689      	mov	r9, r1
 8008ea6:	f7f7 f993 	bl	80001d0 <__aeabi_dsub>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4620      	mov	r0, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7f7 f98d 	bl	80001d0 <__aeabi_dsub>
 8008eb6:	4642      	mov	r2, r8
 8008eb8:	4606      	mov	r6, r0
 8008eba:	460f      	mov	r7, r1
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	f7f7 fb3d 	bl	8000540 <__aeabi_dmul>
 8008ec6:	a360      	add	r3, pc, #384	@ (adr r3, 8009048 <__ieee754_pow+0xa40>)
 8008ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ecc:	4604      	mov	r4, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	f7f7 fb36 	bl	8000540 <__aeabi_dmul>
 8008ed4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009050 <__ieee754_pow+0xa48>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 f979 	bl	80001d0 <__aeabi_dsub>
 8008ede:	4622      	mov	r2, r4
 8008ee0:	462b      	mov	r3, r5
 8008ee2:	f7f7 fb2d 	bl	8000540 <__aeabi_dmul>
 8008ee6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009058 <__ieee754_pow+0xa50>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f7f7 f972 	bl	80001d4 <__adddf3>
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	462b      	mov	r3, r5
 8008ef4:	f7f7 fb24 	bl	8000540 <__aeabi_dmul>
 8008ef8:	a359      	add	r3, pc, #356	@ (adr r3, 8009060 <__ieee754_pow+0xa58>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f7f7 f967 	bl	80001d0 <__aeabi_dsub>
 8008f02:	4622      	mov	r2, r4
 8008f04:	462b      	mov	r3, r5
 8008f06:	f7f7 fb1b 	bl	8000540 <__aeabi_dmul>
 8008f0a:	a357      	add	r3, pc, #348	@ (adr r3, 8009068 <__ieee754_pow+0xa60>)
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	f7f7 f960 	bl	80001d4 <__adddf3>
 8008f14:	4622      	mov	r2, r4
 8008f16:	462b      	mov	r3, r5
 8008f18:	f7f7 fb12 	bl	8000540 <__aeabi_dmul>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4640      	mov	r0, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 f954 	bl	80001d0 <__aeabi_dsub>
 8008f28:	4604      	mov	r4, r0
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4640      	mov	r0, r8
 8008f32:	4649      	mov	r1, r9
 8008f34:	f7f7 fb04 	bl	8000540 <__aeabi_dmul>
 8008f38:	2200      	movs	r2, #0
 8008f3a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008f42:	4620      	mov	r0, r4
 8008f44:	4629      	mov	r1, r5
 8008f46:	f7f7 f943 	bl	80001d0 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f52:	f7f7 fc1f 	bl	8000794 <__aeabi_ddiv>
 8008f56:	4632      	mov	r2, r6
 8008f58:	4604      	mov	r4, r0
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 faed 	bl	8000540 <__aeabi_dmul>
 8008f66:	4632      	mov	r2, r6
 8008f68:	463b      	mov	r3, r7
 8008f6a:	f7f7 f933 	bl	80001d4 <__adddf3>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4620      	mov	r0, r4
 8008f74:	4629      	mov	r1, r5
 8008f76:	f7f7 f92b 	bl	80001d0 <__aeabi_dsub>
 8008f7a:	4642      	mov	r2, r8
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	f7f7 f927 	bl	80001d0 <__aeabi_dsub>
 8008f82:	460b      	mov	r3, r1
 8008f84:	4602      	mov	r2, r0
 8008f86:	493b      	ldr	r1, [pc, #236]	@ (8009074 <__ieee754_pow+0xa6c>)
 8008f88:	2000      	movs	r0, #0
 8008f8a:	f7f7 f921 	bl	80001d0 <__aeabi_dsub>
 8008f8e:	ec41 0b10 	vmov	d0, r0, r1
 8008f92:	ee10 3a90 	vmov	r3, s1
 8008f96:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f9e:	da30      	bge.n	8009002 <__ieee754_pow+0x9fa>
 8008fa0:	4650      	mov	r0, sl
 8008fa2:	f000 f875 	bl	8009090 <scalbn>
 8008fa6:	ec51 0b10 	vmov	r0, r1, d0
 8008faa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fae:	f7ff bbd2 	b.w	8008756 <__ieee754_pow+0x14e>
 8008fb2:	4c31      	ldr	r4, [pc, #196]	@ (8009078 <__ieee754_pow+0xa70>)
 8008fb4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	d91a      	bls.n	8008ff2 <__ieee754_pow+0x9ea>
 8008fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800907c <__ieee754_pow+0xa74>)
 8008fbe:	440b      	add	r3, r1
 8008fc0:	4303      	orrs	r3, r0
 8008fc2:	d009      	beq.n	8008fd8 <__ieee754_pow+0x9d0>
 8008fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f7f7 fd2a 	bl	8000a24 <__aeabi_dcmplt>
 8008fd0:	3800      	subs	r0, #0
 8008fd2:	bf18      	it	ne
 8008fd4:	2001      	movne	r0, #1
 8008fd6:	e42b      	b.n	8008830 <__ieee754_pow+0x228>
 8008fd8:	4642      	mov	r2, r8
 8008fda:	464b      	mov	r3, r9
 8008fdc:	f7f7 f8f8 	bl	80001d0 <__aeabi_dsub>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	f7f7 fd32 	bl	8000a4c <__aeabi_dcmpge>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d1eb      	bne.n	8008fc4 <__ieee754_pow+0x9bc>
 8008fec:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800908c <__ieee754_pow+0xa84>
 8008ff0:	e6f7      	b.n	8008de2 <__ieee754_pow+0x7da>
 8008ff2:	469a      	mov	sl, r3
 8008ff4:	4b22      	ldr	r3, [pc, #136]	@ (8009080 <__ieee754_pow+0xa78>)
 8008ff6:	459a      	cmp	sl, r3
 8008ff8:	f63f aef3 	bhi.w	8008de2 <__ieee754_pow+0x7da>
 8008ffc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009000:	e715      	b.n	8008e2e <__ieee754_pow+0x826>
 8009002:	ec51 0b10 	vmov	r0, r1, d0
 8009006:	4619      	mov	r1, r3
 8009008:	e7cf      	b.n	8008faa <__ieee754_pow+0x9a2>
 800900a:	491a      	ldr	r1, [pc, #104]	@ (8009074 <__ieee754_pow+0xa6c>)
 800900c:	2000      	movs	r0, #0
 800900e:	f7ff bb18 	b.w	8008642 <__ieee754_pow+0x3a>
 8009012:	2000      	movs	r0, #0
 8009014:	2100      	movs	r1, #0
 8009016:	f7ff bb14 	b.w	8008642 <__ieee754_pow+0x3a>
 800901a:	4630      	mov	r0, r6
 800901c:	4639      	mov	r1, r7
 800901e:	f7ff bb10 	b.w	8008642 <__ieee754_pow+0x3a>
 8009022:	460c      	mov	r4, r1
 8009024:	f7ff bb5e 	b.w	80086e4 <__ieee754_pow+0xdc>
 8009028:	2400      	movs	r4, #0
 800902a:	f7ff bb49 	b.w	80086c0 <__ieee754_pow+0xb8>
 800902e:	bf00      	nop
 8009030:	00000000 	.word	0x00000000
 8009034:	3fe62e43 	.word	0x3fe62e43
 8009038:	fefa39ef 	.word	0xfefa39ef
 800903c:	3fe62e42 	.word	0x3fe62e42
 8009040:	0ca86c39 	.word	0x0ca86c39
 8009044:	be205c61 	.word	0xbe205c61
 8009048:	72bea4d0 	.word	0x72bea4d0
 800904c:	3e663769 	.word	0x3e663769
 8009050:	c5d26bf1 	.word	0xc5d26bf1
 8009054:	3ebbbd41 	.word	0x3ebbbd41
 8009058:	af25de2c 	.word	0xaf25de2c
 800905c:	3f11566a 	.word	0x3f11566a
 8009060:	16bebd93 	.word	0x16bebd93
 8009064:	3f66c16c 	.word	0x3f66c16c
 8009068:	5555553e 	.word	0x5555553e
 800906c:	3fc55555 	.word	0x3fc55555
 8009070:	fff00000 	.word	0xfff00000
 8009074:	3ff00000 	.word	0x3ff00000
 8009078:	4090cbff 	.word	0x4090cbff
 800907c:	3f6f3400 	.word	0x3f6f3400
 8009080:	3fe00000 	.word	0x3fe00000
 8009084:	652b82fe 	.word	0x652b82fe
 8009088:	3c971547 	.word	0x3c971547
 800908c:	4090cc00 	.word	0x4090cc00

08009090 <scalbn>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	ec55 4b10 	vmov	r4, r5, d0
 8009096:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800909a:	4606      	mov	r6, r0
 800909c:	462b      	mov	r3, r5
 800909e:	b991      	cbnz	r1, 80090c6 <scalbn+0x36>
 80090a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80090a4:	4323      	orrs	r3, r4
 80090a6:	d03d      	beq.n	8009124 <scalbn+0x94>
 80090a8:	4b35      	ldr	r3, [pc, #212]	@ (8009180 <scalbn+0xf0>)
 80090aa:	4620      	mov	r0, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	2200      	movs	r2, #0
 80090b0:	f7f7 fa46 	bl	8000540 <__aeabi_dmul>
 80090b4:	4b33      	ldr	r3, [pc, #204]	@ (8009184 <scalbn+0xf4>)
 80090b6:	429e      	cmp	r6, r3
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	da0f      	bge.n	80090de <scalbn+0x4e>
 80090be:	a328      	add	r3, pc, #160	@ (adr r3, 8009160 <scalbn+0xd0>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	e01e      	b.n	8009104 <scalbn+0x74>
 80090c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80090ca:	4291      	cmp	r1, r2
 80090cc:	d10b      	bne.n	80090e6 <scalbn+0x56>
 80090ce:	4622      	mov	r2, r4
 80090d0:	4620      	mov	r0, r4
 80090d2:	4629      	mov	r1, r5
 80090d4:	f7f7 f87e 	bl	80001d4 <__adddf3>
 80090d8:	4604      	mov	r4, r0
 80090da:	460d      	mov	r5, r1
 80090dc:	e022      	b.n	8009124 <scalbn+0x94>
 80090de:	460b      	mov	r3, r1
 80090e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80090e4:	3936      	subs	r1, #54	@ 0x36
 80090e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80090ea:	4296      	cmp	r6, r2
 80090ec:	dd0d      	ble.n	800910a <scalbn+0x7a>
 80090ee:	2d00      	cmp	r5, #0
 80090f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009168 <scalbn+0xd8>)
 80090f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f6:	da02      	bge.n	80090fe <scalbn+0x6e>
 80090f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009170 <scalbn+0xe0>)
 80090fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8009168 <scalbn+0xd8>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 fa1c 	bl	8000540 <__aeabi_dmul>
 8009108:	e7e6      	b.n	80090d8 <scalbn+0x48>
 800910a:	1872      	adds	r2, r6, r1
 800910c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009110:	428a      	cmp	r2, r1
 8009112:	dcec      	bgt.n	80090ee <scalbn+0x5e>
 8009114:	2a00      	cmp	r2, #0
 8009116:	dd08      	ble.n	800912a <scalbn+0x9a>
 8009118:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800911c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009120:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009124:	ec45 4b10 	vmov	d0, r4, r5
 8009128:	bd70      	pop	{r4, r5, r6, pc}
 800912a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800912e:	da08      	bge.n	8009142 <scalbn+0xb2>
 8009130:	2d00      	cmp	r5, #0
 8009132:	a10b      	add	r1, pc, #44	@ (adr r1, 8009160 <scalbn+0xd0>)
 8009134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009138:	dac1      	bge.n	80090be <scalbn+0x2e>
 800913a:	a10f      	add	r1, pc, #60	@ (adr r1, 8009178 <scalbn+0xe8>)
 800913c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009140:	e7bd      	b.n	80090be <scalbn+0x2e>
 8009142:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009146:	3236      	adds	r2, #54	@ 0x36
 8009148:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800914c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009150:	4620      	mov	r0, r4
 8009152:	4b0d      	ldr	r3, [pc, #52]	@ (8009188 <scalbn+0xf8>)
 8009154:	4629      	mov	r1, r5
 8009156:	2200      	movs	r2, #0
 8009158:	e7d4      	b.n	8009104 <scalbn+0x74>
 800915a:	bf00      	nop
 800915c:	f3af 8000 	nop.w
 8009160:	c2f8f359 	.word	0xc2f8f359
 8009164:	01a56e1f 	.word	0x01a56e1f
 8009168:	8800759c 	.word	0x8800759c
 800916c:	7e37e43c 	.word	0x7e37e43c
 8009170:	8800759c 	.word	0x8800759c
 8009174:	fe37e43c 	.word	0xfe37e43c
 8009178:	c2f8f359 	.word	0xc2f8f359
 800917c:	81a56e1f 	.word	0x81a56e1f
 8009180:	43500000 	.word	0x43500000
 8009184:	ffff3cb0 	.word	0xffff3cb0
 8009188:	3c900000 	.word	0x3c900000

0800918c <with_errno>:
 800918c:	b510      	push	{r4, lr}
 800918e:	ed2d 8b02 	vpush	{d8}
 8009192:	eeb0 8a40 	vmov.f32	s16, s0
 8009196:	eef0 8a60 	vmov.f32	s17, s1
 800919a:	4604      	mov	r4, r0
 800919c:	f7fe fa16 	bl	80075cc <__errno>
 80091a0:	eeb0 0a48 	vmov.f32	s0, s16
 80091a4:	eef0 0a68 	vmov.f32	s1, s17
 80091a8:	ecbd 8b02 	vpop	{d8}
 80091ac:	6004      	str	r4, [r0, #0]
 80091ae:	bd10      	pop	{r4, pc}

080091b0 <xflow>:
 80091b0:	4603      	mov	r3, r0
 80091b2:	b507      	push	{r0, r1, r2, lr}
 80091b4:	ec51 0b10 	vmov	r0, r1, d0
 80091b8:	b183      	cbz	r3, 80091dc <xflow+0x2c>
 80091ba:	4602      	mov	r2, r0
 80091bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80091c0:	e9cd 2300 	strd	r2, r3, [sp]
 80091c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091c8:	f7f7 f9ba 	bl	8000540 <__aeabi_dmul>
 80091cc:	ec41 0b10 	vmov	d0, r0, r1
 80091d0:	2022      	movs	r0, #34	@ 0x22
 80091d2:	b003      	add	sp, #12
 80091d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091d8:	f7ff bfd8 	b.w	800918c <with_errno>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	e7ee      	b.n	80091c0 <xflow+0x10>
 80091e2:	0000      	movs	r0, r0
 80091e4:	0000      	movs	r0, r0
	...

080091e8 <__math_uflow>:
 80091e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80091f0 <__math_uflow+0x8>
 80091ec:	f7ff bfe0 	b.w	80091b0 <xflow>
 80091f0:	00000000 	.word	0x00000000
 80091f4:	10000000 	.word	0x10000000

080091f8 <__math_oflow>:
 80091f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009200 <__math_oflow+0x8>
 80091fc:	f7ff bfd8 	b.w	80091b0 <xflow>
 8009200:	00000000 	.word	0x00000000
 8009204:	70000000 	.word	0x70000000

08009208 <_init>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr

08009214 <_fini>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	bf00      	nop
 8009218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921a:	bc08      	pop	{r3}
 800921c:	469e      	mov	lr, r3
 800921e:	4770      	bx	lr
