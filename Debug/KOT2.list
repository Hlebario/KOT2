
KOT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008058  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080081e0  080081e0  000091e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008350  08008350  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008350  08008350  00009350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008358  08008358  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008358  08008358  00009358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800835c  0800835c  0000935c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008360  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a070  2**0
                  CONTENTS
 10 .bss          000002b8  20000070  20000070  0000a070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  0000a070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b93d  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ab2  00000000  00000000  000159dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  00017490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f0  00000000  00000000  00017ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ee4  00000000  00000000  00018690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7b6  00000000  00000000  00039574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc4f7  00000000  00000000  00046d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113221  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031f0  00000000  00000000  00113264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00116454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081c8 	.word	0x080081c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080081c8 	.word	0x080081c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96a 	b.w	8000e2c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f f68c 	uxth.w	r6, ip
 8000ba6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000baa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bae:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8112 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810f 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fa1f f38e 	uxth.w	r3, lr
 8000bda:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bde:	fb07 1110 	mls	r1, r7, r0, r1
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f606 	mul.w	r6, r0, r6
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fc 	bcs.w	8000df2 <__udivmoddi4+0x282>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f9 	bls.w	8000df2 <__udivmoddi4+0x282>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80f0 	bcc.w	8000e1c <__udivmoddi4+0x2ac>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 8090 	bne.w	8000d74 <__udivmoddi4+0x204>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	2101      	movs	r1, #1
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb07 f006 	mul.w	r0, r7, r6
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cd 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c96:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb00 f707 	mul.w	r7, r0, r7
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80b0 	bhi.w	8000e16 <__udivmoddi4+0x2a6>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0620 	rsb	r6, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cca:	431f      	orrs	r7, r3
 8000ccc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd0:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd4:	ea43 030c 	orr.w	r3, r3, ip
 8000cd8:	40f4      	lsrs	r4, r6
 8000cda:	fa00 f801 	lsl.w	r8, r0, r1
 8000cde:	0c38      	lsrs	r0, r7, #16
 8000ce0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf8:	45a1      	cmp	r9, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d06:	f080 8084 	bcs.w	8000e12 <__udivmoddi4+0x2a2>
 8000d0a:	45a1      	cmp	r9, r4
 8000d0c:	f240 8081 	bls.w	8000e12 <__udivmoddi4+0x2a2>
 8000d10:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	fa1f f983 	uxth.w	r9, r3
 8000d1e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d22:	fb00 4413 	mls	r4, r0, r3, r4
 8000d26:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2e:	45a4      	cmp	ip, r4
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x1d2>
 8000d32:	193c      	adds	r4, r7, r4
 8000d34:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d38:	d267      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d965      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d46:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4a:	eba4 040c 	sub.w	r4, r4, ip
 8000d4e:	429c      	cmp	r4, r3
 8000d50:	46ce      	mov	lr, r9
 8000d52:	469c      	mov	ip, r3
 8000d54:	d351      	bcc.n	8000dfa <__udivmoddi4+0x28a>
 8000d56:	d04e      	beq.n	8000df6 <__udivmoddi4+0x286>
 8000d58:	b155      	cbz	r5, 8000d70 <__udivmoddi4+0x200>
 8000d5a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d62:	fa04 f606 	lsl.w	r6, r4, r6
 8000d66:	40cb      	lsrs	r3, r1
 8000d68:	431e      	orrs	r6, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e750      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d74:	f1c2 0320 	rsb	r3, r2, #32
 8000d78:	fa20 f103 	lsr.w	r1, r0, r3
 8000d7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d80:	fa24 f303 	lsr.w	r3, r4, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	430c      	orrs	r4, r1
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d98:	fb08 3110 	mls	r1, r8, r0, r3
 8000d9c:	0c23      	lsrs	r3, r4, #16
 8000d9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da2:	fb00 f107 	mul.w	r1, r0, r7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x24c>
 8000daa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dae:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db2:	d22c      	bcs.n	8000e0e <__udivmoddi4+0x29e>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	d92a      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb01 f307 	mul.w	r3, r1, r7
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x276>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ddc:	d213      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000dde:	42a3      	cmp	r3, r4
 8000de0:	d911      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4464      	add	r4, ip
 8000de6:	1ae4      	subs	r4, r4, r3
 8000de8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dec:	e739      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dee:	4604      	mov	r4, r0
 8000df0:	e6f0      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e706      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df6:	45c8      	cmp	r8, r9
 8000df8:	d2ae      	bcs.n	8000d58 <__udivmoddi4+0x1e8>
 8000dfa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e02:	3801      	subs	r0, #1
 8000e04:	e7a8      	b.n	8000d58 <__udivmoddi4+0x1e8>
 8000e06:	4631      	mov	r1, r6
 8000e08:	e7ed      	b.n	8000de6 <__udivmoddi4+0x276>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	e799      	b.n	8000d42 <__udivmoddi4+0x1d2>
 8000e0e:	4630      	mov	r0, r6
 8000e10:	e7d4      	b.n	8000dbc <__udivmoddi4+0x24c>
 8000e12:	46d6      	mov	lr, sl
 8000e14:	e77f      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e16:	4463      	add	r3, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e74d      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	e70f      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	e730      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <PCA9685_SetBit>:
#define PCA9685_MODE1_SLEEP_BIT      4    // as in the datasheet page no 14/52
#define PCA9685_MODE1_AI_BIT         5    // as in the datasheet page no 14/52
#define PCA9685_MODE1_RESTART_BIT    7    // as in the datasheet page no 14/52

void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	230a      	movs	r3, #10
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	f107 030f 	add.w	r3, r7, #15
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	2180      	movs	r1, #128	@ 0x80
 8000e58:	4819      	ldr	r0, [pc, #100]	@ (8000ec0 <PCA9685_SetBit+0x90>)
 8000e5a:	f002 fd45 	bl	80038e8 <HAL_I2C_Mem_Read>
  if (Value == 0) readValue &= ~(1 << Bit);
 8000e5e:	797b      	ldrb	r3, [r7, #5]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10d      	bne.n	8000e80 <PCA9685_SetBit+0x50>
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2201      	movs	r2, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	b25a      	sxtb	r2, r3
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	4013      	ands	r3, r2
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e00a      	b.n	8000e96 <PCA9685_SetBit+0x66>
  else readValue |= (1 << Bit);
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	2201      	movs	r2, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2180      	movs	r1, #128	@ 0x80
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <PCA9685_SetBit+0x90>)
 8000eae:	f002 fc21 	bl	80036f4 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f001 fbfa 	bl	80026ac <HAL_Delay>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000008c 	.word	0x2000008c

08000ec4 <PCA9685_SetPWMFrequency>:

void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af04      	add	r7, sp, #16
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;
  if(frequency >= 1526) prescale = 0x03;
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d902      	bls.n	8000ede <PCA9685_SetPWMFrequency+0x1a>
 8000ed8:	2303      	movs	r3, #3
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e00c      	b.n	8000ef8 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24) prescale = 0xFF;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b18      	cmp	r3, #24
 8000ee2:	d802      	bhi.n	8000eea <PCA9685_SetPWMFrequency+0x26>
 8000ee4:	23ff      	movs	r3, #255	@ 0xff
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e006      	b.n	8000ef8 <PCA9685_SetPWMFrequency+0x34>
  //  internal 25 MHz oscillator as in the datasheet page no 1/52
  else prescale = 25000000 / (4096 * frequency);
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	031b      	lsls	r3, r3, #12
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <PCA9685_SetPWMFrequency+0x74>)
 8000ef0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
  // prescale changes 3 to 255 for 1526Hz to 24Hz as in the datasheet page no 1/52
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2104      	movs	r1, #4
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ff97 	bl	8000e30 <PCA9685_SetBit>
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8000f02:	230a      	movs	r3, #10
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2301      	movs	r3, #1
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f107 030f 	add.w	r3, r7, #15
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	22fe      	movs	r2, #254	@ 0xfe
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <PCA9685_SetPWMFrequency+0x78>)
 8000f18:	f002 fbec 	bl	80036f4 <HAL_I2C_Mem_Write>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ff85 	bl	8000e30 <PCA9685_SetBit>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2107      	movs	r1, #7
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff ff80 	bl	8000e30 <PCA9685_SetBit>
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	017d7840 	.word	0x017d7840
 8000f3c:	2000008c 	.word	0x2000008c

08000f40 <PCA9685_Init>:

void PCA9685_Init(uint16_t frequency)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  PCA9685_SetPWMFrequency(frequency); // 50 Hz for servo
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffb9 	bl	8000ec4 <PCA9685_SetPWMFrequency>
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2105      	movs	r1, #5
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ff6a 	bl	8000e30 <PCA9685_SetBit>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <PCA9685_SetPWM>:

void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	80bb      	strh	r3, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	73fb      	strb	r3, [r7, #15]
  // See example 1 in the datasheet page no 18/52
  pwm[0] = OnTime & 0xFF;
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	723b      	strb	r3, [r7, #8]
  pwm[1] = OnTime>>8;
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	72bb      	strb	r3, [r7, #10]
  pwm[3] = OffTime>>8;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(&hi2c1, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2304      	movs	r3, #4
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <PCA9685_SetPWM+0x60>)
 8000fb8:	f002 fb9c 	bl	80036f4 <HAL_I2C_Mem_Write>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000008c 	.word	0x2000008c

08000fc8 <PCA9685_SetServoAngle>:

void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	ed87 0a00 	vstr	s0, [r7]
 8000fd4:	71fb      	strb	r3, [r7, #7]
  float Value;
  // 50 Hz servo then 4095 Value --> 20 milliseconds
  // 0 degree --> 0.5 ms(102.4 Value) and 180 degree --> 2.5 ms(511.9 Value)
  Value = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f7ff fa5a 	bl	8000490 <__aeabi_f2d>
 8000fdc:	a31b      	add	r3, pc, #108	@ (adr r3, 800104c <PCA9685_SetServoAngle+0x84>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff faad 	bl	8000540 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <PCA9685_SetServoAngle+0x80>)
 8000ff4:	f7ff fbce 	bl	8000794 <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	a30f      	add	r3, pc, #60	@ (adr r3, 8001040 <PCA9685_SetServoAngle+0x78>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff f8e5 	bl	80001d4 <__adddf3>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fd45 	bl	8000aa0 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	60fb      	str	r3, [r7, #12]
  PCA9685_SetPWM(Channel, 0, (uint16_t)Value);
 800101a:	edd7 7a03 	vldr	s15, [r7, #12]
 800101e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001022:	ee17 3a90 	vmov	r3, s15
 8001026:	b29a      	uxth	r2, r3
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff99 	bl	8000f64 <PCA9685_SetPWM>
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	9999999a 	.word	0x9999999a
 8001044:	40599999 	.word	0x40599999
 8001048:	40668000 	.word	0x40668000
 800104c:	00000000 	.word	0x00000000
 8001050:	40799800 	.word	0x40799800

08001054 <HAL_UART_RxCpltCallback>:
	}
}

/////////////////////////////////// полный буфер ///////////////////////////////////////
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	  if(huart == &huart1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d11d      	bne.n	80010a0 <HAL_UART_RxCpltCallback+0x4c>
	  {
		  __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8001064:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0210 	bic.w	r2, r2, #16
 8001072:	60da      	str	r2, [r3, #12]
		  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)"Full buffer\n", 12);
		  HAL_UART_AbortReceive(&huart1);
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001076:	f003 ff75 	bl	8004f64 <HAL_UART_AbortReceive>
		  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
		  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0210 	orr.w	r2, r2, #16
 800109e:	60da      	str	r2, [r3, #12]
		  //ReciveToServo((uint8_t*)rx_buff);////////////////////////////////////////////////////////
	  }
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000e0 	.word	0x200000e0

080010ac <HAL_UART_ErrorCallback>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////// ErrorCallback //////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a51      	ldr	r2, [pc, #324]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	f040 809b 	bne.w	80011f4 <HAL_UART_ErrorCallback+0x148>
	{
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80010be:	4b4f      	ldr	r3, [pc, #316]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	4b4d      	ldr	r3, [pc, #308]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0210 	bic.w	r2, r2, #16
 80010cc:	60da      	str	r2, [r3, #12]
		uint32_t er = HAL_UART_GetError(&huart1);
 80010ce:	484b      	ldr	r0, [pc, #300]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010d0:	f004 fbbc 	bl	800584c <HAL_UART_GetError>
 80010d4:	61f8      	str	r0, [r7, #28]
		HAL_UART_Abort_IT(&huart1);
 80010d6:	4849      	ldr	r0, [pc, #292]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80010d8:	f003 ffe8 	bl	80050ac <HAL_UART_Abort_IT>

		switch(er)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3b01      	subs	r3, #1
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	f200 8086 	bhi.w	80011f2 <HAL_UART_ErrorCallback+0x146>
 80010e6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ec <HAL_UART_ErrorCallback+0x40>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	0800112d 	.word	0x0800112d
 80010f0:	08001159 	.word	0x08001159
 80010f4:	080011f3 	.word	0x080011f3
 80010f8:	08001185 	.word	0x08001185
 80010fc:	080011f3 	.word	0x080011f3
 8001100:	080011f3 	.word	0x080011f3
 8001104:	080011f3 	.word	0x080011f3
 8001108:	080011b1 	.word	0x080011b1
 800110c:	080011f3 	.word	0x080011f3
 8001110:	080011f3 	.word	0x080011f3
 8001114:	080011f3 	.word	0x080011f3
 8001118:	080011f3 	.word	0x080011f3
 800111c:	080011f3 	.word	0x080011f3
 8001120:	080011f3 	.word	0x080011f3
 8001124:	080011f3 	.word	0x080011f3
 8001128:	080011dd 	.word	0x080011dd
		{
			case HAL_UART_ERROR_PE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Parity error\n", 27, 1000);
 800112c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001130:	221b      	movs	r2, #27
 8001132:	4933      	ldr	r1, [pc, #204]	@ (8001200 <HAL_UART_ErrorCallback+0x154>)
 8001134:	4831      	ldr	r0, [pc, #196]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001136:	f003 fe65 	bl	8004e04 <HAL_UART_Transmit>
				__HAL_UART_CLEAR_PEFLAG(&huart1);
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69bb      	ldr	r3, [r7, #24]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 8001156:	e04d      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_NE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Noise error\n", 26, 1000);
 8001158:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115c:	221a      	movs	r2, #26
 800115e:	4929      	ldr	r1, [pc, #164]	@ (8001204 <HAL_UART_ErrorCallback+0x158>)
 8001160:	4826      	ldr	r0, [pc, #152]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001162:	f003 fe4f 	bl	8004e04 <HAL_UART_Transmit>
				__HAL_UART_CLEAR_NEFLAG(&huart1);
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 8001182:	e037      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_FE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Frame error\n", 26, 1000);
 8001184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001188:	221a      	movs	r2, #26
 800118a:	491f      	ldr	r1, [pc, #124]	@ (8001208 <HAL_UART_ErrorCallback+0x15c>)
 800118c:	481b      	ldr	r0, [pc, #108]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 800118e:	f003 fe39 	bl	8004e04 <HAL_UART_Transmit>
				__HAL_UART_CLEAR_FEFLAG(&huart1);
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 80011ae:	e021      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_ORE:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - Overrun error\n", 28, 1000);
 80011b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b4:	221c      	movs	r2, #28
 80011b6:	4915      	ldr	r1, [pc, #84]	@ (800120c <HAL_UART_ErrorCallback+0x160>)
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80011ba:	f003 fe23 	bl	8004e04 <HAL_UART_Transmit>
				__HAL_UART_CLEAR_OREFLAG(huart);
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 80011da:	e00b      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			case HAL_UART_ERROR_DMA:
				HAL_UART_Transmit(&huart1, (uint8_t*)"ERR_Callbck - DMA transfer error\n", 33, 1000);
 80011dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e0:	2221      	movs	r2, #33	@ 0x21
 80011e2:	490b      	ldr	r1, [pc, #44]	@ (8001210 <HAL_UART_ErrorCallback+0x164>)
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <HAL_UART_ErrorCallback+0x150>)
 80011e6:	f003 fe0d 	bl	8004e04 <HAL_UART_Transmit>
				huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	645a      	str	r2, [r3, #68]	@ 0x44
			break;
 80011f0:	e000      	b.n	80011f4 <HAL_UART_ErrorCallback+0x148>

			default:
			break;
 80011f2:	bf00      	nop
		}
	}

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000e0 	.word	0x200000e0
 8001200:	08008220 	.word	0x08008220
 8001204:	0800823c 	.word	0x0800823c
 8001208:	08008258 	.word	0x08008258
 800120c:	08008274 	.word	0x08008274
 8001210:	08008294 	.word	0x08008294
 8001214:	00000000 	.word	0x00000000

08001218 <getTheta>:

float getTheta(int joint, float X, float Y, float Z)
{
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	ed87 0a02 	vstr	s0, [r7, #8]
 8001226:	edc7 0a01 	vstr	s1, [r7, #4]
 800122a:	ed87 1a00 	vstr	s2, [r7]
	float L = 0;
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
	float angle = 0;
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	617b      	str	r3, [r7, #20]

	L = pow(X, 2) + pow(Y, 2) + pow(Z, 2);
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f7ff f928 	bl	8000490 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	ed9f 1ba8 	vldr	d1, [pc, #672]	@ 80014e8 <getTheta+0x2d0>
 8001248:	ec43 2b10 	vmov	d0, r2, r3
 800124c:	f005 fa30 	bl	80066b0 <pow>
 8001250:	ec55 4b10 	vmov	r4, r5, d0
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff f91b 	bl	8000490 <__aeabi_f2d>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	ed9f 1ba2 	vldr	d1, [pc, #648]	@ 80014e8 <getTheta+0x2d0>
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f005 fa23 	bl	80066b0 <pow>
 800126a:	ec53 2b10 	vmov	r2, r3, d0
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7fe ffaf 	bl	80001d4 <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4614      	mov	r4, r2
 800127c:	461d      	mov	r5, r3
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f7ff f906 	bl	8000490 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 80014e8 <getTheta+0x2d0>
 800128c:	ec43 2b10 	vmov	d0, r2, r3
 8001290:	f005 fa0e 	bl	80066b0 <pow>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7fe ff9a 	bl	80001d4 <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fbfa 	bl	8000aa0 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	613b      	str	r3, [r7, #16]
	//calculates abad, hip, or knee angle
	switch (joint)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	f000 80db 	beq.w	800146e <getTheta+0x256>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	f300 80fd 	bgt.w	80014ba <getTheta+0x2a2>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <getTheta+0xb6>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d05a      	beq.n	8001382 <getTheta+0x16a>
 80012cc:	e0f5      	b.n	80014ba <getTheta+0x2a2>
	{
    case 0:  //abad
      angle = atan(X / Z) + acos(a / (sqrt(pow(X, 2) + pow(Z, 2))));
 80012ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d2:	edd7 7a00 	vldr	s15, [r7]
 80012d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012da:	ee16 0a90 	vmov	r0, s13
 80012de:	f7ff f8d7 	bl	8000490 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	ec43 2b10 	vmov	d0, r2, r3
 80012ea:	f005 fa7d 	bl	80067e8 <atan>
 80012ee:	ec55 4b10 	vmov	r4, r5, d0
 80012f2:	68b8      	ldr	r0, [r7, #8]
 80012f4:	f7ff f8cc 	bl	8000490 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 80014e8 <getTheta+0x2d0>
 8001300:	ec43 2b10 	vmov	d0, r2, r3
 8001304:	f005 f9d4 	bl	80066b0 <pow>
 8001308:	ec59 8b10 	vmov	r8, r9, d0
 800130c:	6838      	ldr	r0, [r7, #0]
 800130e:	f7ff f8bf 	bl	8000490 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 80014e8 <getTheta+0x2d0>
 800131a:	ec43 2b10 	vmov	d0, r2, r3
 800131e:	f005 f9c7 	bl	80066b0 <pow>
 8001322:	ec53 2b10 	vmov	r2, r3, d0
 8001326:	4640      	mov	r0, r8
 8001328:	4649      	mov	r1, r9
 800132a:	f7fe ff53 	bl	80001d4 <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ec43 2b17 	vmov	d7, r2, r3
 8001336:	eeb0 0a47 	vmov.f32	s0, s14
 800133a:	eef0 0a67 	vmov.f32	s1, s15
 800133e:	f005 fa27 	bl	8006790 <sqrt>
 8001342:	ec53 2b10 	vmov	r2, r3, d0
 8001346:	f04f 0000 	mov.w	r0, #0
 800134a:	4975      	ldr	r1, [pc, #468]	@ (8001520 <getTheta+0x308>)
 800134c:	f7ff fa22 	bl	8000794 <__aeabi_ddiv>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	ec43 2b17 	vmov	d7, r2, r3
 8001358:	eeb0 0a47 	vmov.f32	s0, s14
 800135c:	eef0 0a67 	vmov.f32	s1, s15
 8001360:	f005 f93e 	bl	80065e0 <acos>
 8001364:	ec53 2b10 	vmov	r2, r3, d0
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7fe ff32 	bl	80001d4 <__adddf3>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fb92 	bl	8000aa0 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	617b      	str	r3, [r7, #20]
      break;
 8001380:	e09b      	b.n	80014ba <getTheta+0x2a2>
    case 1:  //hip
      angle = (PI / 2) - asin(-Y / sqrt(L - pow(a, 2))) - acos((pow(b, 2) - pow(a, 2) - pow(c, 2) + L) / (2 * b * sqrt(L - pow(a, 2))));
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f884 	bl	8000490 <__aeabi_f2d>
 8001388:	4604      	mov	r4, r0
 800138a:	460d      	mov	r5, r1
 800138c:	6938      	ldr	r0, [r7, #16]
 800138e:	f7ff f87f 	bl	8000490 <__aeabi_f2d>
 8001392:	a357      	add	r3, pc, #348	@ (adr r3, 80014f0 <getTheta+0x2d8>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7fe ff1a 	bl	80001d0 <__aeabi_dsub>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b17 	vmov	d7, r2, r3
 80013a4:	eeb0 0a47 	vmov.f32	s0, s14
 80013a8:	eef0 0a67 	vmov.f32	s1, s15
 80013ac:	f005 f9f0 	bl	8006790 <sqrt>
 80013b0:	ec53 2b10 	vmov	r2, r3, d0
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff f9ec 	bl	8000794 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	ec43 2b17 	vmov	d7, r2, r3
 80013c4:	eeb0 0a47 	vmov.f32	s0, s14
 80013c8:	eef0 0a67 	vmov.f32	s1, s15
 80013cc:	f005 f93c 	bl	8006648 <asin>
 80013d0:	ec51 0b10 	vmov	r0, r1, d0
 80013d4:	a348      	add	r3, pc, #288	@ (adr r3, 80014f8 <getTheta+0x2e0>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7fe fefb 	bl	80001d4 <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4614      	mov	r4, r2
 80013e4:	461d      	mov	r5, r3
 80013e6:	6938      	ldr	r0, [r7, #16]
 80013e8:	f7ff f852 	bl	8000490 <__aeabi_f2d>
 80013ec:	a344      	add	r3, pc, #272	@ (adr r3, 8001500 <getTheta+0x2e8>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7fe feed 	bl	80001d0 <__aeabi_dsub>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4690      	mov	r8, r2
 80013fc:	4699      	mov	r9, r3
 80013fe:	6938      	ldr	r0, [r7, #16]
 8001400:	f7ff f846 	bl	8000490 <__aeabi_f2d>
 8001404:	a33a      	add	r3, pc, #232	@ (adr r3, 80014f0 <getTheta+0x2d8>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7fe fee1 	bl	80001d0 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	ec43 2b17 	vmov	d7, r2, r3
 8001416:	eeb0 0a47 	vmov.f32	s0, s14
 800141a:	eef0 0a67 	vmov.f32	s1, s15
 800141e:	f005 f9b7 	bl	8006790 <sqrt>
 8001422:	ec51 0b10 	vmov	r0, r1, d0
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <getTheta+0x30c>)
 800142c:	f7ff f888 	bl	8000540 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4640      	mov	r0, r8
 8001436:	4649      	mov	r1, r9
 8001438:	f7ff f9ac 	bl	8000794 <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ec43 2b17 	vmov	d7, r2, r3
 8001444:	eeb0 0a47 	vmov.f32	s0, s14
 8001448:	eef0 0a67 	vmov.f32	s1, s15
 800144c:	f005 f8c8 	bl	80065e0 <acos>
 8001450:	ec53 2b10 	vmov	r2, r3, d0
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe feba 	bl	80001d0 <__aeabi_dsub>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb1c 	bl	8000aa0 <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	617b      	str	r3, [r7, #20]
      break;
 800146c:	e025      	b.n	80014ba <getTheta+0x2a2>
    case 2:  //knee
      angle = acos((pow(a, 2) + pow(b, 2) + pow(c, 2) - L) / (2 * b * c));
 800146e:	6938      	ldr	r0, [r7, #16]
 8001470:	f7ff f80e 	bl	8000490 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	a123      	add	r1, pc, #140	@ (adr r1, 8001508 <getTheta+0x2f0>)
 800147a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800147e:	f7fe fea7 	bl	80001d0 <__aeabi_dsub>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	a321      	add	r3, pc, #132	@ (adr r3, 8001510 <getTheta+0x2f8>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f980 	bl	8000794 <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	ec43 2b17 	vmov	d7, r2, r3
 800149c:	eeb0 0a47 	vmov.f32	s0, s14
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	f005 f89c 	bl	80065e0 <acos>
 80014a8:	ec53 2b10 	vmov	r2, r3, d0
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff faf6 	bl	8000aa0 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	617b      	str	r3, [r7, #20]
      break;
 80014b8:	bf00      	nop
	}
	return (angle * (180 / PI));
 80014ba:	6978      	ldr	r0, [r7, #20]
 80014bc:	f7fe ffe8 	bl	8000490 <__aeabi_f2d>
 80014c0:	a315      	add	r3, pc, #84	@ (adr r3, 8001518 <getTheta+0x300>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f83b 	bl	8000540 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fae5 	bl	8000aa0 <__aeabi_d2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	ee07 3a90 	vmov	s15, r3
    //converts angle to degrees and returns the value
}
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014e8:	00000000 	.word	0x00000000
 80014ec:	40000000 	.word	0x40000000
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40a38800 	.word	0x40a38800
 80014f8:	544486e0 	.word	0x544486e0
 80014fc:	3ff921fb 	.word	0x3ff921fb
 8001500:	00000000 	.word	0x00000000
 8001504:	40b13000 	.word	0x40b13000
 8001508:	00000000 	.word	0x00000000
 800150c:	40d41e00 	.word	0x40d41e00
 8001510:	00000000 	.word	0x00000000
 8001514:	40d19400 	.word	0x40d19400
 8001518:	1a635ba1 	.word	0x1a635ba1
 800151c:	404ca5dc 	.word	0x404ca5dc
 8001520:	40490000 	.word	0x40490000
 8001524:	40668000 	.word	0x40668000

08001528 <moveTOPS>:
//Fun. for calculation angle legs and transmit at fun. UpdatePosition
void moveTOPS(float X0, float Y0, float Z0,    //FL leg
              float X1, float Y1, float Z1,    //FR leg
              float X2, float Y2, float Z2,    //BL leg
              float X3, float Y3, float Z3)	   //BR leg
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b09c      	sub	sp, #112	@ 0x70
 800152c:	af00      	add	r7, sp, #0
 800152e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8001532:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 8001536:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 800153a:	edc7 1a08 	vstr	s3, [r7, #32]
 800153e:	ed87 2a07 	vstr	s4, [r7, #28]
 8001542:	edc7 2a06 	vstr	s5, [r7, #24]
 8001546:	ed87 3a05 	vstr	s6, [r7, #20]
 800154a:	edc7 3a04 	vstr	s7, [r7, #16]
 800154e:	ed87 4a03 	vstr	s8, [r7, #12]
 8001552:	edc7 4a02 	vstr	s9, [r7, #8]
 8001556:	ed87 5a01 	vstr	s10, [r7, #4]
 800155a:	edc7 5a00 	vstr	s11, [r7]
  float relPos = 0;                                //odrive relative position
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	667b      	str	r3, [r7, #100]	@ 0x64
  //X, Y, Z positions of each foot
  float pos[4][3] = { { X0, Y0, Z0 },    //FL leg
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	637b      	str	r3, [r7, #52]	@ 0x34
 8001568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	643b      	str	r3, [r7, #64]	@ 0x40
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	647b      	str	r3, [r7, #68]	@ 0x44
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	653b      	str	r3, [r7, #80]	@ 0x50
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	657b      	str	r3, [r7, #84]	@ 0x54
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	663b      	str	r3, [r7, #96]	@ 0x60
                      { X1, Y1, Z1 },    //FR leg
                      { X2, Y2, Z2 },    //BL leg
                      { X3, Y3, Z3 } };  //BR leg
  //move each actuator
  for (int i = 0; i < 4; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001598:	e044      	b.n	8001624 <moveTOPS+0xfc>
  {                                                  //cycle through each leg (FL, FR, BL, BR)
    for (int j = 0; j < 3; j++)
 800159a:	2300      	movs	r3, #0
 800159c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800159e:	e03b      	b.n	8001618 <moveTOPS+0xf0>
    {
    	//cycle through each legs joints (abad, hip, knee)
    	relPos = getTheta(j, pos[i][0], pos[i][1], pos[i][2]);// - offset[i][j];  //calculate relative joint position and make positive
 80015a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	3370      	adds	r3, #112	@ 0x70
 80015ac:	443b      	add	r3, r7
 80015ae:	3b3c      	subs	r3, #60	@ 0x3c
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	3370      	adds	r3, #112	@ 0x70
 80015c0:	443b      	add	r3, r7
 80015c2:	3b38      	subs	r3, #56	@ 0x38
 80015c4:	ed93 7a00 	vldr	s14, [r3]
 80015c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	3370      	adds	r3, #112	@ 0x70
 80015d4:	443b      	add	r3, r7
 80015d6:	3b34      	subs	r3, #52	@ 0x34
 80015d8:	edd3 6a00 	vldr	s13, [r3]
 80015dc:	eeb0 1a66 	vmov.f32	s2, s13
 80015e0:	eef0 0a47 	vmov.f32	s1, s14
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80015ea:	f7ff fe15 	bl	8001218 <getTheta>
 80015ee:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
    	}
    	else
    	{
    		UpdatePosition(i * 3 + j, 180 - relPos);
    	}*/
    	UpdatePosition(i * 3 + j, relPos);
 80015f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	441a      	add	r2, r3
 80015fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015fc:	4413      	add	r3, r2
 80015fe:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fc30 	bl	8001e68 <UpdatePosition>
    	HAL_UART_Receive_DMA(&huart1, rx_buff, 1);
 8001608:	2201      	movs	r2, #1
 800160a:	490a      	ldr	r1, [pc, #40]	@ (8001634 <moveTOPS+0x10c>)
 800160c:	480a      	ldr	r0, [pc, #40]	@ (8001638 <moveTOPS+0x110>)
 800160e:	f003 fc84 	bl	8004f1a <HAL_UART_Receive_DMA>
    for (int j = 0; j < 3; j++)
 8001612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001614:	3301      	adds	r3, #1
 8001616:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800161a:	2b02      	cmp	r3, #2
 800161c:	ddc0      	ble.n	80015a0 <moveTOPS+0x78>
  for (int i = 0; i < 4; i++)
 800161e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001620:	3301      	adds	r3, #1
 8001622:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001626:	2b03      	cmp	r3, #3
 8001628:	ddb7      	ble.n	800159a <moveTOPS+0x72>
    }
  }
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3770      	adds	r7, #112	@ 0x70
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200001e8 	.word	0x200001e8
 8001638:	200000e0 	.word	0x200000e0

0800163c <step>:
			normX, normYB, normZ);                                             //BR
    HAL_Delay(time);
}

void step()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
  int normYF = -0;//-50
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  int normYB = -0;//-50//-110
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  int offset = 30;//100//200
 800164a:	231e      	movs	r3, #30
 800164c:	617b      	str	r3, [r7, #20]
  int offsetY = 20;//80//300
 800164e:	2314      	movs	r3, #20
 8001650:	613b      	str	r3, [r7, #16]
  int time = 400;//200//160
 8001652:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001656:	60fb      	str	r3, [r7, #12]
  int normX = 50;//110
 8001658:	2332      	movs	r3, #50	@ 0x32
 800165a:	60bb      	str	r3, [r7, #8]
  int normZ = 150;//300
 800165c:	2396      	movs	r3, #150	@ 0x96
 800165e:	607b      	str	r3, [r7, #4]

  //1 point
  moveTOPS(normX, normYF, normZ - offset/2,   //FL
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	ee07 3a10 	vmov	s14, r3
 8001670:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	0fda      	lsrs	r2, r3, #31
 8001678:	4413      	add	r3, r2
 800167a:	105b      	asrs	r3, r3, #1
 800167c:	425b      	negs	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4413      	add	r3, r2
 8001684:	ee06 3a90 	vmov	s13, r3
 8001688:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	ee06 3a10 	vmov	s12, r3
 8001692:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	ee05 3a90 	vmov	s11, r3
 800169c:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	ee05 3a90 	vmov	s11, r3
 80016a6:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	ee05 3a90 	vmov	s11, r3
 80016b0:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	ee05 3a90 	vmov	s11, r3
 80016ba:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	ee05 3a90 	vmov	s11, r3
 80016c4:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	ee05 3a90 	vmov	s11, r3
 80016ce:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	ee05 3a90 	vmov	s11, r3
 80016d8:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYF, normZ,                 //FR
           normX, normYB, normZ,                 //BL
           normX, normYB, normZ - offset/2);  //BR
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	0fda      	lsrs	r2, r3, #31
 80016e0:	4413      	add	r3, r2
 80016e2:	105b      	asrs	r3, r3, #1
 80016e4:	425b      	negs	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ - offset/2,   //FL
 80016ec:	ee05 3a90 	vmov	s11, r3
 80016f0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80016f4:	eef0 1a46 	vmov.f32	s3, s12
 80016f8:	eeb0 1a66 	vmov.f32	s2, s13
 80016fc:	eef0 0a47 	vmov.f32	s1, s14
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	f7ff ff10 	bl	8001528 <moveTOPS>
  HAL_Delay(time);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4618      	mov	r0, r3
 800170c:	f000 ffce 	bl	80026ac <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF, normZ - offset,   //FL
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	ee07 3a10 	vmov	s14, r3
 8001720:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	ee06 3a90 	vmov	s13, r3
 800172e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	ee06 3a10 	vmov	s12, r3
 8001738:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	ee05 3a90 	vmov	s11, r3
 8001742:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	ee05 3a90 	vmov	s11, r3
 800174c:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	ee05 3a90 	vmov	s11, r3
 8001756:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	ee05 3a90 	vmov	s11, r3
 8001760:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	ee05 3a90 	vmov	s11, r3
 800176a:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	ee05 3a90 	vmov	s11, r3
 8001774:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	ee05 3a90 	vmov	s11, r3
 800177e:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYF, normZ,                 //FR
           normX, normYB, normZ,                 //BL
           normX, normYB, normZ - offset);  //BR
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ - offset,   //FL
 8001788:	ee05 3a90 	vmov	s11, r3
 800178c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001790:	eef0 1a46 	vmov.f32	s3, s12
 8001794:	eeb0 1a66 	vmov.f32	s2, s13
 8001798:	eef0 0a47 	vmov.f32	s1, s14
 800179c:	eeb0 0a67 	vmov.f32	s0, s15
 80017a0:	f7ff fec2 	bl	8001528 <moveTOPS>
  HAL_Delay(time);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 ff80 	bl	80026ac <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF + offsetY/2, normZ - offset/2,                           //FL
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	0fda      	lsrs	r2, r3, #31
 80017ba:	4413      	add	r3, r2
 80017bc:	105b      	asrs	r3, r3, #1
 80017be:	461a      	mov	r2, r3
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	ee07 3a10 	vmov	s14, r3
 80017c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	0fda      	lsrs	r2, r3, #31
 80017d0:	4413      	add	r3, r2
 80017d2:	105b      	asrs	r3, r3, #1
 80017d4:	425b      	negs	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	ee06 3a90 	vmov	s13, r3
 80017e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	ee06 3a10 	vmov	s12, r3
 80017ea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	ee05 3a90 	vmov	s11, r3
 80017f4:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	ee05 3a90 	vmov	s11, r3
 80017fe:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	ee05 3a90 	vmov	s11, r3
 8001808:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	ee05 3a90 	vmov	s11, r3
 8001812:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	ee05 3a90 	vmov	s11, r3
 800181c:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	ee05 3a90 	vmov	s11, r3
 8001826:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                                             //FR
           normX, normYB, normZ,                                                             //BL
           normX, normYB + offsetY/2, normZ - offset/2);  //BR
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	0fda      	lsrs	r2, r3, #31
 800182e:	4413      	add	r3, r2
 8001830:	105b      	asrs	r3, r3, #1
 8001832:	461a      	mov	r2, r3
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY/2, normZ - offset/2,                           //FL
 8001838:	ee05 3a90 	vmov	s11, r3
 800183c:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYB + offsetY/2, normZ - offset/2);  //BR
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	0fda      	lsrs	r2, r3, #31
 8001844:	4413      	add	r3, r2
 8001846:	105b      	asrs	r3, r3, #1
 8001848:	425b      	negs	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY/2, normZ - offset/2,                           //FL
 8001850:	ee05 3a90 	vmov	s11, r3
 8001854:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001858:	eef0 1a46 	vmov.f32	s3, s12
 800185c:	eeb0 1a66 	vmov.f32	s2, s13
 8001860:	eef0 0a47 	vmov.f32	s1, s14
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	f7ff fe5e 	bl	8001528 <moveTOPS>
  HAL_Delay(time);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 ff1c 	bl	80026ac <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF + offsetY, normZ - offset,                           //FL
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4413      	add	r3, r2
 8001884:	ee07 3a10 	vmov	s14, r3
 8001888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	ee06 3a90 	vmov	s13, r3
 8001896:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	ee06 3a10 	vmov	s12, r3
 80018a0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	ee05 3a90 	vmov	s11, r3
 80018aa:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	ee05 3a90 	vmov	s11, r3
 80018b4:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	ee05 3a90 	vmov	s11, r3
 80018be:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	ee05 3a90 	vmov	s11, r3
 80018c8:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	ee05 3a90 	vmov	s11, r3
 80018d2:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	ee05 3a90 	vmov	s11, r3
 80018dc:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                                             //FR
           normX, normYB, normZ,                                                             //BL
           normX, normYB + offsetY, normZ - offset);  //BR
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY, normZ - offset,                           //FL
 80018e6:	ee05 3a90 	vmov	s11, r3
 80018ea:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
           normX, normYB + offsetY, normZ - offset);  //BR
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF + offsetY, normZ - offset,                           //FL
 80018f4:	ee05 3a90 	vmov	s11, r3
 80018f8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80018fc:	eef0 1a46 	vmov.f32	s3, s12
 8001900:	eeb0 1a66 	vmov.f32	s2, s13
 8001904:	eef0 0a47 	vmov.f32	s1, s14
 8001908:	eeb0 0a67 	vmov.f32	s0, s15
 800190c:	f7ff fe0c 	bl	8001528 <moveTOPS>
  HAL_Delay(time);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 feca 	bl	80026ac <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF + offsetY/2, normZ,                           //FL
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	0fda      	lsrs	r2, r3, #31
 8001926:	4413      	add	r3, r2
 8001928:	105b      	asrs	r3, r3, #1
 800192a:	461a      	mov	r2, r3
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	4413      	add	r3, r2
 8001930:	ee07 3a10 	vmov	s14, r3
 8001934:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	ee06 3a90 	vmov	s13, r3
 800193e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	ee06 3a10 	vmov	s12, r3
 8001948:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	ee05 3a90 	vmov	s11, r3
 8001952:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	ee05 3a90 	vmov	s11, r3
 800195c:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	ee05 3a90 	vmov	s11, r3
 8001966:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	ee05 3a90 	vmov	s11, r3
 8001970:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	ee05 3a90 	vmov	s11, r3
 800197a:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	ee05 3a90 	vmov	s11, r3
 8001984:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                               //FR
           normX, normYB, normZ,                                               //BL
           normX, normYB + offsetY/2, normZ);  //BR
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	0fda      	lsrs	r2, r3, #31
 800198c:	4413      	add	r3, r2
 800198e:	105b      	asrs	r3, r3, #1
 8001990:	461a      	mov	r2, r3
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY/2, normZ,                           //FL
 8001996:	ee05 3a90 	vmov	s11, r3
 800199a:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	ee05 3a90 	vmov	s11, r3
 80019a4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80019a8:	eef0 1a46 	vmov.f32	s3, s12
 80019ac:	eeb0 1a66 	vmov.f32	s2, s13
 80019b0:	eef0 0a47 	vmov.f32	s1, s14
 80019b4:	eeb0 0a67 	vmov.f32	s0, s15
 80019b8:	f7ff fdb6 	bl	8001528 <moveTOPS>
  HAL_Delay(time);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fe74 	bl	80026ac <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF + offsetY, normZ,                           //FL
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4413      	add	r3, r2
 80019d4:	ee07 3a10 	vmov	s14, r3
 80019d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	ee06 3a90 	vmov	s13, r3
 80019e2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	ee06 3a10 	vmov	s12, r3
 80019ec:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	ee05 3a90 	vmov	s11, r3
 80019f6:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	ee05 3a90 	vmov	s11, r3
 8001a00:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	ee05 3a90 	vmov	s11, r3
 8001a0a:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	ee05 3a90 	vmov	s11, r3
 8001a14:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	ee05 3a90 	vmov	s11, r3
 8001a1e:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	ee05 3a90 	vmov	s11, r3
 8001a28:	eef8 4ae5 	vcvt.f32.s32	s9, s11
           normX, normYF, normZ,                                               //FR
           normX, normYB, normZ,                                               //BL
           normX, normYB + offsetY, normZ);  //BR
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4413      	add	r3, r2
  moveTOPS(normX, normYF + offsetY, normZ,                           //FL
 8001a32:	ee05 3a90 	vmov	s11, r3
 8001a36:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	ee05 3a90 	vmov	s11, r3
 8001a40:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001a44:	eef0 1a46 	vmov.f32	s3, s12
 8001a48:	eeb0 1a66 	vmov.f32	s2, s13
 8001a4c:	eef0 0a47 	vmov.f32	s1, s14
 8001a50:	eeb0 0a67 	vmov.f32	s0, s15
 8001a54:	f7ff fd68 	bl	8001528 <moveTOPS>
  HAL_Delay(time);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fe26 	bl	80026ac <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF, normZ,                //FL
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	ee07 3a10 	vmov	s14, r3
 8001a70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	ee06 3a90 	vmov	s13, r3
 8001a7a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	ee06 3a10 	vmov	s12, r3
 8001a84:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	ee05 3a90 	vmov	s11, r3
 8001a8e:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF, normZ - offset/2,  //FR
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	0fda      	lsrs	r2, r3, #31
 8001a96:	4413      	add	r3, r2
 8001a98:	105b      	asrs	r3, r3, #1
 8001a9a:	425b      	negs	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                //FL
 8001aa2:	ee05 3a90 	vmov	s11, r3
 8001aa6:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	ee05 3a90 	vmov	s11, r3
 8001ab0:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	ee05 3a90 	vmov	s11, r3
 8001aba:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB, normZ - offset/2,  //BL
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	0fda      	lsrs	r2, r3, #31
 8001ac2:	4413      	add	r3, r2
 8001ac4:	105b      	asrs	r3, r3, #1
 8001ac6:	425b      	negs	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                //FL
 8001ace:	ee05 3a90 	vmov	s11, r3
 8001ad2:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	ee05 3a90 	vmov	s11, r3
 8001adc:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	ee05 3a90 	vmov	s11, r3
 8001ae6:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	ee05 3a90 	vmov	s11, r3
 8001af0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001af4:	eef0 1a46 	vmov.f32	s3, s12
 8001af8:	eeb0 1a66 	vmov.f32	s2, s13
 8001afc:	eef0 0a47 	vmov.f32	s1, s14
 8001b00:	eeb0 0a67 	vmov.f32	s0, s15
 8001b04:	f7ff fd10 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);               //BR
  HAL_Delay(time);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 fdce 	bl	80026ac <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF, normZ,                //FL
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	ee07 3a10 	vmov	s14, r3
 8001b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	ee06 3a90 	vmov	s13, r3
 8001b2a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	ee06 3a10 	vmov	s12, r3
 8001b34:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	ee05 3a90 	vmov	s11, r3
 8001b3e:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF, normZ - offset,  //FR
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                //FL
 8001b48:	ee05 3a90 	vmov	s11, r3
 8001b4c:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	ee05 3a90 	vmov	s11, r3
 8001b56:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	ee05 3a90 	vmov	s11, r3
 8001b60:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB, normZ - offset,  //BL
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                //FL
 8001b6a:	ee05 3a90 	vmov	s11, r3
 8001b6e:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	ee05 3a90 	vmov	s11, r3
 8001b78:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	ee05 3a90 	vmov	s11, r3
 8001b82:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	ee05 3a90 	vmov	s11, r3
 8001b8c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001b90:	eef0 1a46 	vmov.f32	s3, s12
 8001b94:	eeb0 1a66 	vmov.f32	s2, s13
 8001b98:	eef0 0a47 	vmov.f32	s1, s14
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	f7ff fcc2 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);               //BR
  HAL_Delay(time);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fd80 	bl	80026ac <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	ee07 3a10 	vmov	s14, r3
 8001bbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	ee06 3a90 	vmov	s13, r3
 8001bc6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	ee06 3a10 	vmov	s12, r3
 8001bd0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY/2, normZ - offset/2,  //FR
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	0fda      	lsrs	r2, r3, #31
 8001bd8:	4413      	add	r3, r2
 8001bda:	105b      	asrs	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001be2:	ee05 3a90 	vmov	s11, r3
 8001be6:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF + offsetY/2, normZ - offset/2,  //FR
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	0fda      	lsrs	r2, r3, #31
 8001bee:	4413      	add	r3, r2
 8001bf0:	105b      	asrs	r3, r3, #1
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001bfa:	ee05 3a90 	vmov	s11, r3
 8001bfe:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	ee05 3a90 	vmov	s11, r3
 8001c08:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY/2, normZ - offset/2,                          //BL
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	0fda      	lsrs	r2, r3, #31
 8001c10:	4413      	add	r3, r2
 8001c12:	105b      	asrs	r3, r3, #1
 8001c14:	461a      	mov	r2, r3
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001c1a:	ee05 3a90 	vmov	s11, r3
 8001c1e:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB + offsetY/2, normZ - offset/2,                          //BL
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	0fda      	lsrs	r2, r3, #31
 8001c26:	4413      	add	r3, r2
 8001c28:	105b      	asrs	r3, r3, #1
 8001c2a:	425b      	negs	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001c32:	ee05 3a90 	vmov	s11, r3
 8001c36:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	ee05 3a90 	vmov	s11, r3
 8001c40:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	ee05 3a90 	vmov	s11, r3
 8001c4a:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	ee05 3a90 	vmov	s11, r3
 8001c54:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001c58:	eef0 1a46 	vmov.f32	s3, s12
 8001c5c:	eeb0 1a66 	vmov.f32	s2, s13
 8001c60:	eef0 0a47 	vmov.f32	s1, s14
 8001c64:	eeb0 0a67 	vmov.f32	s0, s15
 8001c68:	f7ff fc5e 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);                                                           //BR
  HAL_Delay(time);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 fd1c 	bl	80026ac <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	ee07 3a10 	vmov	s14, r3
 8001c84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	ee06 3a90 	vmov	s13, r3
 8001c8e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	ee06 3a10 	vmov	s12, r3
 8001c98:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY, normZ - offset,  //FR
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001ca2:	ee05 3a90 	vmov	s11, r3
 8001ca6:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
           normX, normYF + offsetY, normZ - offset,  //FR
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001cb0:	ee05 3a90 	vmov	s11, r3
 8001cb4:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	ee05 3a90 	vmov	s11, r3
 8001cbe:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY, normZ - offset,                          //BL
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001cc8:	ee05 3a90 	vmov	s11, r3
 8001ccc:	eef8 3ae5 	vcvt.f32.s32	s7, s11
           normX, normYB + offsetY, normZ - offset,                          //BL
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	1ad3      	subs	r3, r2, r3
  moveTOPS(normX, normYF, normZ,                                                            //FL
 8001cd6:	ee05 3a90 	vmov	s11, r3
 8001cda:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	ee05 3a90 	vmov	s11, r3
 8001ce4:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	ee05 3a90 	vmov	s11, r3
 8001cee:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	ee05 3a90 	vmov	s11, r3
 8001cf8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001cfc:	eef0 1a46 	vmov.f32	s3, s12
 8001d00:	eeb0 1a66 	vmov.f32	s2, s13
 8001d04:	eef0 0a47 	vmov.f32	s1, s14
 8001d08:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0c:	f7ff fc0c 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);                                                           //BR
  HAL_Delay(time);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fcca 	bl	80026ac <HAL_Delay>
  //1 point
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	ee07 3a10 	vmov	s14, r3
 8001d28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	ee06 3a90 	vmov	s13, r3
 8001d32:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	ee06 3a10 	vmov	s12, r3
 8001d3c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY/2, normZ,  //FR
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	0fda      	lsrs	r2, r3, #31
 8001d44:	4413      	add	r3, r2
 8001d46:	105b      	asrs	r3, r3, #1
 8001d48:	461a      	mov	r2, r3
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001d4e:	ee05 3a90 	vmov	s11, r3
 8001d52:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	ee05 3a90 	vmov	s11, r3
 8001d5c:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	ee05 3a90 	vmov	s11, r3
 8001d66:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY/2, normZ,                          //BL
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	0fda      	lsrs	r2, r3, #31
 8001d6e:	4413      	add	r3, r2
 8001d70:	105b      	asrs	r3, r3, #1
 8001d72:	461a      	mov	r2, r3
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001d78:	ee05 3a90 	vmov	s11, r3
 8001d7c:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	ee05 3a90 	vmov	s11, r3
 8001d86:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	ee05 3a90 	vmov	s11, r3
 8001d90:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	ee05 3a90 	vmov	s11, r3
 8001d9a:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	ee05 3a90 	vmov	s11, r3
 8001da4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001da8:	eef0 1a46 	vmov.f32	s3, s12
 8001dac:	eeb0 1a66 	vmov.f32	s2, s13
 8001db0:	eef0 0a47 	vmov.f32	s1, s14
 8001db4:	eeb0 0a67 	vmov.f32	s0, s15
 8001db8:	f7ff fbb6 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);                                             //BR
  HAL_Delay(time);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fc74 	bl	80026ac <HAL_Delay>
  //2 point
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	ee07 3a10 	vmov	s14, r3
 8001dd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	ee06 3a90 	vmov	s13, r3
 8001dde:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	ee06 3a10 	vmov	s12, r3
 8001de8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
           normX, normYF + offsetY, normZ,  //FR
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001df2:	ee05 3a90 	vmov	s11, r3
 8001df6:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	ee05 3a90 	vmov	s11, r3
 8001e00:	eef8 2ae5 	vcvt.f32.s32	s5, s11
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	ee05 3a90 	vmov	s11, r3
 8001e0a:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
           normX, normYB + offsetY, normZ,                          //BL
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
  moveTOPS(normX, normYF, normZ,                                              //FL
 8001e14:	ee05 3a90 	vmov	s11, r3
 8001e18:	eef8 3ae5 	vcvt.f32.s32	s7, s11
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	ee05 3a90 	vmov	s11, r3
 8001e22:	eeb8 4ae5 	vcvt.f32.s32	s8, s11
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	ee05 3a90 	vmov	s11, r3
 8001e2c:	eef8 4ae5 	vcvt.f32.s32	s9, s11
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	ee05 3a90 	vmov	s11, r3
 8001e36:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	ee05 3a90 	vmov	s11, r3
 8001e40:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001e44:	eef0 1a46 	vmov.f32	s3, s12
 8001e48:	eeb0 1a66 	vmov.f32	s2, s13
 8001e4c:	eef0 0a47 	vmov.f32	s1, s14
 8001e50:	eeb0 0a67 	vmov.f32	s0, s15
 8001e54:	f7ff fb68 	bl	8001528 <moveTOPS>
           normX, normYB, normZ);                                             //BR
  HAL_Delay(time);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fc26 	bl	80026ac <HAL_Delay>
}
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <UpdatePosition>:
	  HAL_Delay(time);
}

//void UpdatePosition(float theta_abad, float theta_hip, float theta_knee)
void UpdatePosition(int j, float relPos)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	ed87 0a00 	vstr	s0, [r7]
//abad плечо
//hip бедро
//knee колено
	switch(j)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b0b      	cmp	r3, #11
 8001e78:	f200 809a 	bhi.w	8001fb0 <UpdatePosition+0x148>
 8001e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e84 <UpdatePosition+0x1c>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001eb5 	.word	0x08001eb5
 8001e88:	08001ecd 	.word	0x08001ecd
 8001e8c:	08001ee5 	.word	0x08001ee5
 8001e90:	08001efd 	.word	0x08001efd
 8001e94:	08001f09 	.word	0x08001f09
 8001e98:	08001f21 	.word	0x08001f21
 8001e9c:	08001f39 	.word	0x08001f39
 8001ea0:	08001f51 	.word	0x08001f51
 8001ea4:	08001f69 	.word	0x08001f69
 8001ea8:	08001f81 	.word	0x08001f81
 8001eac:	08001f8d 	.word	0x08001f8d
 8001eb0:	08001fa5 	.word	0x08001fa5
	{
	//Передняя левая
	case 0:
	PCA9685_SetServoAngle(0, relPos - 20);
 8001eb4:	edd7 7a00 	vldr	s15, [r7]
 8001eb8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001ebc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff f87f 	bl	8000fc8 <PCA9685_SetServoAngle>
		///TIM2 ->CCR1 = relPos + 750 - 50;//плечо
		break;
 8001eca:	e071      	b.n	8001fb0 <UpdatePosition+0x148>
	case 1:
	PCA9685_SetServoAngle(1, relPos + 120);
 8001ecc:	edd7 7a00 	vldr	s15, [r7]
 8001ed0:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001fb8 <UpdatePosition+0x150>
 8001ed4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff f873 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM2 ->CCR2 = relPos + 750 - 300;//бедро
		break;
 8001ee2:	e065      	b.n	8001fb0 <UpdatePosition+0x148>
	case 2:
	PCA9685_SetServoAngle(2, relPos - 30);//70
 8001ee4:	edd7 7a00 	vldr	s15, [r7]
 8001ee8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001eec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f7ff f867 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM2 ->CCR3 = relPos + 750;//колено 1300 200
		break;
 8001efa:	e059      	b.n	8001fb0 <UpdatePosition+0x148>
	//Предняя правая
	case 3:
	PCA9685_SetServoAngle(3, relPos);
 8001efc:	ed97 0a00 	vldr	s0, [r7]
 8001f00:	2003      	movs	r0, #3
 8001f02:	f7ff f861 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM2 ->CCR4 = relPos + 750 - 470;
		break;
 8001f06:	e053      	b.n	8001fb0 <UpdatePosition+0x148>
	case 4:
	PCA9685_SetServoAngle(4, relPos + 20);
 8001f08:	edd7 7a00 	vldr	s15, [r7]
 8001f0c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001f10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	2004      	movs	r0, #4
 8001f1a:	f7ff f855 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR1 = relPos + 750 - 30;
		break;
 8001f1e:	e047      	b.n	8001fb0 <UpdatePosition+0x148>
	case 5:
	PCA9685_SetServoAngle(5, relPos + 40);
 8001f20:	edd7 7a00 	vldr	s15, [r7]
 8001f24:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001fbc <UpdatePosition+0x154>
 8001f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	2005      	movs	r0, #5
 8001f32:	f7ff f849 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR2 = relPos + 750 - 250;
		break;
 8001f36:	e03b      	b.n	8001fb0 <UpdatePosition+0x148>
	//Звдняя левая
	case 6:
	PCA9685_SetServoAngle(6, relPos - 10);
 8001f38:	edd7 7a00 	vldr	s15, [r7]
 8001f3c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	2006      	movs	r0, #6
 8001f4a:	f7ff f83d 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR3 = relPos + 750 - 150;
		break;
 8001f4e:	e02f      	b.n	8001fb0 <UpdatePosition+0x148>
	case 7:
	PCA9685_SetServoAngle(7, relPos + 70);
 8001f50:	edd7 7a00 	vldr	s15, [r7]
 8001f54:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001fc0 <UpdatePosition+0x158>
 8001f58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f60:	2007      	movs	r0, #7
 8001f62:	f7ff f831 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM3 ->CCR4 = relPos + 750 + 250;
		break;
 8001f66:	e023      	b.n	8001fb0 <UpdatePosition+0x148>
	case 8:
	PCA9685_SetServoAngle(8, relPos - 50);
 8001f68:	edd7 7a00 	vldr	s15, [r7]
 8001f6c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001fc4 <UpdatePosition+0x15c>
 8001f70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f74:	eeb0 0a67 	vmov.f32	s0, s15
 8001f78:	2008      	movs	r0, #8
 8001f7a:	f7ff f825 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM4 ->CCR1 = relPos + 750 - 600;
		break;
 8001f7e:	e017      	b.n	8001fb0 <UpdatePosition+0x148>
	//Задняя правая
	case 9:
	PCA9685_SetServoAngle(9, relPos);
 8001f80:	ed97 0a00 	vldr	s0, [r7]
 8001f84:	2009      	movs	r0, #9
 8001f86:	f7ff f81f 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM4 ->CCR2 = relPos + 750 - 350;
		break;
 8001f8a:	e011      	b.n	8001fb0 <UpdatePosition+0x148>
	case 10:
	PCA9685_SetServoAngle(10, relPos - 20);
 8001f8c:	edd7 7a00 	vldr	s15, [r7]
 8001f90:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f98:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9c:	200a      	movs	r0, #10
 8001f9e:	f7ff f813 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM4 ->CCR3 = relPos + 750 - 450;
		break;
 8001fa2:	e005      	b.n	8001fb0 <UpdatePosition+0x148>
	case 11:
	PCA9685_SetServoAngle(11, relPos);
 8001fa4:	ed97 0a00 	vldr	s0, [r7]
 8001fa8:	200b      	movs	r0, #11
 8001faa:	f7ff f80d 	bl	8000fc8 <PCA9685_SetServoAngle>
		//TIM5 ->CCR1 = relPos + 750 + 200;
		//TIM4 ->CCR1 = relPos + 750;
		break;
 8001fae:	bf00      	nop
	}
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	42f00000 	.word	0x42f00000
 8001fbc:	42200000 	.word	0x42200000
 8001fc0:	428c0000 	.word	0x428c0000
 8001fc4:	42480000 	.word	0x42480000

08001fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fcc:	f000 fafc 	bl	80025c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd0:	f000 f824 	bl	800201c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fd4:	f000 f90c 	bl	80021f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd8:	f000 f8e2 	bl	80021a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001fdc:	f000 f8b6 	bl	800214c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001fe0:	f000 f886 	bl	80020f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /*I2C1------------------------------------------------------------------------*/
  PCA9685_Init(50); // 50Hz for servo
 8001fe4:	2032      	movs	r0, #50	@ 0x32
 8001fe6:	f7fe ffab 	bl	8000f40 <PCA9685_Init>
  /*I2C1------------------------------------------------------------------------*/

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001fea:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <main+0x48>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <main+0x48>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0210 	orr.w	r2, r2, #16
 8001ff8:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, rx_buff, bufferUART);
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <main+0x4c>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4905      	ldr	r1, [pc, #20]	@ (8002018 <main+0x50>)
 8002002:	4803      	ldr	r0, [pc, #12]	@ (8002010 <main+0x48>)
 8002004:	f002 ff89 	bl	8004f1a <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  step();
 8002008:	f7ff fb18 	bl	800163c <step>
 800200c:	e7fc      	b.n	8002008 <main+0x40>
 800200e:	bf00      	nop
 8002010:	200000e0 	.word	0x200000e0
 8002014:	20000000 	.word	0x20000000
 8002018:	200001e8 	.word	0x200001e8

0800201c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b094      	sub	sp, #80	@ 0x50
 8002020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	2230      	movs	r2, #48	@ 0x30
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f004 faa6 	bl	800657c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <SystemClock_Config+0xcc>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	4a27      	ldr	r2, [pc, #156]	@ (80020e8 <SystemClock_Config+0xcc>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002050:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <SystemClock_Config+0xcc>)
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800205c:	2300      	movs	r3, #0
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <SystemClock_Config+0xd0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a21      	ldr	r2, [pc, #132]	@ (80020ec <SystemClock_Config+0xd0>)
 8002066:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <SystemClock_Config+0xd0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002078:	2302      	movs	r3, #2
 800207a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800207c:	2301      	movs	r3, #1
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002080:	2310      	movs	r3, #16
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002084:	2302      	movs	r3, #2
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002088:	2300      	movs	r3, #0
 800208a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800208c:	2310      	movs	r3, #16
 800208e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002090:	23c0      	movs	r3, #192	@ 0xc0
 8002092:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002094:	2302      	movs	r3, #2
 8002096:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002098:	2304      	movs	r3, #4
 800209a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 fa07 	bl	80044b4 <HAL_RCC_OscConfig>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020ac:	f000 f8d6 	bl	800225c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b0:	230f      	movs	r3, #15
 80020b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b4:	2302      	movs	r3, #2
 80020b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2103      	movs	r1, #3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f002 fc68 	bl	80049a4 <HAL_RCC_ClockConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020da:	f000 f8bf 	bl	800225c <Error_Handler>
  }
}
 80020de:	bf00      	nop
 80020e0:	3750      	adds	r7, #80	@ 0x50
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000

080020f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <MX_I2C1_Init+0x50>)
 80020f6:	4a13      	ldr	r2, [pc, #76]	@ (8002144 <MX_I2C1_Init+0x54>)
 80020f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <MX_I2C1_Init+0x50>)
 80020fc:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <MX_I2C1_Init+0x58>)
 80020fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002100:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <MX_I2C1_Init+0x50>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002106:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <MX_I2C1_Init+0x50>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <MX_I2C1_Init+0x50>)
 800210e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002112:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002114:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <MX_I2C1_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <MX_I2C1_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002120:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <MX_I2C1_Init+0x50>)
 8002122:	2200      	movs	r2, #0
 8002124:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <MX_I2C1_Init+0x50>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800212c:	4804      	ldr	r0, [pc, #16]	@ (8002140 <MX_I2C1_Init+0x50>)
 800212e:	f001 f99d 	bl	800346c <HAL_I2C_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002138:	f000 f890 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000008c 	.word	0x2000008c
 8002144:	40005400 	.word	0x40005400
 8002148:	000186a0 	.word	0x000186a0

0800214c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <MX_USART1_UART_Init+0x4c>)
 8002152:	4a12      	ldr	r2, [pc, #72]	@ (800219c <MX_USART1_UART_Init+0x50>)
 8002154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <MX_USART1_UART_Init+0x4c>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <MX_USART1_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <MX_USART1_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <MX_USART1_UART_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <MX_USART1_UART_Init+0x4c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <MX_USART1_UART_Init+0x4c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <MX_USART1_UART_Init+0x4c>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002182:	4805      	ldr	r0, [pc, #20]	@ (8002198 <MX_USART1_UART_Init+0x4c>)
 8002184:	f002 fdee 	bl	8004d64 <HAL_UART_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800218e:	f000 f865 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200000e0 	.word	0x200000e0
 800219c:	40011000 	.word	0x40011000

080021a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <MX_DMA_Init+0x4c>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a0f      	ldr	r2, [pc, #60]	@ (80021ec <MX_DMA_Init+0x4c>)
 80021b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <MX_DMA_Init+0x4c>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	203a      	movs	r0, #58	@ 0x3a
 80021c8:	f000 fb6f 	bl	80028aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80021cc:	203a      	movs	r0, #58	@ 0x3a
 80021ce:	f000 fb88 	bl	80028e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2046      	movs	r0, #70	@ 0x46
 80021d8:	f000 fb67 	bl	80028aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80021dc:	2046      	movs	r0, #70	@ 0x46
 80021de:	f000 fb80 	bl	80028e2 <HAL_NVIC_EnableIRQ>

}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <MX_GPIO_Init+0x68>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a16      	ldr	r2, [pc, #88]	@ (8002258 <MX_GPIO_Init+0x68>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <MX_GPIO_Init+0x68>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <MX_GPIO_Init+0x68>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a0f      	ldr	r2, [pc, #60]	@ (8002258 <MX_GPIO_Init+0x68>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <MX_GPIO_Init+0x68>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <MX_GPIO_Init+0x68>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <MX_GPIO_Init+0x68>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <MX_GPIO_Init+0x68>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
}
 8002262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <Error_Handler+0x8>

08002268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <HAL_MspInit+0x4c>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	4a0f      	ldr	r2, [pc, #60]	@ (80022b4 <HAL_MspInit+0x4c>)
 8002278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800227c:	6453      	str	r3, [r2, #68]	@ 0x44
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <HAL_MspInit+0x4c>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_MspInit+0x4c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a08      	ldr	r2, [pc, #32]	@ (80022b4 <HAL_MspInit+0x4c>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_MspInit+0x4c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a19      	ldr	r2, [pc, #100]	@ (800233c <HAL_I2C_MspInit+0x84>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d12b      	bne.n	8002332 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <HAL_I2C_MspInit+0x88>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a17      	ldr	r2, [pc, #92]	@ (8002340 <HAL_I2C_MspInit+0x88>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_I2C_MspInit+0x88>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022f6:	23c0      	movs	r3, #192	@ 0xc0
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fa:	2312      	movs	r3, #18
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002306:	2304      	movs	r3, #4
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	480c      	ldr	r0, [pc, #48]	@ (8002344 <HAL_I2C_MspInit+0x8c>)
 8002312:	f000 ff0f 	bl	8003134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_I2C_MspInit+0x88>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <HAL_I2C_MspInit+0x88>)
 8002320:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002324:	6413      	str	r3, [r2, #64]	@ 0x40
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_I2C_MspInit+0x88>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40005400 	.word	0x40005400
 8002340:	40023800 	.word	0x40023800
 8002344:	40020400 	.word	0x40020400

08002348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a4c      	ldr	r2, [pc, #304]	@ (8002498 <HAL_UART_MspInit+0x150>)
 8002366:	4293      	cmp	r3, r2
 8002368:	f040 8091 	bne.w	800248e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	4b4a      	ldr	r3, [pc, #296]	@ (800249c <HAL_UART_MspInit+0x154>)
 8002372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002374:	4a49      	ldr	r2, [pc, #292]	@ (800249c <HAL_UART_MspInit+0x154>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	6453      	str	r3, [r2, #68]	@ 0x44
 800237c:	4b47      	ldr	r3, [pc, #284]	@ (800249c <HAL_UART_MspInit+0x154>)
 800237e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	4b43      	ldr	r3, [pc, #268]	@ (800249c <HAL_UART_MspInit+0x154>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	4a42      	ldr	r2, [pc, #264]	@ (800249c <HAL_UART_MspInit+0x154>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	@ 0x30
 8002398:	4b40      	ldr	r3, [pc, #256]	@ (800249c <HAL_UART_MspInit+0x154>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80023a4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b2:	2302      	movs	r3, #2
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b6:	2307      	movs	r3, #7
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4837      	ldr	r0, [pc, #220]	@ (80024a0 <HAL_UART_MspInit+0x158>)
 80023c2:	f000 feb7 	bl	8003134 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023c6:	4b37      	ldr	r3, [pc, #220]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 80023c8:	4a37      	ldr	r2, [pc, #220]	@ (80024a8 <HAL_UART_MspInit+0x160>)
 80023ca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80023cc:	4b35      	ldr	r3, [pc, #212]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 80023ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d4:	4b33      	ldr	r3, [pc, #204]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023da:	4b32      	ldr	r3, [pc, #200]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e0:	4b30      	ldr	r3, [pc, #192]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 80023e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e8:	4b2e      	ldr	r3, [pc, #184]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ee:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80023f4:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023fa:	4b2a      	ldr	r3, [pc, #168]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002400:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 8002402:	2200      	movs	r2, #0
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002406:	4827      	ldr	r0, [pc, #156]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 8002408:	f000 fa86 	bl	8002918 <HAL_DMA_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002412:	f7ff ff23 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a22      	ldr	r2, [pc, #136]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 800241a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800241c:	4a21      	ldr	r2, [pc, #132]	@ (80024a4 <HAL_UART_MspInit+0x15c>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002422:	4b22      	ldr	r3, [pc, #136]	@ (80024ac <HAL_UART_MspInit+0x164>)
 8002424:	4a22      	ldr	r2, [pc, #136]	@ (80024b0 <HAL_UART_MspInit+0x168>)
 8002426:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002428:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <HAL_UART_MspInit+0x164>)
 800242a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800242e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002430:	4b1e      	ldr	r3, [pc, #120]	@ (80024ac <HAL_UART_MspInit+0x164>)
 8002432:	2240      	movs	r2, #64	@ 0x40
 8002434:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002436:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <HAL_UART_MspInit+0x164>)
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800243c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <HAL_UART_MspInit+0x164>)
 800243e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002442:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002444:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <HAL_UART_MspInit+0x164>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800244a:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <HAL_UART_MspInit+0x164>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002450:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <HAL_UART_MspInit+0x164>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <HAL_UART_MspInit+0x164>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_UART_MspInit+0x164>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002462:	4812      	ldr	r0, [pc, #72]	@ (80024ac <HAL_UART_MspInit+0x164>)
 8002464:	f000 fa58 	bl	8002918 <HAL_DMA_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800246e:	f7ff fef5 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a0d      	ldr	r2, [pc, #52]	@ (80024ac <HAL_UART_MspInit+0x164>)
 8002476:	639a      	str	r2, [r3, #56]	@ 0x38
 8002478:	4a0c      	ldr	r2, [pc, #48]	@ (80024ac <HAL_UART_MspInit+0x164>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2025      	movs	r0, #37	@ 0x25
 8002484:	f000 fa11 	bl	80028aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002488:	2025      	movs	r0, #37	@ 0x25
 800248a:	f000 fa2a 	bl	80028e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	@ 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40011000 	.word	0x40011000
 800249c:	40023800 	.word	0x40023800
 80024a0:	40020000 	.word	0x40020000
 80024a4:	20000128 	.word	0x20000128
 80024a8:	40026440 	.word	0x40026440
 80024ac:	20000188 	.word	0x20000188
 80024b0:	400264b8 	.word	0x400264b8

080024b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <NMI_Handler+0x4>

080024bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <MemManage_Handler+0x4>

080024cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <BusFault_Handler+0x4>

080024d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <UsageFault_Handler+0x4>

080024dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250a:	f000 f8af 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002518:	4802      	ldr	r0, [pc, #8]	@ (8002524 <USART1_IRQHandler+0x10>)
 800251a:	f002 fedb 	bl	80052d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200000e0 	.word	0x200000e0

08002528 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800252c:	4802      	ldr	r0, [pc, #8]	@ (8002538 <DMA2_Stream2_IRQHandler+0x10>)
 800252e:	f000 fb8b 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000128 	.word	0x20000128

0800253c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <DMA2_Stream7_IRQHandler+0x10>)
 8002542:	f000 fb81 	bl	8002c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000188 	.word	0x20000188

08002550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <SystemInit+0x20>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255a:	4a05      	ldr	r2, [pc, #20]	@ (8002570 <SystemInit+0x20>)
 800255c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002574:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002578:	480d      	ldr	r0, [pc, #52]	@ (80025b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800257a:	490e      	ldr	r1, [pc, #56]	@ (80025b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800257c:	4a0e      	ldr	r2, [pc, #56]	@ (80025b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002580:	e002      	b.n	8002588 <LoopCopyDataInit>

08002582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002586:	3304      	adds	r3, #4

08002588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800258c:	d3f9      	bcc.n	8002582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258e:	4a0b      	ldr	r2, [pc, #44]	@ (80025bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002590:	4c0b      	ldr	r4, [pc, #44]	@ (80025c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002594:	e001      	b.n	800259a <LoopFillZerobss>

08002596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002598:	3204      	adds	r2, #4

0800259a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800259c:	d3fb      	bcc.n	8002596 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800259e:	f7ff ffd7 	bl	8002550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a2:	f003 fff9 	bl	8006598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a6:	f7ff fd0f 	bl	8001fc8 <main>
  bx  lr    
 80025aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025b8:	08008360 	.word	0x08008360
  ldr r2, =_sbss
 80025bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025c0:	20000328 	.word	0x20000328

080025c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c4:	e7fe      	b.n	80025c4 <ADC_IRQHandler>
	...

080025c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002608 <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002608 <HAL_Init+0x40>)
 80025d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <HAL_Init+0x40>)
 80025de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a07      	ldr	r2, [pc, #28]	@ (8002608 <HAL_Init+0x40>)
 80025ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f0:	2003      	movs	r0, #3
 80025f2:	f000 f94f 	bl	8002894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f6:	200f      	movs	r0, #15
 80025f8:	f000 f808 	bl	800260c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025fc:	f7ff fe34 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00

0800260c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <HAL_InitTick+0x54>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_InitTick+0x58>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002622:	fbb3 f3f1 	udiv	r3, r3, r1
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f967 	bl	80028fe <HAL_SYSTICK_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e00e      	b.n	8002658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0f      	cmp	r3, #15
 800263e:	d80a      	bhi.n	8002656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002640:	2200      	movs	r2, #0
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f000 f92f 	bl	80028aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800264c:	4a06      	ldr	r2, [pc, #24]	@ (8002668 <HAL_InitTick+0x5c>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000004 	.word	0x20000004
 8002664:	2000000c 	.word	0x2000000c
 8002668:	20000008 	.word	0x20000008

0800266c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	2000000c 	.word	0x2000000c
 8002690:	200001ec 	.word	0x200001ec

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	200001ec 	.word	0x200001ec

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff ffee 	bl	8002694 <HAL_GetTick>
 80026b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d005      	beq.n	80026d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_Delay+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026d2:	bf00      	nop
 80026d4:	f7ff ffde 	bl	8002694 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8f7      	bhi.n	80026d4 <HAL_Delay+0x28>
  {
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000000c 	.word	0x2000000c

080026f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800271c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <__NVIC_SetPriorityGrouping+0x44>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002740:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <__NVIC_GetPriorityGrouping+0x18>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	f003 0307 	and.w	r3, r3, #7
}
 800274a:	4618      	mov	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db0b      	blt.n	8002782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4907      	ldr	r1, [pc, #28]	@ (8002790 <__NVIC_EnableIRQ+0x38>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	@ (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	@ (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	@ 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002860:	d301      	bcc.n	8002866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002862:	2301      	movs	r3, #1
 8002864:	e00f      	b.n	8002886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <SysTick_Config+0x40>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286e:	210f      	movs	r1, #15
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f7ff ff8e 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002878:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <SysTick_Config+0x40>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287e:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <SysTick_Config+0x40>)
 8002880:	2207      	movs	r2, #7
 8002882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	e000e010 	.word	0xe000e010

08002894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff29 	bl	80026f4 <__NVIC_SetPriorityGrouping>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028bc:	f7ff ff3e 	bl	800273c <__NVIC_GetPriorityGrouping>
 80028c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7ff ff8e 	bl	80027e8 <NVIC_EncodePriority>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff5d 	bl	8002794 <__NVIC_SetPriority>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff31 	bl	8002758 <__NVIC_EnableIRQ>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffa2 	bl	8002850 <SysTick_Config>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7ff feb6 	bl	8002694 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e099      	b.n	8002a68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002954:	e00f      	b.n	8002976 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002956:	f7ff fe9d 	bl	8002694 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b05      	cmp	r3, #5
 8002962:	d908      	bls.n	8002976 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2203      	movs	r2, #3
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e078      	b.n	8002a68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e8      	bne.n	8002956 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4b38      	ldr	r3, [pc, #224]	@ (8002a70 <HAL_DMA_Init+0x158>)
 8002990:	4013      	ands	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d107      	bne.n	80029e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d8:	4313      	orrs	r3, r2
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f023 0307 	bic.w	r3, r3, #7
 80029f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d117      	bne.n	8002a3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00e      	beq.n	8002a3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fb0d 	bl	800303c <DMA_CheckFifoParam>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2240      	movs	r2, #64	@ 0x40
 8002a2c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a36:	2301      	movs	r3, #1
 8002a38:	e016      	b.n	8002a68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fac4 	bl	8002fd0 <DMA_CalcBaseAndBitshift>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a50:	223f      	movs	r2, #63	@ 0x3f
 8002a52:	409a      	lsls	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	f010803f 	.word	0xf010803f

08002a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_DMA_Start_IT+0x26>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e040      	b.n	8002b1c <HAL_DMA_Start_IT+0xa8>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d12f      	bne.n	8002b0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fa56 	bl	8002f74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	223f      	movs	r2, #63	@ 0x3f
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0216 	orr.w	r2, r2, #22
 8002ae2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0208 	orr.w	r2, r2, #8
 8002afa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e005      	b.n	8002b1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
 8002b18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b32:	f7ff fdaf 	bl	8002694 <HAL_GetTick>
 8002b36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d008      	beq.n	8002b56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2280      	movs	r2, #128	@ 0x80
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e052      	b.n	8002bfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0216 	bic.w	r2, r2, #22
 8002b64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_DMA_Abort+0x62>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0208 	bic.w	r2, r2, #8
 8002b94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba6:	e013      	b.n	8002bd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba8:	f7ff fd74 	bl	8002694 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d90c      	bls.n	8002bd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e015      	b.n	8002bfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e4      	bne.n	8002ba8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be2:	223f      	movs	r2, #63	@ 0x3f
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d004      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2280      	movs	r2, #128	@ 0x80
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00c      	b.n	8002c3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2205      	movs	r2, #5
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c54:	4b8e      	ldr	r3, [pc, #568]	@ (8002e90 <HAL_DMA_IRQHandler+0x248>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a8e      	ldr	r2, [pc, #568]	@ (8002e94 <HAL_DMA_IRQHandler+0x24c>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0a9b      	lsrs	r3, r3, #10
 8002c60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	2208      	movs	r2, #8
 8002c74:	409a      	lsls	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01a      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0204 	bic.w	r2, r2, #4
 8002c9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	2201      	movs	r2, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce2:	f043 0202 	orr.w	r2, r3, #2
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	2204      	movs	r2, #4
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00b      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d24:	2210      	movs	r2, #16
 8002d26:	409a      	lsls	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d043      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03c      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	2210      	movs	r2, #16
 8002d44:	409a      	lsls	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d018      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d024      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
 8002d76:	e01f      	b.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e016      	b.n	8002db8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0208 	bic.w	r2, r2, #8
 8002da6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 808f 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8087 	beq.w	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dde:	2220      	movs	r2, #32
 8002de0:	409a      	lsls	r2, r3
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b05      	cmp	r3, #5
 8002df0:	d136      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0216 	bic.w	r2, r2, #22
 8002e00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <HAL_DMA_IRQHandler+0x1da>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0208 	bic.w	r2, r2, #8
 8002e30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e36:	223f      	movs	r2, #63	@ 0x3f
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d07e      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
        }
        return;
 8002e5e:	e079      	b.n	8002f54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01d      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10d      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d031      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	e02c      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
 8002e8e:	bf00      	nop
 8002e90:	20000004 	.word	0x20000004
 8002e94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d023      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
 8002ea8:	e01e      	b.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0210 	bic.w	r2, r2, #16
 8002ec6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d032      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d022      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2205      	movs	r2, #5
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d307      	bcc.n	8002f30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f2      	bne.n	8002f14 <HAL_DMA_IRQHandler+0x2cc>
 8002f2e:	e000      	b.n	8002f32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
 8002f52:	e000      	b.n	8002f56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f54:	bf00      	nop
    }
  }
}
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b40      	cmp	r3, #64	@ 0x40
 8002fa0:	d108      	bne.n	8002fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fb2:	e007      	b.n	8002fc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b10      	subs	r3, #16
 8002fe0:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <DMA_CalcBaseAndBitshift+0x64>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fea:	4a13      	ldr	r2, [pc, #76]	@ (8003038 <DMA_CalcBaseAndBitshift+0x68>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d909      	bls.n	8003012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003010:	e007      	b.n	8003022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	aaaaaaab 	.word	0xaaaaaaab
 8003038:	080082d0 	.word	0x080082d0

0800303c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11f      	bne.n	8003096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d856      	bhi.n	800310a <DMA_CheckFifoParam+0xce>
 800305c:	a201      	add	r2, pc, #4	@ (adr r2, 8003064 <DMA_CheckFifoParam+0x28>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003075 	.word	0x08003075
 8003068:	08003087 	.word	0x08003087
 800306c:	08003075 	.word	0x08003075
 8003070:	0800310b 	.word	0x0800310b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d046      	beq.n	800310e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e043      	b.n	800310e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800308e:	d140      	bne.n	8003112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003094:	e03d      	b.n	8003112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800309e:	d121      	bne.n	80030e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d837      	bhi.n	8003116 <DMA_CheckFifoParam+0xda>
 80030a6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <DMA_CheckFifoParam+0x70>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c3 	.word	0x080030c3
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	080030d5 	.word	0x080030d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e030      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d025      	beq.n	800311a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d2:	e022      	b.n	800311a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030dc:	d11f      	bne.n	800311e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e2:	e01c      	b.n	800311e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d903      	bls.n	80030f2 <DMA_CheckFifoParam+0xb6>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d003      	beq.n	80030f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030f0:	e018      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      break;
 80030f6:	e015      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00e      	beq.n	8003122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      break;
 8003108:	e00b      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 800310a:	bf00      	nop
 800310c:	e00a      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800310e:	bf00      	nop
 8003110:	e008      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e006      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e004      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;   
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <DMA_CheckFifoParam+0xe8>
      break;
 8003122:	bf00      	nop
    }
  } 
  
  return status; 
 8003124:	7bfb      	ldrb	r3, [r7, #15]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	e16b      	b.n	8003428 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	429a      	cmp	r2, r3
 800316a:	f040 815a 	bne.w	8003422 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d005      	beq.n	8003186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003182:	2b02      	cmp	r3, #2
 8003184:	d130      	bne.n	80031e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031bc:	2201      	movs	r2, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 0201 	and.w	r2, r3, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d017      	beq.n	8003224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d123      	bne.n	8003278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	08da      	lsrs	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3208      	adds	r2, #8
 8003238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	220f      	movs	r2, #15
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3208      	adds	r2, #8
 8003272:	69b9      	ldr	r1, [r7, #24]
 8003274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80b4 	beq.w	8003422 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b60      	ldr	r3, [pc, #384]	@ (8003440 <HAL_GPIO_Init+0x30c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003440 <HAL_GPIO_Init+0x30c>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003440 <HAL_GPIO_Init+0x30c>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003444 <HAL_GPIO_Init+0x310>)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	3302      	adds	r3, #2
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	220f      	movs	r2, #15
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a52      	ldr	r2, [pc, #328]	@ (8003448 <HAL_GPIO_Init+0x314>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d02b      	beq.n	800335a <HAL_GPIO_Init+0x226>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a51      	ldr	r2, [pc, #324]	@ (800344c <HAL_GPIO_Init+0x318>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d025      	beq.n	8003356 <HAL_GPIO_Init+0x222>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a50      	ldr	r2, [pc, #320]	@ (8003450 <HAL_GPIO_Init+0x31c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01f      	beq.n	8003352 <HAL_GPIO_Init+0x21e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4f      	ldr	r2, [pc, #316]	@ (8003454 <HAL_GPIO_Init+0x320>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d019      	beq.n	800334e <HAL_GPIO_Init+0x21a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4e      	ldr	r2, [pc, #312]	@ (8003458 <HAL_GPIO_Init+0x324>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_GPIO_Init+0x216>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4d      	ldr	r2, [pc, #308]	@ (800345c <HAL_GPIO_Init+0x328>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00d      	beq.n	8003346 <HAL_GPIO_Init+0x212>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4c      	ldr	r2, [pc, #304]	@ (8003460 <HAL_GPIO_Init+0x32c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <HAL_GPIO_Init+0x20e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4b      	ldr	r2, [pc, #300]	@ (8003464 <HAL_GPIO_Init+0x330>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_GPIO_Init+0x20a>
 800333a:	2307      	movs	r3, #7
 800333c:	e00e      	b.n	800335c <HAL_GPIO_Init+0x228>
 800333e:	2308      	movs	r3, #8
 8003340:	e00c      	b.n	800335c <HAL_GPIO_Init+0x228>
 8003342:	2306      	movs	r3, #6
 8003344:	e00a      	b.n	800335c <HAL_GPIO_Init+0x228>
 8003346:	2305      	movs	r3, #5
 8003348:	e008      	b.n	800335c <HAL_GPIO_Init+0x228>
 800334a:	2304      	movs	r3, #4
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x228>
 800334e:	2303      	movs	r3, #3
 8003350:	e004      	b.n	800335c <HAL_GPIO_Init+0x228>
 8003352:	2302      	movs	r3, #2
 8003354:	e002      	b.n	800335c <HAL_GPIO_Init+0x228>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x228>
 800335a:	2300      	movs	r3, #0
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	f002 0203 	and.w	r2, r2, #3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4093      	lsls	r3, r2
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800336c:	4935      	ldr	r1, [pc, #212]	@ (8003444 <HAL_GPIO_Init+0x310>)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337a:	4b3b      	ldr	r3, [pc, #236]	@ (8003468 <HAL_GPIO_Init+0x334>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800339e:	4a32      	ldr	r2, [pc, #200]	@ (8003468 <HAL_GPIO_Init+0x334>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a4:	4b30      	ldr	r3, [pc, #192]	@ (8003468 <HAL_GPIO_Init+0x334>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c8:	4a27      	ldr	r2, [pc, #156]	@ (8003468 <HAL_GPIO_Init+0x334>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ce:	4b26      	ldr	r3, [pc, #152]	@ (8003468 <HAL_GPIO_Init+0x334>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003468 <HAL_GPIO_Init+0x334>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <HAL_GPIO_Init+0x334>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341c:	4a12      	ldr	r2, [pc, #72]	@ (8003468 <HAL_GPIO_Init+0x334>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	f67f ae90 	bls.w	8003150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3724      	adds	r7, #36	@ 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40013800 	.word	0x40013800
 8003448:	40020000 	.word	0x40020000
 800344c:	40020400 	.word	0x40020400
 8003450:	40020800 	.word	0x40020800
 8003454:	40020c00 	.word	0x40020c00
 8003458:	40021000 	.word	0x40021000
 800345c:	40021400 	.word	0x40021400
 8003460:	40021800 	.word	0x40021800
 8003464:	40021c00 	.word	0x40021c00
 8003468:	40013c00 	.word	0x40013c00

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e12b      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe ff10 	bl	80022b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	@ 0x24
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d0:	f001 fc20 	bl	8004d14 <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a81      	ldr	r2, [pc, #516]	@ (80036e0 <HAL_I2C_Init+0x274>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d807      	bhi.n	80034f0 <HAL_I2C_Init+0x84>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a80      	ldr	r2, [pc, #512]	@ (80036e4 <HAL_I2C_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e006      	b.n	80034fe <HAL_I2C_Init+0x92>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7d      	ldr	r2, [pc, #500]	@ (80036e8 <HAL_I2C_Init+0x27c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0e7      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a78      	ldr	r2, [pc, #480]	@ (80036ec <HAL_I2C_Init+0x280>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0c9b      	lsrs	r3, r3, #18
 8003510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a6a      	ldr	r2, [pc, #424]	@ (80036e0 <HAL_I2C_Init+0x274>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <HAL_I2C_Init+0xd4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3301      	adds	r3, #1
 800353e:	e009      	b.n	8003554 <HAL_I2C_Init+0xe8>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	4a69      	ldr	r2, [pc, #420]	@ (80036f0 <HAL_I2C_Init+0x284>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	3301      	adds	r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003566:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	495c      	ldr	r1, [pc, #368]	@ (80036e0 <HAL_I2C_Init+0x274>)
 8003570:	428b      	cmp	r3, r1
 8003572:	d819      	bhi.n	80035a8 <HAL_I2C_Init+0x13c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e59      	subs	r1, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003588:	400b      	ands	r3, r1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_I2C_Init+0x138>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e59      	subs	r1, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fbb1 f3f3 	udiv	r3, r1, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	e051      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e04f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <HAL_I2C_Init+0x168>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e012      	b.n	80035fa <HAL_I2C_Init+0x18e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	0099      	lsls	r1, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x196>
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_I2C_Init+0x1bc>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e58      	subs	r0, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	440b      	add	r3, r1
 8003618:	fbb0 f3f3 	udiv	r3, r0, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003626:	e00f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6809      	ldr	r1, [r1, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003676:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6911      	ldr	r1, [r2, #16]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	000186a0 	.word	0x000186a0
 80036e4:	001e847f 	.word	0x001e847f
 80036e8:	003d08ff 	.word	0x003d08ff
 80036ec:	431bde83 	.word	0x431bde83
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	461a      	mov	r2, r3
 8003702:	4603      	mov	r3, r0
 8003704:	817b      	strh	r3, [r7, #10]
 8003706:	460b      	mov	r3, r1
 8003708:	813b      	strh	r3, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800370e:	f7fe ffc1 	bl	8002694 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	f040 80d9 	bne.w	80038d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2319      	movs	r3, #25
 8003728:	2201      	movs	r2, #1
 800372a:	496d      	ldr	r1, [pc, #436]	@ (80038e0 <HAL_I2C_Mem_Write+0x1ec>)
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fc8b 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	e0cc      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_I2C_Mem_Write+0x56>
 8003746:	2302      	movs	r3, #2
 8003748:	e0c5      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d007      	beq.n	8003770 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2221      	movs	r2, #33	@ 0x21
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2240      	movs	r2, #64	@ 0x40
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a4d      	ldr	r2, [pc, #308]	@ (80038e4 <HAL_I2C_Mem_Write+0x1f0>)
 80037b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037b2:	88f8      	ldrh	r0, [r7, #6]
 80037b4:	893a      	ldrh	r2, [r7, #8]
 80037b6:	8979      	ldrh	r1, [r7, #10]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4603      	mov	r3, r0
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fac2 	bl	8003d4c <I2C_RequestMemoryWrite>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d052      	beq.n	8003874 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e081      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fd50 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d107      	bne.n	80037fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06b      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d11b      	bne.n	8003874 <HAL_I2C_Mem_Write+0x180>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d017      	beq.n	8003874 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1aa      	bne.n	80037d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fd43 	bl	800430c <I2C_WaitOnBTFFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	2b04      	cmp	r3, #4
 8003892:	d107      	bne.n	80038a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e016      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000

080038e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	@ 0x30
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	460b      	mov	r3, r1
 80038fc:	813b      	strh	r3, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003902:	f7fe fec7 	bl	8002694 <HAL_GetTick>
 8003906:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b20      	cmp	r3, #32
 8003912:	f040 8214 	bne.w	8003d3e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2319      	movs	r3, #25
 800391c:	2201      	movs	r2, #1
 800391e:	497b      	ldr	r1, [pc, #492]	@ (8003b0c <HAL_I2C_Mem_Read+0x224>)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fb91 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
 800392e:	e207      	b.n	8003d40 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_I2C_Mem_Read+0x56>
 800393a:	2302      	movs	r3, #2
 800393c:	e200      	b.n	8003d40 <HAL_I2C_Mem_Read+0x458>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	d007      	beq.n	8003964 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2222      	movs	r2, #34	@ 0x22
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2240      	movs	r2, #64	@ 0x40
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b10 <HAL_I2C_Mem_Read+0x228>)
 80039a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a6:	88f8      	ldrh	r0, [r7, #6]
 80039a8:	893a      	ldrh	r2, [r7, #8]
 80039aa:	8979      	ldrh	r1, [r7, #10]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fa5e 	bl	8003e78 <I2C_RequestMemoryRead>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1bc      	b.n	8003d40 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d113      	bne.n	80039f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	623b      	str	r3, [r7, #32]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	623b      	str	r3, [r7, #32]
 80039e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e190      	b.n	8003d18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d11b      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e170      	b.n	8003d18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d11b      	bne.n	8003a76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	e150      	b.n	8003d18 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a8c:	e144      	b.n	8003d18 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	f200 80f1 	bhi.w	8003c7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d123      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fc79 	bl	800439c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e145      	b.n	8003d40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ae6:	e117      	b.n	8003d18 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d14e      	bne.n	8003b8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af6:	2200      	movs	r2, #0
 8003af8:	4906      	ldr	r1, [pc, #24]	@ (8003b14 <HAL_I2C_Mem_Read+0x22c>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 faa4 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e11a      	b.n	8003d40 <HAL_I2C_Mem_Read+0x458>
 8003b0a:	bf00      	nop
 8003b0c:	00100002 	.word	0x00100002
 8003b10:	ffff0000 	.word	0xffff0000
 8003b14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b8c:	e0c4      	b.n	8003d18 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b94:	2200      	movs	r2, #0
 8003b96:	496c      	ldr	r1, [pc, #432]	@ (8003d48 <HAL_I2C_Mem_Read+0x460>)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fa55 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0cb      	b.n	8003d40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4955      	ldr	r1, [pc, #340]	@ (8003d48 <HAL_I2C_Mem_Read+0x460>)
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fa27 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e09d      	b.n	8003d40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c78:	e04e      	b.n	8003d18 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fb8c 	bl	800439c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e058      	b.n	8003d40 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d124      	bne.n	8003d18 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d107      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f47f aeb6 	bne.w	8003a8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	@ 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	00010004 	.word	0x00010004

08003d4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	817b      	strh	r3, [r7, #10]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	813b      	strh	r3, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f960 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00d      	beq.n	8003daa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d9c:	d103      	bne.n	8003da6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003da4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e05f      	b.n	8003e6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003daa:	897b      	ldrh	r3, [r7, #10]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003db8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	6a3a      	ldr	r2, [r7, #32]
 8003dbe:	492d      	ldr	r1, [pc, #180]	@ (8003e74 <I2C_RequestMemoryWrite+0x128>)
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f9bb 	bl	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e04c      	b.n	8003e6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de8:	6a39      	ldr	r1, [r7, #32]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fa46 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d107      	bne.n	8003e0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e02b      	b.n	8003e6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d105      	bne.n	8003e24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e18:	893b      	ldrh	r3, [r7, #8]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]
 8003e22:	e021      	b.n	8003e68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e24:	893b      	ldrh	r3, [r7, #8]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e34:	6a39      	ldr	r1, [r7, #32]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 fa20 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d107      	bne.n	8003e5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e005      	b.n	8003e6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5e:	893b      	ldrh	r3, [r7, #8]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	00010002 	.word	0x00010002

08003e78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	4608      	mov	r0, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	461a      	mov	r2, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	817b      	strh	r3, [r7, #10]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	813b      	strh	r3, [r7, #8]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ea0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f8c2 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed8:	d103      	bne.n	8003ee2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ee0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0aa      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee6:	897b      	ldrh	r3, [r7, #10]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ef4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	4952      	ldr	r1, [pc, #328]	@ (8004044 <I2C_RequestMemoryRead+0x1cc>)
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f91d 	bl	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e097      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f24:	6a39      	ldr	r1, [r7, #32]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f9a8 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d107      	bne.n	8003f4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e076      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d105      	bne.n	8003f60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f54:	893b      	ldrh	r3, [r7, #8]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	611a      	str	r2, [r3, #16]
 8003f5e:	e021      	b.n	8003fa4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f60:	893b      	ldrh	r3, [r7, #8]
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f70:	6a39      	ldr	r1, [r7, #32]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f982 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d107      	bne.n	8003f96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e050      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9a:	893b      	ldrh	r3, [r7, #8]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa6:	6a39      	ldr	r1, [r7, #32]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f967 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d107      	bne.n	8003fcc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e035      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f82b 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004006:	d103      	bne.n	8004010 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e013      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004014:	897b      	ldrh	r3, [r7, #10]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	4906      	ldr	r1, [pc, #24]	@ (8004044 <I2C_RequestMemoryRead+0x1cc>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 f886 	bl	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	00010002 	.word	0x00010002

08004048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004058:	e048      	b.n	80040ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d044      	beq.n	80040ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004062:	f7fe fb17 	bl	8002694 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d139      	bne.n	80040ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10d      	bne.n	800409e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	43da      	mvns	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	e00c      	b.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	43da      	mvns	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	4013      	ands	r3, r2
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d116      	bne.n	80040ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d8:	f043 0220 	orr.w	r2, r3, #32
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e023      	b.n	8004134 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10d      	bne.n	8004112 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	43da      	mvns	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4013      	ands	r3, r2
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	e00c      	b.n	800412c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	43da      	mvns	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	4013      	ands	r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	429a      	cmp	r2, r3
 8004130:	d093      	beq.n	800405a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800414a:	e071      	b.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415a:	d123      	bne.n	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004174:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	f043 0204 	orr.w	r2, r3, #4
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e067      	b.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d041      	beq.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ac:	f7fe fa72 	bl	8002694 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d136      	bne.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d10c      	bne.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	43da      	mvns	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf14      	ite	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	2300      	moveq	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e00b      	b.n	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	43da      	mvns	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4013      	ands	r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d016      	beq.n	8004230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e021      	b.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10c      	bne.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	43da      	mvns	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e00b      	b.n	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	43da      	mvns	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4013      	ands	r3, r2
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf14      	ite	ne
 8004266:	2301      	movne	r3, #1
 8004268:	2300      	moveq	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	f47f af6d 	bne.w	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004288:	e034      	b.n	80042f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f8e3 	bl	8004456 <I2C_IsAcknowledgeFailed>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e034      	b.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d028      	beq.n	80042f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fe f9f7 	bl	8002694 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d11d      	bne.n	80042f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c2:	2b80      	cmp	r3, #128	@ 0x80
 80042c4:	d016      	beq.n	80042f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e007      	b.n	8004304 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fe:	2b80      	cmp	r3, #128	@ 0x80
 8004300:	d1c3      	bne.n	800428a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004318:	e034      	b.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f89b 	bl	8004456 <I2C_IsAcknowledgeFailed>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e034      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d028      	beq.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7fe f9af 	bl	8002694 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d11d      	bne.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b04      	cmp	r3, #4
 8004354:	d016      	beq.n	8004384 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	f043 0220 	orr.w	r2, r3, #32
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e007      	b.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b04      	cmp	r3, #4
 8004390:	d1c3      	bne.n	800431a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a8:	e049      	b.n	800443e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d119      	bne.n	80043ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0210 	mvn.w	r2, #16
 80043c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e030      	b.n	800444e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ec:	f7fe f952 	bl	8002694 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d302      	bcc.n	8004402 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11d      	bne.n	800443e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d016      	beq.n	800443e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e007      	b.n	800444e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004448:	2b40      	cmp	r3, #64	@ 0x40
 800444a:	d1ae      	bne.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800446c:	d11b      	bne.n	80044a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004476:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f043 0204 	orr.w	r2, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e267      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d075      	beq.n	80045be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044d2:	4b88      	ldr	r3, [pc, #544]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d00c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4b85      	ldr	r3, [pc, #532]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d112      	bne.n	8004510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4b82      	ldr	r3, [pc, #520]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f6:	d10b      	bne.n	8004510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	4b7e      	ldr	r3, [pc, #504]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d05b      	beq.n	80045bc <HAL_RCC_OscConfig+0x108>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d157      	bne.n	80045bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e242      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004518:	d106      	bne.n	8004528 <HAL_RCC_OscConfig+0x74>
 800451a:	4b76      	ldr	r3, [pc, #472]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a75      	ldr	r2, [pc, #468]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e01d      	b.n	8004564 <HAL_RCC_OscConfig+0xb0>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0x98>
 8004532:	4b70      	ldr	r3, [pc, #448]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6f      	ldr	r2, [pc, #444]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b6d      	ldr	r3, [pc, #436]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6c      	ldr	r2, [pc, #432]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e00b      	b.n	8004564 <HAL_RCC_OscConfig+0xb0>
 800454c:	4b69      	ldr	r3, [pc, #420]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a68      	ldr	r2, [pc, #416]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b66      	ldr	r3, [pc, #408]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a65      	ldr	r2, [pc, #404]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800455e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe f892 	bl	8002694 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe f88e 	bl	8002694 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e207      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b5b      	ldr	r3, [pc, #364]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0xc0>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fe f87e 	bl	8002694 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800459c:	f7fe f87a 	bl	8002694 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	@ 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e1f3      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	4b51      	ldr	r3, [pc, #324]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0xe8>
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d063      	beq.n	8004692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ca:	4b4a      	ldr	r3, [pc, #296]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d6:	4b47      	ldr	r3, [pc, #284]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d11c      	bne.n	800461c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e2:	4b44      	ldr	r3, [pc, #272]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d116      	bne.n	800461c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	4b41      	ldr	r3, [pc, #260]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_RCC_OscConfig+0x152>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d001      	beq.n	8004606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e1c7      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004606:	4b3b      	ldr	r3, [pc, #236]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4937      	ldr	r1, [pc, #220]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461a:	e03a      	b.n	8004692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004624:	4b34      	ldr	r3, [pc, #208]	@ (80046f8 <HAL_RCC_OscConfig+0x244>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fe f833 	bl	8002694 <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004632:	f7fe f82f 	bl	8002694 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e1a8      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004650:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4925      	ldr	r1, [pc, #148]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
 8004664:	e015      	b.n	8004692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004666:	4b24      	ldr	r3, [pc, #144]	@ (80046f8 <HAL_RCC_OscConfig+0x244>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fe f812 	bl	8002694 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004674:	f7fe f80e 	bl	8002694 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e187      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004686:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d036      	beq.n	800470c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a6:	4b15      	ldr	r3, [pc, #84]	@ (80046fc <HAL_RCC_OscConfig+0x248>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fd fff2 	bl	8002694 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b4:	f7fd ffee 	bl	8002694 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e167      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c6:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80046c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x200>
 80046d2:	e01b      	b.n	800470c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d4:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_RCC_OscConfig+0x248>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fd ffdb 	bl	8002694 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	e00e      	b.n	8004700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fd ffd7 	bl	8002694 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d907      	bls.n	8004700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e150      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
 80046f4:	40023800 	.word	0x40023800
 80046f8:	42470000 	.word	0x42470000
 80046fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	4b88      	ldr	r3, [pc, #544]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ea      	bne.n	80046e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8097 	beq.w	8004848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471e:	4b81      	ldr	r3, [pc, #516]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10f      	bne.n	800474a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	4b7d      	ldr	r3, [pc, #500]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	4a7c      	ldr	r2, [pc, #496]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004738:	6413      	str	r3, [r2, #64]	@ 0x40
 800473a:	4b7a      	ldr	r3, [pc, #488]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	4b77      	ldr	r3, [pc, #476]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d118      	bne.n	8004788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004756:	4b74      	ldr	r3, [pc, #464]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a73      	ldr	r2, [pc, #460]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004762:	f7fd ff97 	bl	8002694 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476a:	f7fd ff93 	bl	8002694 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e10c      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	4b6a      	ldr	r3, [pc, #424]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x2ea>
 8004790:	4b64      	ldr	r3, [pc, #400]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	4a63      	ldr	r2, [pc, #396]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	@ 0x70
 800479c:	e01c      	b.n	80047d8 <HAL_RCC_OscConfig+0x324>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b05      	cmp	r3, #5
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x30c>
 80047a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047ac:	f043 0304 	orr.w	r3, r3, #4
 80047b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0x324>
 80047c0:	4b58      	ldr	r3, [pc, #352]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	4a57      	ldr	r2, [pc, #348]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80047cc:	4b55      	ldr	r3, [pc, #340]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d0:	4a54      	ldr	r2, [pc, #336]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047d2:	f023 0304 	bic.w	r3, r3, #4
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fd ff58 	bl	8002694 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e8:	f7fd ff54 	bl	8002694 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e0cb      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fe:	4b49      	ldr	r3, [pc, #292]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ee      	beq.n	80047e8 <HAL_RCC_OscConfig+0x334>
 800480a:	e014      	b.n	8004836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fd ff42 	bl	8002694 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004812:	e00a      	b.n	800482a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fd ff3e 	bl	8002694 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e0b5      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482a:	4b3e      	ldr	r3, [pc, #248]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ee      	bne.n	8004814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004836:	7dfb      	ldrb	r3, [r7, #23]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d105      	bne.n	8004848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483c:	4b39      	ldr	r3, [pc, #228]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	4a38      	ldr	r2, [pc, #224]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004846:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80a1 	beq.w	8004994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004852:	4b34      	ldr	r3, [pc, #208]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b08      	cmp	r3, #8
 800485c:	d05c      	beq.n	8004918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d141      	bne.n	80048ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004866:	4b31      	ldr	r3, [pc, #196]	@ (800492c <HAL_RCC_OscConfig+0x478>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fd ff12 	bl	8002694 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004874:	f7fd ff0e 	bl	8002694 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e087      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	4b27      	ldr	r3, [pc, #156]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	3b01      	subs	r3, #1
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	491b      	ldr	r1, [pc, #108]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048bc:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <HAL_RCC_OscConfig+0x478>)
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fd fee7 	bl	8002694 <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fd fee3 	bl	8002694 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e05c      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048dc:	4b11      	ldr	r3, [pc, #68]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x416>
 80048e8:	e054      	b.n	8004994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ea:	4b10      	ldr	r3, [pc, #64]	@ (800492c <HAL_RCC_OscConfig+0x478>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fd fed0 	bl	8002694 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fd fecc 	bl	8002694 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e045      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x444>
 8004916:	e03d      	b.n	8004994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d107      	bne.n	8004930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e038      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
 8004924:	40023800 	.word	0x40023800
 8004928:	40007000 	.word	0x40007000
 800492c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004930:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <HAL_RCC_OscConfig+0x4ec>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d028      	beq.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d121      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d11a      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004960:	4013      	ands	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004968:	4293      	cmp	r3, r2
 800496a:	d111      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	3b01      	subs	r3, #1
 800497a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800

080049a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0cc      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049b8:	4b68      	ldr	r3, [pc, #416]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d90c      	bls.n	80049e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b65      	ldr	r3, [pc, #404]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b63      	ldr	r3, [pc, #396]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0b8      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f8:	4b59      	ldr	r3, [pc, #356]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a58      	ldr	r2, [pc, #352]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a10:	4b53      	ldr	r3, [pc, #332]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	4a52      	ldr	r2, [pc, #328]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1c:	4b50      	ldr	r3, [pc, #320]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	494d      	ldr	r1, [pc, #308]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d044      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	4b47      	ldr	r3, [pc, #284]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d119      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e07f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d003      	beq.n	8004a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a62:	4b3f      	ldr	r3, [pc, #252]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e06f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a72:	4b3b      	ldr	r3, [pc, #236]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e067      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a82:	4b37      	ldr	r3, [pc, #220]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 0203 	bic.w	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4934      	ldr	r1, [pc, #208]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a94:	f7fd fdfe 	bl	8002694 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9c:	f7fd fdfa 	bl	8002694 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e04f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 020c 	and.w	r2, r3, #12
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d1eb      	bne.n	8004a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d20c      	bcs.n	8004aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b22      	ldr	r3, [pc, #136]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b20      	ldr	r3, [pc, #128]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e032      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af8:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4916      	ldr	r1, [pc, #88]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	490e      	ldr	r1, [pc, #56]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b2a:	f000 f821 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	4b0b      	ldr	r3, [pc, #44]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	490a      	ldr	r1, [pc, #40]	@ (8004b64 <HAL_RCC_ClockConfig+0x1c0>)
 8004b3c:	5ccb      	ldrb	r3, [r1, r3]
 8004b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b42:	4a09      	ldr	r2, [pc, #36]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b46:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fd fd5e 	bl	800260c <HAL_InitTick>

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023c00 	.word	0x40023c00
 8004b60:	40023800 	.word	0x40023800
 8004b64:	080082b8 	.word	0x080082b8
 8004b68:	20000004 	.word	0x20000004
 8004b6c:	20000008 	.word	0x20000008

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b090      	sub	sp, #64	@ 0x40
 8004b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b80:	2300      	movs	r3, #0
 8004b82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b88:	4b59      	ldr	r3, [pc, #356]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d00d      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	f200 80a1 	bhi.w	8004cdc <HAL_RCC_GetSysClockFreq+0x16c>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ba2:	e09b      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4b53      	ldr	r3, [pc, #332]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004ba8:	e09b      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004baa:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bae:	e098      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bba:	4b4d      	ldr	r3, [pc, #308]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d028      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	099b      	lsrs	r3, r3, #6
 8004bcc:	2200      	movs	r2, #0
 8004bce:	623b      	str	r3, [r7, #32]
 8004bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4b47      	ldr	r3, [pc, #284]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bdc:	fb03 f201 	mul.w	r2, r3, r1
 8004be0:	2300      	movs	r3, #0
 8004be2:	fb00 f303 	mul.w	r3, r0, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	4a43      	ldr	r2, [pc, #268]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bea:	fba0 1202 	umull	r1, r2, r0, r2
 8004bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bf0:	460a      	mov	r2, r1
 8004bf2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf6:	4413      	add	r3, r2
 8004bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	61fa      	str	r2, [r7, #28]
 8004c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c0a:	f7fb ff99 	bl	8000b40 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4613      	mov	r3, r2
 8004c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c16:	e053      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c18:	4b35      	ldr	r3, [pc, #212]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	099b      	lsrs	r3, r3, #6
 8004c1e:	2200      	movs	r2, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	617a      	str	r2, [r7, #20]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c2a:	f04f 0b00 	mov.w	fp, #0
 8004c2e:	4652      	mov	r2, sl
 8004c30:	465b      	mov	r3, fp
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	0159      	lsls	r1, r3, #5
 8004c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c40:	0150      	lsls	r0, r2, #5
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	ebb2 080a 	subs.w	r8, r2, sl
 8004c4a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c62:	ebb2 0408 	subs.w	r4, r2, r8
 8004c66:	eb63 0509 	sbc.w	r5, r3, r9
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	00eb      	lsls	r3, r5, #3
 8004c74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c78:	00e2      	lsls	r2, r4, #3
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	461d      	mov	r5, r3
 8004c7e:	eb14 030a 	adds.w	r3, r4, sl
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	eb45 030b 	adc.w	r3, r5, fp
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c96:	4629      	mov	r1, r5
 8004c98:	028b      	lsls	r3, r1, #10
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	028a      	lsls	r2, r1, #10
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004caa:	2200      	movs	r2, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	60fa      	str	r2, [r7, #12]
 8004cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb4:	f7fb ff44 	bl	8000b40 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3740      	adds	r7, #64	@ 0x40
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cee:	bf00      	nop
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	00f42400 	.word	0x00f42400
 8004cf8:	017d7840 	.word	0x017d7840

08004cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d00:	4b03      	ldr	r3, [pc, #12]	@ (8004d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d02:	681b      	ldr	r3, [r3, #0]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000004 	.word	0x20000004

08004d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d18:	f7ff fff0 	bl	8004cfc <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0a9b      	lsrs	r3, r3, #10
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4903      	ldr	r1, [pc, #12]	@ (8004d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	080082c8 	.word	0x080082c8

08004d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d40:	f7ff ffdc 	bl	8004cfc <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b05      	ldr	r3, [pc, #20]	@ (8004d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0b5b      	lsrs	r3, r3, #13
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4903      	ldr	r1, [pc, #12]	@ (8004d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	080082c8 	.word	0x080082c8

08004d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e042      	b.n	8004dfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fd fadc 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	@ 0x24
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f001 f973 	bl	8006094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	@ 0x28
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d175      	bne.n	8004f10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_UART_Transmit+0x2c>
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e06e      	b.n	8004f12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2221      	movs	r2, #33	@ 0x21
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e42:	f7fd fc27 	bl	8002694 <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5c:	d108      	bne.n	8004e70 <HAL_UART_Transmit+0x6c>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d104      	bne.n	8004e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	e003      	b.n	8004e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e78:	e02e      	b.n	8004ed8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	2180      	movs	r1, #128	@ 0x80
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fdeb 	bl	8005a60 <UART_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e03a      	b.n	8004f12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	e007      	b.n	8004eca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1cb      	bne.n	8004e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2140      	movs	r1, #64	@ 0x40
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fdb7 	bl	8005a60 <UART_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e006      	b.n	8004f12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	4613      	mov	r3, r2
 8004f26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d112      	bne.n	8004f5a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_UART_Receive_DMA+0x26>
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e00b      	b.n	8004f5c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fddf 	bl	8005b14 <UART_Start_Receive_DMA>
 8004f56:	4603      	mov	r3, r0
 8004f58:	e000      	b.n	8004f5c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b09a      	sub	sp, #104	@ 0x68
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f82:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f8c:	657a      	str	r2, [r7, #84]	@ 0x54
 8004f8e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3314      	adds	r3, #20
 8004fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004fc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d119      	bne.n	8005010 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f023 0310 	bic.w	r3, r3, #16
 8004ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004ffc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501a:	2b40      	cmp	r3, #64	@ 0x40
 800501c:	d136      	bne.n	800508c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3314      	adds	r3, #20
 8005024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	60bb      	str	r3, [r7, #8]
   return(result);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005034:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3314      	adds	r3, #20
 800503c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800503e:	61ba      	str	r2, [r7, #24]
 8005040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6979      	ldr	r1, [r7, #20]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	613b      	str	r3, [r7, #16]
   return(result);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e5      	bne.n	800501e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d018      	beq.n	800508c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505e:	2200      	movs	r2, #0
 8005060:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd fd5c 	bl	8002b24 <HAL_DMA_Abort>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00c      	beq.n	800508c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd ff70 	bl	8002f5c <HAL_DMA_GetError>
 800507c:	4603      	mov	r3, r0
 800507e:	2b20      	cmp	r3, #32
 8005080:	d104      	bne.n	800508c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2210      	movs	r2, #16
 8005086:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e00a      	b.n	80050a2 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3768      	adds	r7, #104	@ 0x68
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b0a2      	sub	sp, #136	@ 0x88
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80050b4:	2301      	movs	r3, #1
 80050b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050cc:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80050d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e3      	bne.n	80050ba <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3314      	adds	r3, #20
 80050f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3314      	adds	r3, #20
 8005110:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005112:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005114:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005118:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e5      	bne.n	80050f2 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	2b01      	cmp	r3, #1
 800512c:	d119      	bne.n	8005162 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800513e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005140:	f023 0310 	bic.w	r3, r3, #16
 8005144:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800514e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005150:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005154:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800515c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e5      	bne.n	800512e <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00f      	beq.n	800518a <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005174:	2b80      	cmp	r3, #128	@ 0x80
 8005176:	d104      	bne.n	8005182 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	4a53      	ldr	r2, [pc, #332]	@ (80052cc <HAL_UART_Abort_IT+0x220>)
 800517e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005180:	e003      	b.n	800518a <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005186:	2200      	movs	r2, #0
 8005188:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00f      	beq.n	80051b2 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519c:	2b40      	cmp	r3, #64	@ 0x40
 800519e:	d104      	bne.n	80051aa <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a4:	4a4a      	ldr	r2, [pc, #296]	@ (80052d0 <HAL_UART_Abort_IT+0x224>)
 80051a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80051a8:	e003      	b.n	80051b2 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ae:	2200      	movs	r2, #0
 80051b0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051bc:	2b80      	cmp	r3, #128	@ 0x80
 80051be:	d12d      	bne.n	800521c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3314      	adds	r3, #20
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	623b      	str	r3, [r7, #32]
   return(result);
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3314      	adds	r3, #20
 80051de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80051e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00f      	beq.n	800521c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	4618      	mov	r0, r3
 8005202:	f7fd fcff 	bl	8002c04 <HAL_DMA_Abort_IT>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005210:	2200      	movs	r2, #0
 8005212:	651a      	str	r2, [r3, #80]	@ 0x50
 8005214:	e002      	b.n	800521c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8005216:	2300      	movs	r3, #0
 8005218:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005226:	2b40      	cmp	r3, #64	@ 0x40
 8005228:	d130      	bne.n	800528c <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3314      	adds	r3, #20
 8005230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	60fb      	str	r3, [r7, #12]
   return(result);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005240:	673b      	str	r3, [r7, #112]	@ 0x70
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800524a:	61fa      	str	r2, [r7, #28]
 800524c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	69b9      	ldr	r1, [r7, #24]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	617b      	str	r3, [r7, #20]
   return(result);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e5      	bne.n	800522a <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d012      	beq.n	800528c <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526a:	4618      	mov	r0, r3
 800526c:	f7fd fcca 	bl	8002c04 <HAL_DMA_Abort_IT>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527a:	2200      	movs	r2, #0
 800527c:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 800527e:	2301      	movs	r3, #1
 8005280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005284:	e002      	b.n	800528c <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8005286:	2300      	movs	r3, #0
 8005288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800528c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005290:	2b01      	cmp	r3, #1
 8005292:	d116      	bne.n	80052c2 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 faaf 	bl	8005820 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3788      	adds	r7, #136	@ 0x88
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	08005d87 	.word	0x08005d87
 80052d0:	08005de7 	.word	0x08005de7

080052d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b0ba      	sub	sp, #232	@ 0xe8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005300:	2300      	movs	r3, #0
 8005302:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10f      	bne.n	800533a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_UART_IRQHandler+0x66>
 8005326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fdef 	bl	8005f16 <UART_Receive_IT>
      return;
 8005338:	e25b      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800533a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80de 	beq.w	8005500 <HAL_UART_IRQHandler+0x22c>
 8005344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d106      	bne.n	800535e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005354:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80d1 	beq.w	8005500 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00b      	beq.n	8005382 <HAL_UART_IRQHandler+0xae>
 800536a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800536e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537a:	f043 0201 	orr.w	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_UART_IRQHandler+0xd2>
 800538e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	f043 0202 	orr.w	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <HAL_UART_IRQHandler+0xf6>
 80053b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c2:	f043 0204 	orr.w	r2, r3, #4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d011      	beq.n	80053fa <HAL_UART_IRQHandler+0x126>
 80053d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d105      	bne.n	80053ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f2:	f043 0208 	orr.w	r2, r3, #8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 81f2 	beq.w	80057e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_UART_IRQHandler+0x14e>
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fd7a 	bl	8005f16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542c:	2b40      	cmp	r3, #64	@ 0x40
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_UART_IRQHandler+0x17a>
 8005446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d04f      	beq.n	80054ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fc22 	bl	8005c98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545e:	2b40      	cmp	r3, #64	@ 0x40
 8005460:	d141      	bne.n	80054e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3314      	adds	r3, #20
 8005468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800547c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3314      	adds	r3, #20
 800548a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800548e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800549a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80054a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1d9      	bne.n	8005462 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d013      	beq.n	80054de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ba:	4a7e      	ldr	r2, [pc, #504]	@ (80056b4 <HAL_UART_IRQHandler+0x3e0>)
 80054bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fd fb9e 	bl	8002c04 <HAL_DMA_Abort_IT>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d016      	beq.n	80054fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054d8:	4610      	mov	r0, r2
 80054da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	e00e      	b.n	80054fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fb fde4 	bl	80010ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	e00a      	b.n	80054fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fb fde0 	bl	80010ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	e006      	b.n	80054fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fb fddc 	bl	80010ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054fa:	e175      	b.n	80057e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	bf00      	nop
    return;
 80054fe:	e173      	b.n	80057e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005504:	2b01      	cmp	r3, #1
 8005506:	f040 814f 	bne.w	80057a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 8148 	beq.w	80057a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8141 	beq.w	80057a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005546:	2b40      	cmp	r3, #64	@ 0x40
 8005548:	f040 80b6 	bne.w	80056b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8145 	beq.w	80057ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800556a:	429a      	cmp	r2, r3
 800556c:	f080 813e 	bcs.w	80057ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005576:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005582:	f000 8088 	beq.w	8005696 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800559c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80055b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1d9      	bne.n	8005586 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e1      	bne.n	80055d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3314      	adds	r3, #20
 8005614:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800561e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e3      	bne.n	800560e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005666:	f023 0310 	bic.w	r3, r3, #16
 800566a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005678:	65ba      	str	r2, [r7, #88]	@ 0x58
 800567a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800567e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e3      	bne.n	8005654 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005690:	4618      	mov	r0, r3
 8005692:	f7fd fa47 	bl	8002b24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8c1 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056b2:	e09b      	b.n	80057ec <HAL_UART_IRQHandler+0x518>
 80056b4:	08005d5f 	.word	0x08005d5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 808e 	beq.w	80057f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80056d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8089 	beq.w	80057f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005702:	647a      	str	r2, [r7, #68]	@ 0x44
 8005704:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005708:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e3      	bne.n	80056de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3314      	adds	r3, #20
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	623b      	str	r3, [r7, #32]
   return(result);
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3314      	adds	r3, #20
 8005736:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800573a:	633a      	str	r2, [r7, #48]	@ 0x30
 800573c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e3      	bne.n	8005716 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	60fb      	str	r3, [r7, #12]
   return(result);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0310 	bic.w	r3, r3, #16
 8005772:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005780:	61fa      	str	r2, [r7, #28]
 8005782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	69b9      	ldr	r1, [r7, #24]
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	617b      	str	r3, [r7, #20]
   return(result);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e3      	bne.n	800575c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800579a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f847 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057a6:	e023      	b.n	80057f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <HAL_UART_IRQHandler+0x4f4>
 80057b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fb40 	bl	8005e46 <UART_Transmit_IT>
    return;
 80057c6:	e014      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00e      	beq.n	80057f2 <HAL_UART_IRQHandler+0x51e>
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fb80 	bl	8005ee6 <UART_EndTransmit_IT>
    return;
 80057e6:	e004      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80057e8:	bf00      	nop
 80057ea:	e002      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80057f0:	bf00      	nop
  }
}
 80057f2:	37e8      	adds	r7, #232	@ 0xe8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b09c      	sub	sp, #112	@ 0x70
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587c:	2b00      	cmp	r3, #0
 800587e:	d172      	bne.n	8005966 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005882:	2200      	movs	r2, #0
 8005884:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800589c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800589e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80058a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058a8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e5      	bne.n	8005886 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3314      	adds	r3, #20
 80058c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80058d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80058da:	647a      	str	r2, [r7, #68]	@ 0x44
 80058dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e5      	bne.n	80058ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3314      	adds	r3, #20
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	623b      	str	r3, [r7, #32]
   return(result);
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005904:	663b      	str	r3, [r7, #96]	@ 0x60
 8005906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3314      	adds	r3, #20
 800590c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800590e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005924:	2220      	movs	r2, #32
 8005926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	2b01      	cmp	r3, #1
 8005930:	d119      	bne.n	8005966 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	60fb      	str	r3, [r7, #12]
   return(result);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f023 0310 	bic.w	r3, r3, #16
 8005948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800594a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005952:	61fa      	str	r2, [r7, #28]
 8005954:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	69b9      	ldr	r1, [r7, #24]
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	617b      	str	r3, [r7, #20]
   return(result);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005968:	2200      	movs	r2, #0
 800596a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800596e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005970:	2b01      	cmp	r3, #1
 8005972:	d106      	bne.n	8005982 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005976:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005978:	4619      	mov	r1, r3
 800597a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800597c:	f7ff ff5a 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005980:	e002      	b.n	8005988 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005982:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005984:	f7fb fb66 	bl	8001054 <HAL_UART_RxCpltCallback>
}
 8005988:	bf00      	nop
 800598a:	3770      	adds	r7, #112	@ 0x70
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d108      	bne.n	80059be <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4619      	mov	r1, r3
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff ff3c 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059bc:	e002      	b.n	80059c4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f7ff ff24 	bl	800580c <HAL_UART_RxHalfCpltCallback>
}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e8:	2b80      	cmp	r3, #128	@ 0x80
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b21      	cmp	r3, #33	@ 0x21
 80059fe:	d108      	bne.n	8005a12 <UART_DMAError+0x46>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005a0c:	68b8      	ldr	r0, [r7, #8]
 8005a0e:	f000 f91b 	bl	8005c48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1c:	2b40      	cmp	r3, #64	@ 0x40
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b22      	cmp	r3, #34	@ 0x22
 8005a32:	d108      	bne.n	8005a46 <UART_DMAError+0x7a>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005a40:	68b8      	ldr	r0, [r7, #8]
 8005a42:	f000 f929 	bl	8005c98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4a:	f043 0210 	orr.w	r2, r3, #16
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a52:	68b8      	ldr	r0, [r7, #8]
 8005a54:	f7fb fb2a 	bl	80010ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a70:	e03b      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d037      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7a:	f7fc fe0b 	bl	8002694 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d302      	bcc.n	8005a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e03a      	b.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d023      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0x8a>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b80      	cmp	r3, #128	@ 0x80
 8005aa6:	d020      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0x8a>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d01d      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d116      	bne.n	8005aea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 f8e0 	bl	8005c98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2208      	movs	r2, #8
 8005adc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e00f      	b.n	8005b0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4013      	ands	r3, r2
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	bf0c      	ite	eq
 8005afa:	2301      	moveq	r3, #1
 8005afc:	2300      	movne	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d0b4      	beq.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b098      	sub	sp, #96	@ 0x60
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2222      	movs	r2, #34	@ 0x22
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b40:	4a3e      	ldr	r2, [pc, #248]	@ (8005c3c <UART_Start_Receive_DMA+0x128>)
 8005b42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b48:	4a3d      	ldr	r2, [pc, #244]	@ (8005c40 <UART_Start_Receive_DMA+0x12c>)
 8005b4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b50:	4a3c      	ldr	r2, [pc, #240]	@ (8005c44 <UART_Start_Receive_DMA+0x130>)
 8005b52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b58:	2200      	movs	r2, #0
 8005b5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b5c:	f107 0308 	add.w	r3, r7, #8
 8005b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	f7fc ff7e 	bl	8002a74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b78:	2300      	movs	r3, #0
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d019      	beq.n	8005bca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bb6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005bbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bea:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005bec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005bf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3314      	adds	r3, #20
 8005c04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c14:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3314      	adds	r3, #20
 8005c1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6a39      	ldr	r1, [r7, #32]
 8005c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e5      	bne.n	8005bfe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3760      	adds	r7, #96	@ 0x60
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	08005865 	.word	0x08005865
 8005c40:	08005991 	.word	0x08005991
 8005c44:	080059cd 	.word	0x080059cd

08005c48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b089      	sub	sp, #36	@ 0x24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	61ba      	str	r2, [r7, #24]
 8005c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6979      	ldr	r1, [r7, #20]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e5      	bne.n	8005c50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005c8c:	bf00      	nop
 8005c8e:	3724      	adds	r7, #36	@ 0x24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b095      	sub	sp, #84	@ 0x54
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e5      	bne.n	8005ca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3314      	adds	r3, #20
 8005cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	e853 3f00 	ldrex	r3, [r3]
 8005ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e5      	bne.n	8005cd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d119      	bne.n	8005d44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f023 0310 	bic.w	r3, r3, #16
 8005d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d30:	61ba      	str	r2, [r7, #24]
 8005d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	6979      	ldr	r1, [r7, #20]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e5      	bne.n	8005d10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d52:	bf00      	nop
 8005d54:	3754      	adds	r7, #84	@ 0x54
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f7fb f997 	bl	80010ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d7e:	bf00      	nop
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d92:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d98:	2200      	movs	r2, #0
 8005d9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d004      	beq.n	8005dae <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d117      	bne.n	8005dde <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff fd22 	bl	8005820 <HAL_UART_AbortCpltCallback>
 8005ddc:	e000      	b.n	8005de0 <UART_DMATxAbortCallback+0x5a>
      return;
 8005dde:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df8:	2200      	movs	r2, #0
 8005dfa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d117      	bne.n	8005e3e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff fcf2 	bl	8005820 <HAL_UART_AbortCpltCallback>
 8005e3c:	e000      	b.n	8005e40 <UART_DMARxAbortCallback+0x5a>
      return;
 8005e3e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b085      	sub	sp, #20
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b21      	cmp	r3, #33	@ 0x21
 8005e58:	d13e      	bne.n	8005ed8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e62:	d114      	bne.n	8005e8e <UART_Transmit_IT+0x48>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d110      	bne.n	8005e8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	621a      	str	r2, [r3, #32]
 8005e8c:	e008      	b.n	8005ea0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	1c59      	adds	r1, r3, #1
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6211      	str	r1, [r2, #32]
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4619      	mov	r1, r3
 8005eae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10f      	bne.n	8005ed4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ec2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ed2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e000      	b.n	8005eda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ed8:	2302      	movs	r3, #2
  }
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005efc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff fc76 	bl	80057f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b08c      	sub	sp, #48	@ 0x30
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b22      	cmp	r3, #34	@ 0x22
 8005f28:	f040 80ae 	bne.w	8006088 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f34:	d117      	bne.n	8005f66 <UART_Receive_IT+0x50>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d113      	bne.n	8005f66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f46:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	1c9a      	adds	r2, r3, #2
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f64:	e026      	b.n	8005fb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f78:	d007      	beq.n	8005f8a <UART_Receive_IT+0x74>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <UART_Receive_IT+0x82>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	e008      	b.n	8005faa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d15d      	bne.n	8006084 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0220 	bic.w	r2, r2, #32
 8005fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600a:	2b01      	cmp	r3, #1
 800600c:	d135      	bne.n	800607a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	613b      	str	r3, [r7, #16]
   return(result);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006034:	623a      	str	r2, [r7, #32]
 8006036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	69f9      	ldr	r1, [r7, #28]
 800603a:	6a3a      	ldr	r2, [r7, #32]
 800603c:	e841 2300 	strex	r3, r2, [r1]
 8006040:	61bb      	str	r3, [r7, #24]
   return(result);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1e5      	bne.n	8006014 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	2b10      	cmp	r3, #16
 8006054:	d10a      	bne.n	800606c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fbde 	bl	8005834 <HAL_UARTEx_RxEventCallback>
 8006078:	e002      	b.n	8006080 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fa ffea 	bl	8001054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	e002      	b.n	800608a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	3730      	adds	r7, #48	@ 0x30
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006098:	b0c0      	sub	sp, #256	@ 0x100
 800609a:	af00      	add	r7, sp, #0
 800609c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b0:	68d9      	ldr	r1, [r3, #12]
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	ea40 0301 	orr.w	r3, r0, r1
 80060bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060ec:	f021 010c 	bic.w	r1, r1, #12
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060fa:	430b      	orrs	r3, r1
 80060fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610e:	6999      	ldr	r1, [r3, #24]
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	ea40 0301 	orr.w	r3, r0, r1
 800611a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b8f      	ldr	r3, [pc, #572]	@ (8006360 <UART_SetConfig+0x2cc>)
 8006124:	429a      	cmp	r2, r3
 8006126:	d005      	beq.n	8006134 <UART_SetConfig+0xa0>
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b8d      	ldr	r3, [pc, #564]	@ (8006364 <UART_SetConfig+0x2d0>)
 8006130:	429a      	cmp	r2, r3
 8006132:	d104      	bne.n	800613e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006134:	f7fe fe02 	bl	8004d3c <HAL_RCC_GetPCLK2Freq>
 8006138:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800613c:	e003      	b.n	8006146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800613e:	f7fe fde9 	bl	8004d14 <HAL_RCC_GetPCLK1Freq>
 8006142:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006150:	f040 810c 	bne.w	800636c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006158:	2200      	movs	r2, #0
 800615a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800615e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006166:	4622      	mov	r2, r4
 8006168:	462b      	mov	r3, r5
 800616a:	1891      	adds	r1, r2, r2
 800616c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800616e:	415b      	adcs	r3, r3
 8006170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006176:	4621      	mov	r1, r4
 8006178:	eb12 0801 	adds.w	r8, r2, r1
 800617c:	4629      	mov	r1, r5
 800617e:	eb43 0901 	adc.w	r9, r3, r1
 8006182:	f04f 0200 	mov.w	r2, #0
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800618e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006196:	4690      	mov	r8, r2
 8006198:	4699      	mov	r9, r3
 800619a:	4623      	mov	r3, r4
 800619c:	eb18 0303 	adds.w	r3, r8, r3
 80061a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061a4:	462b      	mov	r3, r5
 80061a6:	eb49 0303 	adc.w	r3, r9, r3
 80061aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061c2:	460b      	mov	r3, r1
 80061c4:	18db      	adds	r3, r3, r3
 80061c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80061c8:	4613      	mov	r3, r2
 80061ca:	eb42 0303 	adc.w	r3, r2, r3
 80061ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80061d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061d8:	f7fa fcb2 	bl	8000b40 <__aeabi_uldivmod>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4b61      	ldr	r3, [pc, #388]	@ (8006368 <UART_SetConfig+0x2d4>)
 80061e2:	fba3 2302 	umull	r2, r3, r3, r2
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	011c      	lsls	r4, r3, #4
 80061ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061fc:	4642      	mov	r2, r8
 80061fe:	464b      	mov	r3, r9
 8006200:	1891      	adds	r1, r2, r2
 8006202:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006204:	415b      	adcs	r3, r3
 8006206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800620c:	4641      	mov	r1, r8
 800620e:	eb12 0a01 	adds.w	sl, r2, r1
 8006212:	4649      	mov	r1, r9
 8006214:	eb43 0b01 	adc.w	fp, r3, r1
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800622c:	4692      	mov	sl, r2
 800622e:	469b      	mov	fp, r3
 8006230:	4643      	mov	r3, r8
 8006232:	eb1a 0303 	adds.w	r3, sl, r3
 8006236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800623a:	464b      	mov	r3, r9
 800623c:	eb4b 0303 	adc.w	r3, fp, r3
 8006240:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006250:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006258:	460b      	mov	r3, r1
 800625a:	18db      	adds	r3, r3, r3
 800625c:	643b      	str	r3, [r7, #64]	@ 0x40
 800625e:	4613      	mov	r3, r2
 8006260:	eb42 0303 	adc.w	r3, r2, r3
 8006264:	647b      	str	r3, [r7, #68]	@ 0x44
 8006266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800626a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800626e:	f7fa fc67 	bl	8000b40 <__aeabi_uldivmod>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4611      	mov	r1, r2
 8006278:	4b3b      	ldr	r3, [pc, #236]	@ (8006368 <UART_SetConfig+0x2d4>)
 800627a:	fba3 2301 	umull	r2, r3, r3, r1
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	2264      	movs	r2, #100	@ 0x64
 8006282:	fb02 f303 	mul.w	r3, r2, r3
 8006286:	1acb      	subs	r3, r1, r3
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800628e:	4b36      	ldr	r3, [pc, #216]	@ (8006368 <UART_SetConfig+0x2d4>)
 8006290:	fba3 2302 	umull	r2, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800629c:	441c      	add	r4, r3
 800629e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	1891      	adds	r1, r2, r2
 80062b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062b8:	415b      	adcs	r3, r3
 80062ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062c0:	4641      	mov	r1, r8
 80062c2:	1851      	adds	r1, r2, r1
 80062c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80062c6:	4649      	mov	r1, r9
 80062c8:	414b      	adcs	r3, r1
 80062ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062d8:	4659      	mov	r1, fp
 80062da:	00cb      	lsls	r3, r1, #3
 80062dc:	4651      	mov	r1, sl
 80062de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062e2:	4651      	mov	r1, sl
 80062e4:	00ca      	lsls	r2, r1, #3
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	4642      	mov	r2, r8
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062f4:	464b      	mov	r3, r9
 80062f6:	460a      	mov	r2, r1
 80062f8:	eb42 0303 	adc.w	r3, r2, r3
 80062fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800630c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006314:	460b      	mov	r3, r1
 8006316:	18db      	adds	r3, r3, r3
 8006318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800631a:	4613      	mov	r3, r2
 800631c:	eb42 0303 	adc.w	r3, r2, r3
 8006320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800632a:	f7fa fc09 	bl	8000b40 <__aeabi_uldivmod>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4b0d      	ldr	r3, [pc, #52]	@ (8006368 <UART_SetConfig+0x2d4>)
 8006334:	fba3 1302 	umull	r1, r3, r3, r2
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	2164      	movs	r1, #100	@ 0x64
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	3332      	adds	r3, #50	@ 0x32
 8006346:	4a08      	ldr	r2, [pc, #32]	@ (8006368 <UART_SetConfig+0x2d4>)
 8006348:	fba2 2303 	umull	r2, r3, r2, r3
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	f003 0207 	and.w	r2, r3, #7
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4422      	add	r2, r4
 800635a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800635c:	e106      	b.n	800656c <UART_SetConfig+0x4d8>
 800635e:	bf00      	nop
 8006360:	40011000 	.word	0x40011000
 8006364:	40011400 	.word	0x40011400
 8006368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800636c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006370:	2200      	movs	r2, #0
 8006372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006376:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800637a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800637e:	4642      	mov	r2, r8
 8006380:	464b      	mov	r3, r9
 8006382:	1891      	adds	r1, r2, r2
 8006384:	6239      	str	r1, [r7, #32]
 8006386:	415b      	adcs	r3, r3
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
 800638a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800638e:	4641      	mov	r1, r8
 8006390:	1854      	adds	r4, r2, r1
 8006392:	4649      	mov	r1, r9
 8006394:	eb43 0501 	adc.w	r5, r3, r1
 8006398:	f04f 0200 	mov.w	r2, #0
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	00eb      	lsls	r3, r5, #3
 80063a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063a6:	00e2      	lsls	r2, r4, #3
 80063a8:	4614      	mov	r4, r2
 80063aa:	461d      	mov	r5, r3
 80063ac:	4643      	mov	r3, r8
 80063ae:	18e3      	adds	r3, r4, r3
 80063b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063b4:	464b      	mov	r3, r9
 80063b6:	eb45 0303 	adc.w	r3, r5, r3
 80063ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063da:	4629      	mov	r1, r5
 80063dc:	008b      	lsls	r3, r1, #2
 80063de:	4621      	mov	r1, r4
 80063e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063e4:	4621      	mov	r1, r4
 80063e6:	008a      	lsls	r2, r1, #2
 80063e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063ec:	f7fa fba8 	bl	8000b40 <__aeabi_uldivmod>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4b60      	ldr	r3, [pc, #384]	@ (8006578 <UART_SetConfig+0x4e4>)
 80063f6:	fba3 2302 	umull	r2, r3, r3, r2
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	011c      	lsls	r4, r3, #4
 80063fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800640c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006410:	4642      	mov	r2, r8
 8006412:	464b      	mov	r3, r9
 8006414:	1891      	adds	r1, r2, r2
 8006416:	61b9      	str	r1, [r7, #24]
 8006418:	415b      	adcs	r3, r3
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006420:	4641      	mov	r1, r8
 8006422:	1851      	adds	r1, r2, r1
 8006424:	6139      	str	r1, [r7, #16]
 8006426:	4649      	mov	r1, r9
 8006428:	414b      	adcs	r3, r1
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006438:	4659      	mov	r1, fp
 800643a:	00cb      	lsls	r3, r1, #3
 800643c:	4651      	mov	r1, sl
 800643e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006442:	4651      	mov	r1, sl
 8006444:	00ca      	lsls	r2, r1, #3
 8006446:	4610      	mov	r0, r2
 8006448:	4619      	mov	r1, r3
 800644a:	4603      	mov	r3, r0
 800644c:	4642      	mov	r2, r8
 800644e:	189b      	adds	r3, r3, r2
 8006450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006454:	464b      	mov	r3, r9
 8006456:	460a      	mov	r2, r1
 8006458:	eb42 0303 	adc.w	r3, r2, r3
 800645c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800646a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006478:	4649      	mov	r1, r9
 800647a:	008b      	lsls	r3, r1, #2
 800647c:	4641      	mov	r1, r8
 800647e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006482:	4641      	mov	r1, r8
 8006484:	008a      	lsls	r2, r1, #2
 8006486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800648a:	f7fa fb59 	bl	8000b40 <__aeabi_uldivmod>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4611      	mov	r1, r2
 8006494:	4b38      	ldr	r3, [pc, #224]	@ (8006578 <UART_SetConfig+0x4e4>)
 8006496:	fba3 2301 	umull	r2, r3, r3, r1
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	2264      	movs	r2, #100	@ 0x64
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	1acb      	subs	r3, r1, r3
 80064a4:	011b      	lsls	r3, r3, #4
 80064a6:	3332      	adds	r3, #50	@ 0x32
 80064a8:	4a33      	ldr	r2, [pc, #204]	@ (8006578 <UART_SetConfig+0x4e4>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064b4:	441c      	add	r4, r3
 80064b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ba:	2200      	movs	r2, #0
 80064bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80064be:	677a      	str	r2, [r7, #116]	@ 0x74
 80064c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064c4:	4642      	mov	r2, r8
 80064c6:	464b      	mov	r3, r9
 80064c8:	1891      	adds	r1, r2, r2
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	415b      	adcs	r3, r3
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064d4:	4641      	mov	r1, r8
 80064d6:	1851      	adds	r1, r2, r1
 80064d8:	6039      	str	r1, [r7, #0]
 80064da:	4649      	mov	r1, r9
 80064dc:	414b      	adcs	r3, r1
 80064de:	607b      	str	r3, [r7, #4]
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064ec:	4659      	mov	r1, fp
 80064ee:	00cb      	lsls	r3, r1, #3
 80064f0:	4651      	mov	r1, sl
 80064f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064f6:	4651      	mov	r1, sl
 80064f8:	00ca      	lsls	r2, r1, #3
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	4603      	mov	r3, r0
 8006500:	4642      	mov	r2, r8
 8006502:	189b      	adds	r3, r3, r2
 8006504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006506:	464b      	mov	r3, r9
 8006508:	460a      	mov	r2, r1
 800650a:	eb42 0303 	adc.w	r3, r2, r3
 800650e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	663b      	str	r3, [r7, #96]	@ 0x60
 800651a:	667a      	str	r2, [r7, #100]	@ 0x64
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006528:	4649      	mov	r1, r9
 800652a:	008b      	lsls	r3, r1, #2
 800652c:	4641      	mov	r1, r8
 800652e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006532:	4641      	mov	r1, r8
 8006534:	008a      	lsls	r2, r1, #2
 8006536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800653a:	f7fa fb01 	bl	8000b40 <__aeabi_uldivmod>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4b0d      	ldr	r3, [pc, #52]	@ (8006578 <UART_SetConfig+0x4e4>)
 8006544:	fba3 1302 	umull	r1, r3, r3, r2
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	2164      	movs	r1, #100	@ 0x64
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	3332      	adds	r3, #50	@ 0x32
 8006556:	4a08      	ldr	r2, [pc, #32]	@ (8006578 <UART_SetConfig+0x4e4>)
 8006558:	fba2 2303 	umull	r2, r3, r2, r3
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	f003 020f 	and.w	r2, r3, #15
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4422      	add	r2, r4
 800656a:	609a      	str	r2, [r3, #8]
}
 800656c:	bf00      	nop
 800656e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006572:	46bd      	mov	sp, r7
 8006574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006578:	51eb851f 	.word	0x51eb851f

0800657c <memset>:
 800657c:	4402      	add	r2, r0
 800657e:	4603      	mov	r3, r0
 8006580:	4293      	cmp	r3, r2
 8006582:	d100      	bne.n	8006586 <memset+0xa>
 8006584:	4770      	bx	lr
 8006586:	f803 1b01 	strb.w	r1, [r3], #1
 800658a:	e7f9      	b.n	8006580 <memset+0x4>

0800658c <__errno>:
 800658c:	4b01      	ldr	r3, [pc, #4]	@ (8006594 <__errno+0x8>)
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20000010 	.word	0x20000010

08006598 <__libc_init_array>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	4d0d      	ldr	r5, [pc, #52]	@ (80065d0 <__libc_init_array+0x38>)
 800659c:	4c0d      	ldr	r4, [pc, #52]	@ (80065d4 <__libc_init_array+0x3c>)
 800659e:	1b64      	subs	r4, r4, r5
 80065a0:	10a4      	asrs	r4, r4, #2
 80065a2:	2600      	movs	r6, #0
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	d109      	bne.n	80065bc <__libc_init_array+0x24>
 80065a8:	4d0b      	ldr	r5, [pc, #44]	@ (80065d8 <__libc_init_array+0x40>)
 80065aa:	4c0c      	ldr	r4, [pc, #48]	@ (80065dc <__libc_init_array+0x44>)
 80065ac:	f001 fe0c 	bl	80081c8 <_init>
 80065b0:	1b64      	subs	r4, r4, r5
 80065b2:	10a4      	asrs	r4, r4, #2
 80065b4:	2600      	movs	r6, #0
 80065b6:	42a6      	cmp	r6, r4
 80065b8:	d105      	bne.n	80065c6 <__libc_init_array+0x2e>
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c0:	4798      	blx	r3
 80065c2:	3601      	adds	r6, #1
 80065c4:	e7ee      	b.n	80065a4 <__libc_init_array+0xc>
 80065c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ca:	4798      	blx	r3
 80065cc:	3601      	adds	r6, #1
 80065ce:	e7f2      	b.n	80065b6 <__libc_init_array+0x1e>
 80065d0:	08008358 	.word	0x08008358
 80065d4:	08008358 	.word	0x08008358
 80065d8:	08008358 	.word	0x08008358
 80065dc:	0800835c 	.word	0x0800835c

080065e0 <acos>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	ed2d 8b02 	vpush	{d8}
 80065e6:	ec55 4b10 	vmov	r4, r5, d0
 80065ea:	f000 fb8d 	bl	8006d08 <__ieee754_acos>
 80065ee:	4622      	mov	r2, r4
 80065f0:	462b      	mov	r3, r5
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	eeb0 8a40 	vmov.f32	s16, s0
 80065fa:	eef0 8a60 	vmov.f32	s17, s1
 80065fe:	f7fa fa39 	bl	8000a74 <__aeabi_dcmpun>
 8006602:	b9a8      	cbnz	r0, 8006630 <acos+0x50>
 8006604:	ec45 4b10 	vmov	d0, r4, r5
 8006608:	f000 fa86 	bl	8006b18 <fabs>
 800660c:	4b0c      	ldr	r3, [pc, #48]	@ (8006640 <acos+0x60>)
 800660e:	ec51 0b10 	vmov	r0, r1, d0
 8006612:	2200      	movs	r2, #0
 8006614:	f7fa fa24 	bl	8000a60 <__aeabi_dcmpgt>
 8006618:	b150      	cbz	r0, 8006630 <acos+0x50>
 800661a:	f7ff ffb7 	bl	800658c <__errno>
 800661e:	ecbd 8b02 	vpop	{d8}
 8006622:	2321      	movs	r3, #33	@ 0x21
 8006624:	6003      	str	r3, [r0, #0]
 8006626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800662a:	4806      	ldr	r0, [pc, #24]	@ (8006644 <acos+0x64>)
 800662c:	f000 ba88 	b.w	8006b40 <nan>
 8006630:	eeb0 0a48 	vmov.f32	s0, s16
 8006634:	eef0 0a68 	vmov.f32	s1, s17
 8006638:	ecbd 8b02 	vpop	{d8}
 800663c:	bd38      	pop	{r3, r4, r5, pc}
 800663e:	bf00      	nop
 8006640:	3ff00000 	.word	0x3ff00000
 8006644:	080082d8 	.word	0x080082d8

08006648 <asin>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	ed2d 8b02 	vpush	{d8}
 800664e:	ec55 4b10 	vmov	r4, r5, d0
 8006652:	f000 fdb5 	bl	80071c0 <__ieee754_asin>
 8006656:	4622      	mov	r2, r4
 8006658:	462b      	mov	r3, r5
 800665a:	4620      	mov	r0, r4
 800665c:	4629      	mov	r1, r5
 800665e:	eeb0 8a40 	vmov.f32	s16, s0
 8006662:	eef0 8a60 	vmov.f32	s17, s1
 8006666:	f7fa fa05 	bl	8000a74 <__aeabi_dcmpun>
 800666a:	b9a8      	cbnz	r0, 8006698 <asin+0x50>
 800666c:	ec45 4b10 	vmov	d0, r4, r5
 8006670:	f000 fa52 	bl	8006b18 <fabs>
 8006674:	4b0c      	ldr	r3, [pc, #48]	@ (80066a8 <asin+0x60>)
 8006676:	ec51 0b10 	vmov	r0, r1, d0
 800667a:	2200      	movs	r2, #0
 800667c:	f7fa f9f0 	bl	8000a60 <__aeabi_dcmpgt>
 8006680:	b150      	cbz	r0, 8006698 <asin+0x50>
 8006682:	f7ff ff83 	bl	800658c <__errno>
 8006686:	ecbd 8b02 	vpop	{d8}
 800668a:	2321      	movs	r3, #33	@ 0x21
 800668c:	6003      	str	r3, [r0, #0]
 800668e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006692:	4806      	ldr	r0, [pc, #24]	@ (80066ac <asin+0x64>)
 8006694:	f000 ba54 	b.w	8006b40 <nan>
 8006698:	eeb0 0a48 	vmov.f32	s0, s16
 800669c:	eef0 0a68 	vmov.f32	s1, s17
 80066a0:	ecbd 8b02 	vpop	{d8}
 80066a4:	bd38      	pop	{r3, r4, r5, pc}
 80066a6:	bf00      	nop
 80066a8:	3ff00000 	.word	0x3ff00000
 80066ac:	080082d8 	.word	0x080082d8

080066b0 <pow>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	ed2d 8b02 	vpush	{d8}
 80066b6:	eeb0 8a40 	vmov.f32	s16, s0
 80066ba:	eef0 8a60 	vmov.f32	s17, s1
 80066be:	ec55 4b11 	vmov	r4, r5, d1
 80066c2:	f000 ff81 	bl	80075c8 <__ieee754_pow>
 80066c6:	4622      	mov	r2, r4
 80066c8:	462b      	mov	r3, r5
 80066ca:	4620      	mov	r0, r4
 80066cc:	4629      	mov	r1, r5
 80066ce:	ec57 6b10 	vmov	r6, r7, d0
 80066d2:	f7fa f9cf 	bl	8000a74 <__aeabi_dcmpun>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d13b      	bne.n	8006752 <pow+0xa2>
 80066da:	ec51 0b18 	vmov	r0, r1, d8
 80066de:	2200      	movs	r2, #0
 80066e0:	2300      	movs	r3, #0
 80066e2:	f7fa f995 	bl	8000a10 <__aeabi_dcmpeq>
 80066e6:	b1b8      	cbz	r0, 8006718 <pow+0x68>
 80066e8:	2200      	movs	r2, #0
 80066ea:	2300      	movs	r3, #0
 80066ec:	4620      	mov	r0, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	f7fa f98e 	bl	8000a10 <__aeabi_dcmpeq>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d146      	bne.n	8006786 <pow+0xd6>
 80066f8:	ec45 4b10 	vmov	d0, r4, r5
 80066fc:	f000 fa14 	bl	8006b28 <finite>
 8006700:	b338      	cbz	r0, 8006752 <pow+0xa2>
 8006702:	2200      	movs	r2, #0
 8006704:	2300      	movs	r3, #0
 8006706:	4620      	mov	r0, r4
 8006708:	4629      	mov	r1, r5
 800670a:	f7fa f98b 	bl	8000a24 <__aeabi_dcmplt>
 800670e:	b300      	cbz	r0, 8006752 <pow+0xa2>
 8006710:	f7ff ff3c 	bl	800658c <__errno>
 8006714:	2322      	movs	r3, #34	@ 0x22
 8006716:	e01b      	b.n	8006750 <pow+0xa0>
 8006718:	ec47 6b10 	vmov	d0, r6, r7
 800671c:	f000 fa04 	bl	8006b28 <finite>
 8006720:	b9e0      	cbnz	r0, 800675c <pow+0xac>
 8006722:	eeb0 0a48 	vmov.f32	s0, s16
 8006726:	eef0 0a68 	vmov.f32	s1, s17
 800672a:	f000 f9fd 	bl	8006b28 <finite>
 800672e:	b1a8      	cbz	r0, 800675c <pow+0xac>
 8006730:	ec45 4b10 	vmov	d0, r4, r5
 8006734:	f000 f9f8 	bl	8006b28 <finite>
 8006738:	b180      	cbz	r0, 800675c <pow+0xac>
 800673a:	4632      	mov	r2, r6
 800673c:	463b      	mov	r3, r7
 800673e:	4630      	mov	r0, r6
 8006740:	4639      	mov	r1, r7
 8006742:	f7fa f997 	bl	8000a74 <__aeabi_dcmpun>
 8006746:	2800      	cmp	r0, #0
 8006748:	d0e2      	beq.n	8006710 <pow+0x60>
 800674a:	f7ff ff1f 	bl	800658c <__errno>
 800674e:	2321      	movs	r3, #33	@ 0x21
 8006750:	6003      	str	r3, [r0, #0]
 8006752:	ecbd 8b02 	vpop	{d8}
 8006756:	ec47 6b10 	vmov	d0, r6, r7
 800675a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800675c:	2200      	movs	r2, #0
 800675e:	2300      	movs	r3, #0
 8006760:	4630      	mov	r0, r6
 8006762:	4639      	mov	r1, r7
 8006764:	f7fa f954 	bl	8000a10 <__aeabi_dcmpeq>
 8006768:	2800      	cmp	r0, #0
 800676a:	d0f2      	beq.n	8006752 <pow+0xa2>
 800676c:	eeb0 0a48 	vmov.f32	s0, s16
 8006770:	eef0 0a68 	vmov.f32	s1, s17
 8006774:	f000 f9d8 	bl	8006b28 <finite>
 8006778:	2800      	cmp	r0, #0
 800677a:	d0ea      	beq.n	8006752 <pow+0xa2>
 800677c:	ec45 4b10 	vmov	d0, r4, r5
 8006780:	f000 f9d2 	bl	8006b28 <finite>
 8006784:	e7c3      	b.n	800670e <pow+0x5e>
 8006786:	4f01      	ldr	r7, [pc, #4]	@ (800678c <pow+0xdc>)
 8006788:	2600      	movs	r6, #0
 800678a:	e7e2      	b.n	8006752 <pow+0xa2>
 800678c:	3ff00000 	.word	0x3ff00000

08006790 <sqrt>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	ed2d 8b02 	vpush	{d8}
 8006796:	ec55 4b10 	vmov	r4, r5, d0
 800679a:	f000 f9d9 	bl	8006b50 <__ieee754_sqrt>
 800679e:	4622      	mov	r2, r4
 80067a0:	462b      	mov	r3, r5
 80067a2:	4620      	mov	r0, r4
 80067a4:	4629      	mov	r1, r5
 80067a6:	eeb0 8a40 	vmov.f32	s16, s0
 80067aa:	eef0 8a60 	vmov.f32	s17, s1
 80067ae:	f7fa f961 	bl	8000a74 <__aeabi_dcmpun>
 80067b2:	b990      	cbnz	r0, 80067da <sqrt+0x4a>
 80067b4:	2200      	movs	r2, #0
 80067b6:	2300      	movs	r3, #0
 80067b8:	4620      	mov	r0, r4
 80067ba:	4629      	mov	r1, r5
 80067bc:	f7fa f932 	bl	8000a24 <__aeabi_dcmplt>
 80067c0:	b158      	cbz	r0, 80067da <sqrt+0x4a>
 80067c2:	f7ff fee3 	bl	800658c <__errno>
 80067c6:	2321      	movs	r3, #33	@ 0x21
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	2300      	movs	r3, #0
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	f7f9 ffdf 	bl	8000794 <__aeabi_ddiv>
 80067d6:	ec41 0b18 	vmov	d8, r0, r1
 80067da:	eeb0 0a48 	vmov.f32	s0, s16
 80067de:	eef0 0a68 	vmov.f32	s1, s17
 80067e2:	ecbd 8b02 	vpop	{d8}
 80067e6:	bd38      	pop	{r3, r4, r5, pc}

080067e8 <atan>:
 80067e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	ec55 4b10 	vmov	r4, r5, d0
 80067f0:	4bbf      	ldr	r3, [pc, #764]	@ (8006af0 <atan+0x308>)
 80067f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80067f6:	429e      	cmp	r6, r3
 80067f8:	46ab      	mov	fp, r5
 80067fa:	d918      	bls.n	800682e <atan+0x46>
 80067fc:	4bbd      	ldr	r3, [pc, #756]	@ (8006af4 <atan+0x30c>)
 80067fe:	429e      	cmp	r6, r3
 8006800:	d801      	bhi.n	8006806 <atan+0x1e>
 8006802:	d109      	bne.n	8006818 <atan+0x30>
 8006804:	b144      	cbz	r4, 8006818 <atan+0x30>
 8006806:	4622      	mov	r2, r4
 8006808:	462b      	mov	r3, r5
 800680a:	4620      	mov	r0, r4
 800680c:	4629      	mov	r1, r5
 800680e:	f7f9 fce1 	bl	80001d4 <__adddf3>
 8006812:	4604      	mov	r4, r0
 8006814:	460d      	mov	r5, r1
 8006816:	e006      	b.n	8006826 <atan+0x3e>
 8006818:	f1bb 0f00 	cmp.w	fp, #0
 800681c:	f340 812b 	ble.w	8006a76 <atan+0x28e>
 8006820:	a597      	add	r5, pc, #604	@ (adr r5, 8006a80 <atan+0x298>)
 8006822:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006826:	ec45 4b10 	vmov	d0, r4, r5
 800682a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682e:	4bb2      	ldr	r3, [pc, #712]	@ (8006af8 <atan+0x310>)
 8006830:	429e      	cmp	r6, r3
 8006832:	d813      	bhi.n	800685c <atan+0x74>
 8006834:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006838:	429e      	cmp	r6, r3
 800683a:	d80c      	bhi.n	8006856 <atan+0x6e>
 800683c:	a392      	add	r3, pc, #584	@ (adr r3, 8006a88 <atan+0x2a0>)
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	4620      	mov	r0, r4
 8006844:	4629      	mov	r1, r5
 8006846:	f7f9 fcc5 	bl	80001d4 <__adddf3>
 800684a:	4bac      	ldr	r3, [pc, #688]	@ (8006afc <atan+0x314>)
 800684c:	2200      	movs	r2, #0
 800684e:	f7fa f907 	bl	8000a60 <__aeabi_dcmpgt>
 8006852:	2800      	cmp	r0, #0
 8006854:	d1e7      	bne.n	8006826 <atan+0x3e>
 8006856:	f04f 3aff 	mov.w	sl, #4294967295
 800685a:	e029      	b.n	80068b0 <atan+0xc8>
 800685c:	f000 f95c 	bl	8006b18 <fabs>
 8006860:	4ba7      	ldr	r3, [pc, #668]	@ (8006b00 <atan+0x318>)
 8006862:	429e      	cmp	r6, r3
 8006864:	ec55 4b10 	vmov	r4, r5, d0
 8006868:	f200 80bc 	bhi.w	80069e4 <atan+0x1fc>
 800686c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006870:	429e      	cmp	r6, r3
 8006872:	f200 809e 	bhi.w	80069b2 <atan+0x1ca>
 8006876:	4622      	mov	r2, r4
 8006878:	462b      	mov	r3, r5
 800687a:	4620      	mov	r0, r4
 800687c:	4629      	mov	r1, r5
 800687e:	f7f9 fca9 	bl	80001d4 <__adddf3>
 8006882:	4b9e      	ldr	r3, [pc, #632]	@ (8006afc <atan+0x314>)
 8006884:	2200      	movs	r2, #0
 8006886:	f7f9 fca3 	bl	80001d0 <__aeabi_dsub>
 800688a:	2200      	movs	r2, #0
 800688c:	4606      	mov	r6, r0
 800688e:	460f      	mov	r7, r1
 8006890:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006894:	4620      	mov	r0, r4
 8006896:	4629      	mov	r1, r5
 8006898:	f7f9 fc9c 	bl	80001d4 <__adddf3>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4630      	mov	r0, r6
 80068a2:	4639      	mov	r1, r7
 80068a4:	f7f9 ff76 	bl	8000794 <__aeabi_ddiv>
 80068a8:	f04f 0a00 	mov.w	sl, #0
 80068ac:	4604      	mov	r4, r0
 80068ae:	460d      	mov	r5, r1
 80068b0:	4622      	mov	r2, r4
 80068b2:	462b      	mov	r3, r5
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7f9 fe42 	bl	8000540 <__aeabi_dmul>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4680      	mov	r8, r0
 80068c2:	4689      	mov	r9, r1
 80068c4:	f7f9 fe3c 	bl	8000540 <__aeabi_dmul>
 80068c8:	a371      	add	r3, pc, #452	@ (adr r3, 8006a90 <atan+0x2a8>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	4606      	mov	r6, r0
 80068d0:	460f      	mov	r7, r1
 80068d2:	f7f9 fe35 	bl	8000540 <__aeabi_dmul>
 80068d6:	a370      	add	r3, pc, #448	@ (adr r3, 8006a98 <atan+0x2b0>)
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f7f9 fc7a 	bl	80001d4 <__adddf3>
 80068e0:	4632      	mov	r2, r6
 80068e2:	463b      	mov	r3, r7
 80068e4:	f7f9 fe2c 	bl	8000540 <__aeabi_dmul>
 80068e8:	a36d      	add	r3, pc, #436	@ (adr r3, 8006aa0 <atan+0x2b8>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 fc71 	bl	80001d4 <__adddf3>
 80068f2:	4632      	mov	r2, r6
 80068f4:	463b      	mov	r3, r7
 80068f6:	f7f9 fe23 	bl	8000540 <__aeabi_dmul>
 80068fa:	a36b      	add	r3, pc, #428	@ (adr r3, 8006aa8 <atan+0x2c0>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f7f9 fc68 	bl	80001d4 <__adddf3>
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	f7f9 fe1a 	bl	8000540 <__aeabi_dmul>
 800690c:	a368      	add	r3, pc, #416	@ (adr r3, 8006ab0 <atan+0x2c8>)
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f7f9 fc5f 	bl	80001d4 <__adddf3>
 8006916:	4632      	mov	r2, r6
 8006918:	463b      	mov	r3, r7
 800691a:	f7f9 fe11 	bl	8000540 <__aeabi_dmul>
 800691e:	a366      	add	r3, pc, #408	@ (adr r3, 8006ab8 <atan+0x2d0>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f7f9 fc56 	bl	80001d4 <__adddf3>
 8006928:	4642      	mov	r2, r8
 800692a:	464b      	mov	r3, r9
 800692c:	f7f9 fe08 	bl	8000540 <__aeabi_dmul>
 8006930:	a363      	add	r3, pc, #396	@ (adr r3, 8006ac0 <atan+0x2d8>)
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	4680      	mov	r8, r0
 8006938:	4689      	mov	r9, r1
 800693a:	4630      	mov	r0, r6
 800693c:	4639      	mov	r1, r7
 800693e:	f7f9 fdff 	bl	8000540 <__aeabi_dmul>
 8006942:	a361      	add	r3, pc, #388	@ (adr r3, 8006ac8 <atan+0x2e0>)
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f7f9 fc42 	bl	80001d0 <__aeabi_dsub>
 800694c:	4632      	mov	r2, r6
 800694e:	463b      	mov	r3, r7
 8006950:	f7f9 fdf6 	bl	8000540 <__aeabi_dmul>
 8006954:	a35e      	add	r3, pc, #376	@ (adr r3, 8006ad0 <atan+0x2e8>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 fc39 	bl	80001d0 <__aeabi_dsub>
 800695e:	4632      	mov	r2, r6
 8006960:	463b      	mov	r3, r7
 8006962:	f7f9 fded 	bl	8000540 <__aeabi_dmul>
 8006966:	a35c      	add	r3, pc, #368	@ (adr r3, 8006ad8 <atan+0x2f0>)
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	f7f9 fc30 	bl	80001d0 <__aeabi_dsub>
 8006970:	4632      	mov	r2, r6
 8006972:	463b      	mov	r3, r7
 8006974:	f7f9 fde4 	bl	8000540 <__aeabi_dmul>
 8006978:	a359      	add	r3, pc, #356	@ (adr r3, 8006ae0 <atan+0x2f8>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fc27 	bl	80001d0 <__aeabi_dsub>
 8006982:	4632      	mov	r2, r6
 8006984:	463b      	mov	r3, r7
 8006986:	f7f9 fddb 	bl	8000540 <__aeabi_dmul>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4640      	mov	r0, r8
 8006990:	4649      	mov	r1, r9
 8006992:	f7f9 fc1f 	bl	80001d4 <__adddf3>
 8006996:	4622      	mov	r2, r4
 8006998:	462b      	mov	r3, r5
 800699a:	f7f9 fdd1 	bl	8000540 <__aeabi_dmul>
 800699e:	f1ba 3fff 	cmp.w	sl, #4294967295
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	d148      	bne.n	8006a3a <atan+0x252>
 80069a8:	4620      	mov	r0, r4
 80069aa:	4629      	mov	r1, r5
 80069ac:	f7f9 fc10 	bl	80001d0 <__aeabi_dsub>
 80069b0:	e72f      	b.n	8006812 <atan+0x2a>
 80069b2:	4b52      	ldr	r3, [pc, #328]	@ (8006afc <atan+0x314>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	4620      	mov	r0, r4
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7f9 fc09 	bl	80001d0 <__aeabi_dsub>
 80069be:	4b4f      	ldr	r3, [pc, #316]	@ (8006afc <atan+0x314>)
 80069c0:	4606      	mov	r6, r0
 80069c2:	460f      	mov	r7, r1
 80069c4:	2200      	movs	r2, #0
 80069c6:	4620      	mov	r0, r4
 80069c8:	4629      	mov	r1, r5
 80069ca:	f7f9 fc03 	bl	80001d4 <__adddf3>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4630      	mov	r0, r6
 80069d4:	4639      	mov	r1, r7
 80069d6:	f7f9 fedd 	bl	8000794 <__aeabi_ddiv>
 80069da:	f04f 0a01 	mov.w	sl, #1
 80069de:	4604      	mov	r4, r0
 80069e0:	460d      	mov	r5, r1
 80069e2:	e765      	b.n	80068b0 <atan+0xc8>
 80069e4:	4b47      	ldr	r3, [pc, #284]	@ (8006b04 <atan+0x31c>)
 80069e6:	429e      	cmp	r6, r3
 80069e8:	d21c      	bcs.n	8006a24 <atan+0x23c>
 80069ea:	4b47      	ldr	r3, [pc, #284]	@ (8006b08 <atan+0x320>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	4620      	mov	r0, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7f9 fbed 	bl	80001d0 <__aeabi_dsub>
 80069f6:	4b44      	ldr	r3, [pc, #272]	@ (8006b08 <atan+0x320>)
 80069f8:	4606      	mov	r6, r0
 80069fa:	460f      	mov	r7, r1
 80069fc:	2200      	movs	r2, #0
 80069fe:	4620      	mov	r0, r4
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7f9 fd9d 	bl	8000540 <__aeabi_dmul>
 8006a06:	4b3d      	ldr	r3, [pc, #244]	@ (8006afc <atan+0x314>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f7f9 fbe3 	bl	80001d4 <__adddf3>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4630      	mov	r0, r6
 8006a14:	4639      	mov	r1, r7
 8006a16:	f7f9 febd 	bl	8000794 <__aeabi_ddiv>
 8006a1a:	f04f 0a02 	mov.w	sl, #2
 8006a1e:	4604      	mov	r4, r0
 8006a20:	460d      	mov	r5, r1
 8006a22:	e745      	b.n	80068b0 <atan+0xc8>
 8006a24:	4622      	mov	r2, r4
 8006a26:	462b      	mov	r3, r5
 8006a28:	4938      	ldr	r1, [pc, #224]	@ (8006b0c <atan+0x324>)
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	f7f9 feb2 	bl	8000794 <__aeabi_ddiv>
 8006a30:	f04f 0a03 	mov.w	sl, #3
 8006a34:	4604      	mov	r4, r0
 8006a36:	460d      	mov	r5, r1
 8006a38:	e73a      	b.n	80068b0 <atan+0xc8>
 8006a3a:	4b35      	ldr	r3, [pc, #212]	@ (8006b10 <atan+0x328>)
 8006a3c:	4e35      	ldr	r6, [pc, #212]	@ (8006b14 <atan+0x32c>)
 8006a3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	f7f9 fbc3 	bl	80001d0 <__aeabi_dsub>
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	f7f9 fbbf 	bl	80001d0 <__aeabi_dsub>
 8006a52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006a5e:	f7f9 fbb7 	bl	80001d0 <__aeabi_dsub>
 8006a62:	f1bb 0f00 	cmp.w	fp, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	460d      	mov	r5, r1
 8006a6a:	f6bf aedc 	bge.w	8006826 <atan+0x3e>
 8006a6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a72:	461d      	mov	r5, r3
 8006a74:	e6d7      	b.n	8006826 <atan+0x3e>
 8006a76:	a51c      	add	r5, pc, #112	@ (adr r5, 8006ae8 <atan+0x300>)
 8006a78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a7c:	e6d3      	b.n	8006826 <atan+0x3e>
 8006a7e:	bf00      	nop
 8006a80:	54442d18 	.word	0x54442d18
 8006a84:	3ff921fb 	.word	0x3ff921fb
 8006a88:	8800759c 	.word	0x8800759c
 8006a8c:	7e37e43c 	.word	0x7e37e43c
 8006a90:	e322da11 	.word	0xe322da11
 8006a94:	3f90ad3a 	.word	0x3f90ad3a
 8006a98:	24760deb 	.word	0x24760deb
 8006a9c:	3fa97b4b 	.word	0x3fa97b4b
 8006aa0:	a0d03d51 	.word	0xa0d03d51
 8006aa4:	3fb10d66 	.word	0x3fb10d66
 8006aa8:	c54c206e 	.word	0xc54c206e
 8006aac:	3fb745cd 	.word	0x3fb745cd
 8006ab0:	920083ff 	.word	0x920083ff
 8006ab4:	3fc24924 	.word	0x3fc24924
 8006ab8:	5555550d 	.word	0x5555550d
 8006abc:	3fd55555 	.word	0x3fd55555
 8006ac0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006ac4:	bfa2b444 	.word	0xbfa2b444
 8006ac8:	52defd9a 	.word	0x52defd9a
 8006acc:	3fadde2d 	.word	0x3fadde2d
 8006ad0:	af749a6d 	.word	0xaf749a6d
 8006ad4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006ad8:	fe231671 	.word	0xfe231671
 8006adc:	3fbc71c6 	.word	0x3fbc71c6
 8006ae0:	9998ebc4 	.word	0x9998ebc4
 8006ae4:	3fc99999 	.word	0x3fc99999
 8006ae8:	54442d18 	.word	0x54442d18
 8006aec:	bff921fb 	.word	0xbff921fb
 8006af0:	440fffff 	.word	0x440fffff
 8006af4:	7ff00000 	.word	0x7ff00000
 8006af8:	3fdbffff 	.word	0x3fdbffff
 8006afc:	3ff00000 	.word	0x3ff00000
 8006b00:	3ff2ffff 	.word	0x3ff2ffff
 8006b04:	40038000 	.word	0x40038000
 8006b08:	3ff80000 	.word	0x3ff80000
 8006b0c:	bff00000 	.word	0xbff00000
 8006b10:	080082e0 	.word	0x080082e0
 8006b14:	08008300 	.word	0x08008300

08006b18 <fabs>:
 8006b18:	ec51 0b10 	vmov	r0, r1, d0
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006b22:	ec43 2b10 	vmov	d0, r2, r3
 8006b26:	4770      	bx	lr

08006b28 <finite>:
 8006b28:	b082      	sub	sp, #8
 8006b2a:	ed8d 0b00 	vstr	d0, [sp]
 8006b2e:	9801      	ldr	r0, [sp, #4]
 8006b30:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006b34:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006b38:	0fc0      	lsrs	r0, r0, #31
 8006b3a:	b002      	add	sp, #8
 8006b3c:	4770      	bx	lr
	...

08006b40 <nan>:
 8006b40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006b48 <nan+0x8>
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	00000000 	.word	0x00000000
 8006b4c:	7ff80000 	.word	0x7ff80000

08006b50 <__ieee754_sqrt>:
 8006b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	4a68      	ldr	r2, [pc, #416]	@ (8006cf8 <__ieee754_sqrt+0x1a8>)
 8006b56:	ec55 4b10 	vmov	r4, r5, d0
 8006b5a:	43aa      	bics	r2, r5
 8006b5c:	462b      	mov	r3, r5
 8006b5e:	4621      	mov	r1, r4
 8006b60:	d110      	bne.n	8006b84 <__ieee754_sqrt+0x34>
 8006b62:	4622      	mov	r2, r4
 8006b64:	4620      	mov	r0, r4
 8006b66:	4629      	mov	r1, r5
 8006b68:	f7f9 fcea 	bl	8000540 <__aeabi_dmul>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4620      	mov	r0, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	f7f9 fb2e 	bl	80001d4 <__adddf3>
 8006b78:	4604      	mov	r4, r0
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	ec45 4b10 	vmov	d0, r4, r5
 8006b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	dc0e      	bgt.n	8006ba6 <__ieee754_sqrt+0x56>
 8006b88:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006b8c:	4322      	orrs	r2, r4
 8006b8e:	d0f5      	beq.n	8006b7c <__ieee754_sqrt+0x2c>
 8006b90:	b19d      	cbz	r5, 8006bba <__ieee754_sqrt+0x6a>
 8006b92:	4622      	mov	r2, r4
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 fb1a 	bl	80001d0 <__aeabi_dsub>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	f7f9 fdf8 	bl	8000794 <__aeabi_ddiv>
 8006ba4:	e7e8      	b.n	8006b78 <__ieee754_sqrt+0x28>
 8006ba6:	152a      	asrs	r2, r5, #20
 8006ba8:	d115      	bne.n	8006bd6 <__ieee754_sqrt+0x86>
 8006baa:	2000      	movs	r0, #0
 8006bac:	e009      	b.n	8006bc2 <__ieee754_sqrt+0x72>
 8006bae:	0acb      	lsrs	r3, r1, #11
 8006bb0:	3a15      	subs	r2, #21
 8006bb2:	0549      	lsls	r1, r1, #21
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0fa      	beq.n	8006bae <__ieee754_sqrt+0x5e>
 8006bb8:	e7f7      	b.n	8006baa <__ieee754_sqrt+0x5a>
 8006bba:	462a      	mov	r2, r5
 8006bbc:	e7fa      	b.n	8006bb4 <__ieee754_sqrt+0x64>
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	02dc      	lsls	r4, r3, #11
 8006bc4:	d5fb      	bpl.n	8006bbe <__ieee754_sqrt+0x6e>
 8006bc6:	1e44      	subs	r4, r0, #1
 8006bc8:	1b12      	subs	r2, r2, r4
 8006bca:	f1c0 0420 	rsb	r4, r0, #32
 8006bce:	fa21 f404 	lsr.w	r4, r1, r4
 8006bd2:	4323      	orrs	r3, r4
 8006bd4:	4081      	lsls	r1, r0
 8006bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bda:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006be2:	07d2      	lsls	r2, r2, #31
 8006be4:	bf5c      	itt	pl
 8006be6:	005b      	lslpl	r3, r3, #1
 8006be8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bf0:	bf58      	it	pl
 8006bf2:	0049      	lslpl	r1, r1, #1
 8006bf4:	2600      	movs	r6, #0
 8006bf6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006bfa:	106d      	asrs	r5, r5, #1
 8006bfc:	0049      	lsls	r1, r1, #1
 8006bfe:	2016      	movs	r0, #22
 8006c00:	4632      	mov	r2, r6
 8006c02:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006c06:	1917      	adds	r7, r2, r4
 8006c08:	429f      	cmp	r7, r3
 8006c0a:	bfde      	ittt	le
 8006c0c:	193a      	addle	r2, r7, r4
 8006c0e:	1bdb      	suble	r3, r3, r7
 8006c10:	1936      	addle	r6, r6, r4
 8006c12:	0fcf      	lsrs	r7, r1, #31
 8006c14:	3801      	subs	r0, #1
 8006c16:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006c1a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006c22:	d1f0      	bne.n	8006c06 <__ieee754_sqrt+0xb6>
 8006c24:	4604      	mov	r4, r0
 8006c26:	2720      	movs	r7, #32
 8006c28:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	eb00 0e0c 	add.w	lr, r0, ip
 8006c32:	db02      	blt.n	8006c3a <__ieee754_sqrt+0xea>
 8006c34:	d113      	bne.n	8006c5e <__ieee754_sqrt+0x10e>
 8006c36:	458e      	cmp	lr, r1
 8006c38:	d811      	bhi.n	8006c5e <__ieee754_sqrt+0x10e>
 8006c3a:	f1be 0f00 	cmp.w	lr, #0
 8006c3e:	eb0e 000c 	add.w	r0, lr, ip
 8006c42:	da42      	bge.n	8006cca <__ieee754_sqrt+0x17a>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	db40      	blt.n	8006cca <__ieee754_sqrt+0x17a>
 8006c48:	f102 0801 	add.w	r8, r2, #1
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	458e      	cmp	lr, r1
 8006c50:	bf88      	it	hi
 8006c52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006c56:	eba1 010e 	sub.w	r1, r1, lr
 8006c5a:	4464      	add	r4, ip
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006c62:	3f01      	subs	r7, #1
 8006c64:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006c68:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006c6c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006c70:	d1dc      	bne.n	8006c2c <__ieee754_sqrt+0xdc>
 8006c72:	4319      	orrs	r1, r3
 8006c74:	d01b      	beq.n	8006cae <__ieee754_sqrt+0x15e>
 8006c76:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006cfc <__ieee754_sqrt+0x1ac>
 8006c7a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006d00 <__ieee754_sqrt+0x1b0>
 8006c7e:	e9da 0100 	ldrd	r0, r1, [sl]
 8006c82:	e9db 2300 	ldrd	r2, r3, [fp]
 8006c86:	f7f9 faa3 	bl	80001d0 <__aeabi_dsub>
 8006c8a:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4640      	mov	r0, r8
 8006c94:	4649      	mov	r1, r9
 8006c96:	f7f9 fecf 	bl	8000a38 <__aeabi_dcmple>
 8006c9a:	b140      	cbz	r0, 8006cae <__ieee754_sqrt+0x15e>
 8006c9c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006ca0:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ca4:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ca8:	d111      	bne.n	8006cce <__ieee754_sqrt+0x17e>
 8006caa:	3601      	adds	r6, #1
 8006cac:	463c      	mov	r4, r7
 8006cae:	1072      	asrs	r2, r6, #1
 8006cb0:	0863      	lsrs	r3, r4, #1
 8006cb2:	07f1      	lsls	r1, r6, #31
 8006cb4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006cb8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006cbc:	bf48      	it	mi
 8006cbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006cc2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	e756      	b.n	8006b78 <__ieee754_sqrt+0x28>
 8006cca:	4690      	mov	r8, r2
 8006ccc:	e7be      	b.n	8006c4c <__ieee754_sqrt+0xfc>
 8006cce:	f7f9 fa81 	bl	80001d4 <__adddf3>
 8006cd2:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	f7f9 fea1 	bl	8000a24 <__aeabi_dcmplt>
 8006ce2:	b120      	cbz	r0, 8006cee <__ieee754_sqrt+0x19e>
 8006ce4:	1ca0      	adds	r0, r4, #2
 8006ce6:	bf08      	it	eq
 8006ce8:	3601      	addeq	r6, #1
 8006cea:	3402      	adds	r4, #2
 8006cec:	e7df      	b.n	8006cae <__ieee754_sqrt+0x15e>
 8006cee:	1c63      	adds	r3, r4, #1
 8006cf0:	f023 0401 	bic.w	r4, r3, #1
 8006cf4:	e7db      	b.n	8006cae <__ieee754_sqrt+0x15e>
 8006cf6:	bf00      	nop
 8006cf8:	7ff00000 	.word	0x7ff00000
 8006cfc:	20000068 	.word	0x20000068
 8006d00:	20000060 	.word	0x20000060
 8006d04:	00000000 	.word	0x00000000

08006d08 <__ieee754_acos>:
 8006d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0c:	ec55 4b10 	vmov	r4, r5, d0
 8006d10:	49b7      	ldr	r1, [pc, #732]	@ (8006ff0 <__ieee754_acos+0x2e8>)
 8006d12:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006d16:	428b      	cmp	r3, r1
 8006d18:	d919      	bls.n	8006d4e <__ieee754_acos+0x46>
 8006d1a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8006d1e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8006d22:	4323      	orrs	r3, r4
 8006d24:	d106      	bne.n	8006d34 <__ieee754_acos+0x2c>
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	f340 8210 	ble.w	800714c <__ieee754_acos+0x444>
 8006d2c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8006f80 <__ieee754_acos+0x278>
 8006d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d34:	4622      	mov	r2, r4
 8006d36:	462b      	mov	r3, r5
 8006d38:	4620      	mov	r0, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	f7f9 fa48 	bl	80001d0 <__aeabi_dsub>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	f7f9 fd26 	bl	8000794 <__aeabi_ddiv>
 8006d48:	ec41 0b10 	vmov	d0, r0, r1
 8006d4c:	e7f0      	b.n	8006d30 <__ieee754_acos+0x28>
 8006d4e:	49a9      	ldr	r1, [pc, #676]	@ (8006ff4 <__ieee754_acos+0x2ec>)
 8006d50:	428b      	cmp	r3, r1
 8006d52:	f200 8085 	bhi.w	8006e60 <__ieee754_acos+0x158>
 8006d56:	4aa8      	ldr	r2, [pc, #672]	@ (8006ff8 <__ieee754_acos+0x2f0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	f240 81fa 	bls.w	8007152 <__ieee754_acos+0x44a>
 8006d5e:	4622      	mov	r2, r4
 8006d60:	462b      	mov	r3, r5
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 fbeb 	bl	8000540 <__aeabi_dmul>
 8006d6a:	a387      	add	r3, pc, #540	@ (adr r3, 8006f88 <__ieee754_acos+0x280>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	4606      	mov	r6, r0
 8006d72:	460f      	mov	r7, r1
 8006d74:	f7f9 fbe4 	bl	8000540 <__aeabi_dmul>
 8006d78:	a385      	add	r3, pc, #532	@ (adr r3, 8006f90 <__ieee754_acos+0x288>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f7f9 fa29 	bl	80001d4 <__adddf3>
 8006d82:	4632      	mov	r2, r6
 8006d84:	463b      	mov	r3, r7
 8006d86:	f7f9 fbdb 	bl	8000540 <__aeabi_dmul>
 8006d8a:	a383      	add	r3, pc, #524	@ (adr r3, 8006f98 <__ieee754_acos+0x290>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f7f9 fa1e 	bl	80001d0 <__aeabi_dsub>
 8006d94:	4632      	mov	r2, r6
 8006d96:	463b      	mov	r3, r7
 8006d98:	f7f9 fbd2 	bl	8000540 <__aeabi_dmul>
 8006d9c:	a380      	add	r3, pc, #512	@ (adr r3, 8006fa0 <__ieee754_acos+0x298>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f7f9 fa17 	bl	80001d4 <__adddf3>
 8006da6:	4632      	mov	r2, r6
 8006da8:	463b      	mov	r3, r7
 8006daa:	f7f9 fbc9 	bl	8000540 <__aeabi_dmul>
 8006dae:	a37e      	add	r3, pc, #504	@ (adr r3, 8006fa8 <__ieee754_acos+0x2a0>)
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	f7f9 fa0c 	bl	80001d0 <__aeabi_dsub>
 8006db8:	4632      	mov	r2, r6
 8006dba:	463b      	mov	r3, r7
 8006dbc:	f7f9 fbc0 	bl	8000540 <__aeabi_dmul>
 8006dc0:	a37b      	add	r3, pc, #492	@ (adr r3, 8006fb0 <__ieee754_acos+0x2a8>)
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f7f9 fa05 	bl	80001d4 <__adddf3>
 8006dca:	4632      	mov	r2, r6
 8006dcc:	463b      	mov	r3, r7
 8006dce:	f7f9 fbb7 	bl	8000540 <__aeabi_dmul>
 8006dd2:	a379      	add	r3, pc, #484	@ (adr r3, 8006fb8 <__ieee754_acos+0x2b0>)
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	4680      	mov	r8, r0
 8006dda:	4689      	mov	r9, r1
 8006ddc:	4630      	mov	r0, r6
 8006dde:	4639      	mov	r1, r7
 8006de0:	f7f9 fbae 	bl	8000540 <__aeabi_dmul>
 8006de4:	a376      	add	r3, pc, #472	@ (adr r3, 8006fc0 <__ieee754_acos+0x2b8>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 f9f1 	bl	80001d0 <__aeabi_dsub>
 8006dee:	4632      	mov	r2, r6
 8006df0:	463b      	mov	r3, r7
 8006df2:	f7f9 fba5 	bl	8000540 <__aeabi_dmul>
 8006df6:	a374      	add	r3, pc, #464	@ (adr r3, 8006fc8 <__ieee754_acos+0x2c0>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 f9ea 	bl	80001d4 <__adddf3>
 8006e00:	4632      	mov	r2, r6
 8006e02:	463b      	mov	r3, r7
 8006e04:	f7f9 fb9c 	bl	8000540 <__aeabi_dmul>
 8006e08:	a371      	add	r3, pc, #452	@ (adr r3, 8006fd0 <__ieee754_acos+0x2c8>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 f9df 	bl	80001d0 <__aeabi_dsub>
 8006e12:	4632      	mov	r2, r6
 8006e14:	463b      	mov	r3, r7
 8006e16:	f7f9 fb93 	bl	8000540 <__aeabi_dmul>
 8006e1a:	4b78      	ldr	r3, [pc, #480]	@ (8006ffc <__ieee754_acos+0x2f4>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f7f9 f9d9 	bl	80001d4 <__adddf3>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4640      	mov	r0, r8
 8006e28:	4649      	mov	r1, r9
 8006e2a:	f7f9 fcb3 	bl	8000794 <__aeabi_ddiv>
 8006e2e:	4622      	mov	r2, r4
 8006e30:	462b      	mov	r3, r5
 8006e32:	f7f9 fb85 	bl	8000540 <__aeabi_dmul>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	a167      	add	r1, pc, #412	@ (adr r1, 8006fd8 <__ieee754_acos+0x2d0>)
 8006e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e40:	f7f9 f9c6 	bl	80001d0 <__aeabi_dsub>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4620      	mov	r0, r4
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	f7f9 f9c0 	bl	80001d0 <__aeabi_dsub>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	a162      	add	r1, pc, #392	@ (adr r1, 8006fe0 <__ieee754_acos+0x2d8>)
 8006e56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e5a:	f7f9 f9b9 	bl	80001d0 <__aeabi_dsub>
 8006e5e:	e773      	b.n	8006d48 <__ieee754_acos+0x40>
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	f280 80cf 	bge.w	8007004 <__ieee754_acos+0x2fc>
 8006e66:	4b65      	ldr	r3, [pc, #404]	@ (8006ffc <__ieee754_acos+0x2f4>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	f7f9 f9b1 	bl	80001d4 <__adddf3>
 8006e72:	4b63      	ldr	r3, [pc, #396]	@ (8007000 <__ieee754_acos+0x2f8>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	f7f9 fb63 	bl	8000540 <__aeabi_dmul>
 8006e7a:	a343      	add	r3, pc, #268	@ (adr r3, 8006f88 <__ieee754_acos+0x280>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	4604      	mov	r4, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	f7f9 fb5c 	bl	8000540 <__aeabi_dmul>
 8006e88:	a341      	add	r3, pc, #260	@ (adr r3, 8006f90 <__ieee754_acos+0x288>)
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f7f9 f9a1 	bl	80001d4 <__adddf3>
 8006e92:	4622      	mov	r2, r4
 8006e94:	462b      	mov	r3, r5
 8006e96:	f7f9 fb53 	bl	8000540 <__aeabi_dmul>
 8006e9a:	a33f      	add	r3, pc, #252	@ (adr r3, 8006f98 <__ieee754_acos+0x290>)
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f7f9 f996 	bl	80001d0 <__aeabi_dsub>
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	f7f9 fb4a 	bl	8000540 <__aeabi_dmul>
 8006eac:	a33c      	add	r3, pc, #240	@ (adr r3, 8006fa0 <__ieee754_acos+0x298>)
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f7f9 f98f 	bl	80001d4 <__adddf3>
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	462b      	mov	r3, r5
 8006eba:	f7f9 fb41 	bl	8000540 <__aeabi_dmul>
 8006ebe:	a33a      	add	r3, pc, #232	@ (adr r3, 8006fa8 <__ieee754_acos+0x2a0>)
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	f7f9 f984 	bl	80001d0 <__aeabi_dsub>
 8006ec8:	4622      	mov	r2, r4
 8006eca:	462b      	mov	r3, r5
 8006ecc:	f7f9 fb38 	bl	8000540 <__aeabi_dmul>
 8006ed0:	a337      	add	r3, pc, #220	@ (adr r3, 8006fb0 <__ieee754_acos+0x2a8>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f7f9 f97d 	bl	80001d4 <__adddf3>
 8006eda:	4622      	mov	r2, r4
 8006edc:	462b      	mov	r3, r5
 8006ede:	f7f9 fb2f 	bl	8000540 <__aeabi_dmul>
 8006ee2:	a335      	add	r3, pc, #212	@ (adr r3, 8006fb8 <__ieee754_acos+0x2b0>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	4606      	mov	r6, r0
 8006eea:	460f      	mov	r7, r1
 8006eec:	4620      	mov	r0, r4
 8006eee:	4629      	mov	r1, r5
 8006ef0:	f7f9 fb26 	bl	8000540 <__aeabi_dmul>
 8006ef4:	a332      	add	r3, pc, #200	@ (adr r3, 8006fc0 <__ieee754_acos+0x2b8>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f969 	bl	80001d0 <__aeabi_dsub>
 8006efe:	4622      	mov	r2, r4
 8006f00:	462b      	mov	r3, r5
 8006f02:	f7f9 fb1d 	bl	8000540 <__aeabi_dmul>
 8006f06:	a330      	add	r3, pc, #192	@ (adr r3, 8006fc8 <__ieee754_acos+0x2c0>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	f7f9 f962 	bl	80001d4 <__adddf3>
 8006f10:	4622      	mov	r2, r4
 8006f12:	462b      	mov	r3, r5
 8006f14:	f7f9 fb14 	bl	8000540 <__aeabi_dmul>
 8006f18:	a32d      	add	r3, pc, #180	@ (adr r3, 8006fd0 <__ieee754_acos+0x2c8>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 f957 	bl	80001d0 <__aeabi_dsub>
 8006f22:	4622      	mov	r2, r4
 8006f24:	462b      	mov	r3, r5
 8006f26:	f7f9 fb0b 	bl	8000540 <__aeabi_dmul>
 8006f2a:	4b34      	ldr	r3, [pc, #208]	@ (8006ffc <__ieee754_acos+0x2f4>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f7f9 f951 	bl	80001d4 <__adddf3>
 8006f32:	ec45 4b10 	vmov	d0, r4, r5
 8006f36:	4680      	mov	r8, r0
 8006f38:	4689      	mov	r9, r1
 8006f3a:	f7ff fe09 	bl	8006b50 <__ieee754_sqrt>
 8006f3e:	ec55 4b10 	vmov	r4, r5, d0
 8006f42:	4642      	mov	r2, r8
 8006f44:	464b      	mov	r3, r9
 8006f46:	4630      	mov	r0, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	f7f9 fc23 	bl	8000794 <__aeabi_ddiv>
 8006f4e:	4622      	mov	r2, r4
 8006f50:	462b      	mov	r3, r5
 8006f52:	f7f9 faf5 	bl	8000540 <__aeabi_dmul>
 8006f56:	a320      	add	r3, pc, #128	@ (adr r3, 8006fd8 <__ieee754_acos+0x2d0>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f7f9 f938 	bl	80001d0 <__aeabi_dsub>
 8006f60:	4622      	mov	r2, r4
 8006f62:	462b      	mov	r3, r5
 8006f64:	f7f9 f936 	bl	80001d4 <__adddf3>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	f7f9 f932 	bl	80001d4 <__adddf3>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	a11c      	add	r1, pc, #112	@ (adr r1, 8006fe8 <__ieee754_acos+0x2e0>)
 8006f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f7a:	e76e      	b.n	8006e5a <__ieee754_acos+0x152>
 8006f7c:	f3af 8000 	nop.w
	...
 8006f88:	0dfdf709 	.word	0x0dfdf709
 8006f8c:	3f023de1 	.word	0x3f023de1
 8006f90:	7501b288 	.word	0x7501b288
 8006f94:	3f49efe0 	.word	0x3f49efe0
 8006f98:	b5688f3b 	.word	0xb5688f3b
 8006f9c:	3fa48228 	.word	0x3fa48228
 8006fa0:	0e884455 	.word	0x0e884455
 8006fa4:	3fc9c155 	.word	0x3fc9c155
 8006fa8:	03eb6f7d 	.word	0x03eb6f7d
 8006fac:	3fd4d612 	.word	0x3fd4d612
 8006fb0:	55555555 	.word	0x55555555
 8006fb4:	3fc55555 	.word	0x3fc55555
 8006fb8:	b12e9282 	.word	0xb12e9282
 8006fbc:	3fb3b8c5 	.word	0x3fb3b8c5
 8006fc0:	1b8d0159 	.word	0x1b8d0159
 8006fc4:	3fe6066c 	.word	0x3fe6066c
 8006fc8:	9c598ac8 	.word	0x9c598ac8
 8006fcc:	40002ae5 	.word	0x40002ae5
 8006fd0:	1c8a2d4b 	.word	0x1c8a2d4b
 8006fd4:	40033a27 	.word	0x40033a27
 8006fd8:	33145c07 	.word	0x33145c07
 8006fdc:	3c91a626 	.word	0x3c91a626
 8006fe0:	54442d18 	.word	0x54442d18
 8006fe4:	3ff921fb 	.word	0x3ff921fb
 8006fe8:	54442d18 	.word	0x54442d18
 8006fec:	400921fb 	.word	0x400921fb
 8006ff0:	3fefffff 	.word	0x3fefffff
 8006ff4:	3fdfffff 	.word	0x3fdfffff
 8006ff8:	3c600000 	.word	0x3c600000
 8006ffc:	3ff00000 	.word	0x3ff00000
 8007000:	3fe00000 	.word	0x3fe00000
 8007004:	4622      	mov	r2, r4
 8007006:	462b      	mov	r3, r5
 8007008:	496b      	ldr	r1, [pc, #428]	@ (80071b8 <__ieee754_acos+0x4b0>)
 800700a:	2000      	movs	r0, #0
 800700c:	f7f9 f8e0 	bl	80001d0 <__aeabi_dsub>
 8007010:	4b6a      	ldr	r3, [pc, #424]	@ (80071bc <__ieee754_acos+0x4b4>)
 8007012:	2200      	movs	r2, #0
 8007014:	f7f9 fa94 	bl	8000540 <__aeabi_dmul>
 8007018:	4604      	mov	r4, r0
 800701a:	460d      	mov	r5, r1
 800701c:	ec45 4b10 	vmov	d0, r4, r5
 8007020:	f7ff fd96 	bl	8006b50 <__ieee754_sqrt>
 8007024:	a34c      	add	r3, pc, #304	@ (adr r3, 8007158 <__ieee754_acos+0x450>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	4620      	mov	r0, r4
 800702c:	4629      	mov	r1, r5
 800702e:	ec59 8b10 	vmov	r8, r9, d0
 8007032:	f7f9 fa85 	bl	8000540 <__aeabi_dmul>
 8007036:	a34a      	add	r3, pc, #296	@ (adr r3, 8007160 <__ieee754_acos+0x458>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f7f9 f8ca 	bl	80001d4 <__adddf3>
 8007040:	4622      	mov	r2, r4
 8007042:	462b      	mov	r3, r5
 8007044:	f7f9 fa7c 	bl	8000540 <__aeabi_dmul>
 8007048:	a347      	add	r3, pc, #284	@ (adr r3, 8007168 <__ieee754_acos+0x460>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	f7f9 f8bf 	bl	80001d0 <__aeabi_dsub>
 8007052:	4622      	mov	r2, r4
 8007054:	462b      	mov	r3, r5
 8007056:	f7f9 fa73 	bl	8000540 <__aeabi_dmul>
 800705a:	a345      	add	r3, pc, #276	@ (adr r3, 8007170 <__ieee754_acos+0x468>)
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f7f9 f8b8 	bl	80001d4 <__adddf3>
 8007064:	4622      	mov	r2, r4
 8007066:	462b      	mov	r3, r5
 8007068:	f7f9 fa6a 	bl	8000540 <__aeabi_dmul>
 800706c:	a342      	add	r3, pc, #264	@ (adr r3, 8007178 <__ieee754_acos+0x470>)
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	f7f9 f8ad 	bl	80001d0 <__aeabi_dsub>
 8007076:	4622      	mov	r2, r4
 8007078:	462b      	mov	r3, r5
 800707a:	f7f9 fa61 	bl	8000540 <__aeabi_dmul>
 800707e:	a340      	add	r3, pc, #256	@ (adr r3, 8007180 <__ieee754_acos+0x478>)
 8007080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007084:	f7f9 f8a6 	bl	80001d4 <__adddf3>
 8007088:	4622      	mov	r2, r4
 800708a:	462b      	mov	r3, r5
 800708c:	f7f9 fa58 	bl	8000540 <__aeabi_dmul>
 8007090:	a33d      	add	r3, pc, #244	@ (adr r3, 8007188 <__ieee754_acos+0x480>)
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	4682      	mov	sl, r0
 8007098:	468b      	mov	fp, r1
 800709a:	4620      	mov	r0, r4
 800709c:	4629      	mov	r1, r5
 800709e:	f7f9 fa4f 	bl	8000540 <__aeabi_dmul>
 80070a2:	a33b      	add	r3, pc, #236	@ (adr r3, 8007190 <__ieee754_acos+0x488>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f7f9 f892 	bl	80001d0 <__aeabi_dsub>
 80070ac:	4622      	mov	r2, r4
 80070ae:	462b      	mov	r3, r5
 80070b0:	f7f9 fa46 	bl	8000540 <__aeabi_dmul>
 80070b4:	a338      	add	r3, pc, #224	@ (adr r3, 8007198 <__ieee754_acos+0x490>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	f7f9 f88b 	bl	80001d4 <__adddf3>
 80070be:	4622      	mov	r2, r4
 80070c0:	462b      	mov	r3, r5
 80070c2:	f7f9 fa3d 	bl	8000540 <__aeabi_dmul>
 80070c6:	a336      	add	r3, pc, #216	@ (adr r3, 80071a0 <__ieee754_acos+0x498>)
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f7f9 f880 	bl	80001d0 <__aeabi_dsub>
 80070d0:	4622      	mov	r2, r4
 80070d2:	462b      	mov	r3, r5
 80070d4:	f7f9 fa34 	bl	8000540 <__aeabi_dmul>
 80070d8:	4b37      	ldr	r3, [pc, #220]	@ (80071b8 <__ieee754_acos+0x4b0>)
 80070da:	2200      	movs	r2, #0
 80070dc:	f7f9 f87a 	bl	80001d4 <__adddf3>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4650      	mov	r0, sl
 80070e6:	4659      	mov	r1, fp
 80070e8:	f7f9 fb54 	bl	8000794 <__aeabi_ddiv>
 80070ec:	4642      	mov	r2, r8
 80070ee:	464b      	mov	r3, r9
 80070f0:	f7f9 fa26 	bl	8000540 <__aeabi_dmul>
 80070f4:	2600      	movs	r6, #0
 80070f6:	4682      	mov	sl, r0
 80070f8:	468b      	mov	fp, r1
 80070fa:	4632      	mov	r2, r6
 80070fc:	464b      	mov	r3, r9
 80070fe:	4630      	mov	r0, r6
 8007100:	4649      	mov	r1, r9
 8007102:	f7f9 fa1d 	bl	8000540 <__aeabi_dmul>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	4620      	mov	r0, r4
 800710c:	4629      	mov	r1, r5
 800710e:	f7f9 f85f 	bl	80001d0 <__aeabi_dsub>
 8007112:	4632      	mov	r2, r6
 8007114:	4604      	mov	r4, r0
 8007116:	460d      	mov	r5, r1
 8007118:	464b      	mov	r3, r9
 800711a:	4640      	mov	r0, r8
 800711c:	4649      	mov	r1, r9
 800711e:	f7f9 f859 	bl	80001d4 <__adddf3>
 8007122:	4602      	mov	r2, r0
 8007124:	460b      	mov	r3, r1
 8007126:	4620      	mov	r0, r4
 8007128:	4629      	mov	r1, r5
 800712a:	f7f9 fb33 	bl	8000794 <__aeabi_ddiv>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4650      	mov	r0, sl
 8007134:	4659      	mov	r1, fp
 8007136:	f7f9 f84d 	bl	80001d4 <__adddf3>
 800713a:	4632      	mov	r2, r6
 800713c:	464b      	mov	r3, r9
 800713e:	f7f9 f849 	bl	80001d4 <__adddf3>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	f7f9 f845 	bl	80001d4 <__adddf3>
 800714a:	e5fd      	b.n	8006d48 <__ieee754_acos+0x40>
 800714c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80071a8 <__ieee754_acos+0x4a0>
 8007150:	e5ee      	b.n	8006d30 <__ieee754_acos+0x28>
 8007152:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80071b0 <__ieee754_acos+0x4a8>
 8007156:	e5eb      	b.n	8006d30 <__ieee754_acos+0x28>
 8007158:	0dfdf709 	.word	0x0dfdf709
 800715c:	3f023de1 	.word	0x3f023de1
 8007160:	7501b288 	.word	0x7501b288
 8007164:	3f49efe0 	.word	0x3f49efe0
 8007168:	b5688f3b 	.word	0xb5688f3b
 800716c:	3fa48228 	.word	0x3fa48228
 8007170:	0e884455 	.word	0x0e884455
 8007174:	3fc9c155 	.word	0x3fc9c155
 8007178:	03eb6f7d 	.word	0x03eb6f7d
 800717c:	3fd4d612 	.word	0x3fd4d612
 8007180:	55555555 	.word	0x55555555
 8007184:	3fc55555 	.word	0x3fc55555
 8007188:	b12e9282 	.word	0xb12e9282
 800718c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007190:	1b8d0159 	.word	0x1b8d0159
 8007194:	3fe6066c 	.word	0x3fe6066c
 8007198:	9c598ac8 	.word	0x9c598ac8
 800719c:	40002ae5 	.word	0x40002ae5
 80071a0:	1c8a2d4b 	.word	0x1c8a2d4b
 80071a4:	40033a27 	.word	0x40033a27
 80071a8:	54442d18 	.word	0x54442d18
 80071ac:	400921fb 	.word	0x400921fb
 80071b0:	54442d18 	.word	0x54442d18
 80071b4:	3ff921fb 	.word	0x3ff921fb
 80071b8:	3ff00000 	.word	0x3ff00000
 80071bc:	3fe00000 	.word	0x3fe00000

080071c0 <__ieee754_asin>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	ec55 4b10 	vmov	r4, r5, d0
 80071c8:	4bc7      	ldr	r3, [pc, #796]	@ (80074e8 <__ieee754_asin+0x328>)
 80071ca:	b087      	sub	sp, #28
 80071cc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80071d0:	429e      	cmp	r6, r3
 80071d2:	9501      	str	r5, [sp, #4]
 80071d4:	d92d      	bls.n	8007232 <__ieee754_asin+0x72>
 80071d6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80071da:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80071de:	4326      	orrs	r6, r4
 80071e0:	d116      	bne.n	8007210 <__ieee754_asin+0x50>
 80071e2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8007480 <__ieee754_asin+0x2c0>)
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	4620      	mov	r0, r4
 80071ea:	4629      	mov	r1, r5
 80071ec:	f7f9 f9a8 	bl	8000540 <__aeabi_dmul>
 80071f0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8007488 <__ieee754_asin+0x2c8>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	4606      	mov	r6, r0
 80071f8:	460f      	mov	r7, r1
 80071fa:	4620      	mov	r0, r4
 80071fc:	4629      	mov	r1, r5
 80071fe:	f7f9 f99f 	bl	8000540 <__aeabi_dmul>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4630      	mov	r0, r6
 8007208:	4639      	mov	r1, r7
 800720a:	f7f8 ffe3 	bl	80001d4 <__adddf3>
 800720e:	e009      	b.n	8007224 <__ieee754_asin+0x64>
 8007210:	4622      	mov	r2, r4
 8007212:	462b      	mov	r3, r5
 8007214:	4620      	mov	r0, r4
 8007216:	4629      	mov	r1, r5
 8007218:	f7f8 ffda 	bl	80001d0 <__aeabi_dsub>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	f7f9 fab8 	bl	8000794 <__aeabi_ddiv>
 8007224:	4604      	mov	r4, r0
 8007226:	460d      	mov	r5, r1
 8007228:	ec45 4b10 	vmov	d0, r4, r5
 800722c:	b007      	add	sp, #28
 800722e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007232:	4bae      	ldr	r3, [pc, #696]	@ (80074ec <__ieee754_asin+0x32c>)
 8007234:	429e      	cmp	r6, r3
 8007236:	d810      	bhi.n	800725a <__ieee754_asin+0x9a>
 8007238:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800723c:	f080 80ad 	bcs.w	800739a <__ieee754_asin+0x1da>
 8007240:	a393      	add	r3, pc, #588	@ (adr r3, 8007490 <__ieee754_asin+0x2d0>)
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f8 ffc3 	bl	80001d4 <__adddf3>
 800724e:	4ba8      	ldr	r3, [pc, #672]	@ (80074f0 <__ieee754_asin+0x330>)
 8007250:	2200      	movs	r2, #0
 8007252:	f7f9 fc05 	bl	8000a60 <__aeabi_dcmpgt>
 8007256:	2800      	cmp	r0, #0
 8007258:	d1e6      	bne.n	8007228 <__ieee754_asin+0x68>
 800725a:	ec45 4b10 	vmov	d0, r4, r5
 800725e:	f7ff fc5b 	bl	8006b18 <fabs>
 8007262:	49a3      	ldr	r1, [pc, #652]	@ (80074f0 <__ieee754_asin+0x330>)
 8007264:	ec53 2b10 	vmov	r2, r3, d0
 8007268:	2000      	movs	r0, #0
 800726a:	f7f8 ffb1 	bl	80001d0 <__aeabi_dsub>
 800726e:	4ba1      	ldr	r3, [pc, #644]	@ (80074f4 <__ieee754_asin+0x334>)
 8007270:	2200      	movs	r2, #0
 8007272:	f7f9 f965 	bl	8000540 <__aeabi_dmul>
 8007276:	a388      	add	r3, pc, #544	@ (adr r3, 8007498 <__ieee754_asin+0x2d8>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	f7f9 f95e 	bl	8000540 <__aeabi_dmul>
 8007284:	a386      	add	r3, pc, #536	@ (adr r3, 80074a0 <__ieee754_asin+0x2e0>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f8 ffa3 	bl	80001d4 <__adddf3>
 800728e:	4622      	mov	r2, r4
 8007290:	462b      	mov	r3, r5
 8007292:	f7f9 f955 	bl	8000540 <__aeabi_dmul>
 8007296:	a384      	add	r3, pc, #528	@ (adr r3, 80074a8 <__ieee754_asin+0x2e8>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f7f8 ff98 	bl	80001d0 <__aeabi_dsub>
 80072a0:	4622      	mov	r2, r4
 80072a2:	462b      	mov	r3, r5
 80072a4:	f7f9 f94c 	bl	8000540 <__aeabi_dmul>
 80072a8:	a381      	add	r3, pc, #516	@ (adr r3, 80074b0 <__ieee754_asin+0x2f0>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f8 ff91 	bl	80001d4 <__adddf3>
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	f7f9 f943 	bl	8000540 <__aeabi_dmul>
 80072ba:	a37f      	add	r3, pc, #508	@ (adr r3, 80074b8 <__ieee754_asin+0x2f8>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f7f8 ff86 	bl	80001d0 <__aeabi_dsub>
 80072c4:	4622      	mov	r2, r4
 80072c6:	462b      	mov	r3, r5
 80072c8:	f7f9 f93a 	bl	8000540 <__aeabi_dmul>
 80072cc:	a37c      	add	r3, pc, #496	@ (adr r3, 80074c0 <__ieee754_asin+0x300>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f8 ff7f 	bl	80001d4 <__adddf3>
 80072d6:	4622      	mov	r2, r4
 80072d8:	462b      	mov	r3, r5
 80072da:	f7f9 f931 	bl	8000540 <__aeabi_dmul>
 80072de:	a37a      	add	r3, pc, #488	@ (adr r3, 80074c8 <__ieee754_asin+0x308>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e8:	4620      	mov	r0, r4
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7f9 f928 	bl	8000540 <__aeabi_dmul>
 80072f0:	a377      	add	r3, pc, #476	@ (adr r3, 80074d0 <__ieee754_asin+0x310>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f8 ff6b 	bl	80001d0 <__aeabi_dsub>
 80072fa:	4622      	mov	r2, r4
 80072fc:	462b      	mov	r3, r5
 80072fe:	f7f9 f91f 	bl	8000540 <__aeabi_dmul>
 8007302:	a375      	add	r3, pc, #468	@ (adr r3, 80074d8 <__ieee754_asin+0x318>)
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f7f8 ff64 	bl	80001d4 <__adddf3>
 800730c:	4622      	mov	r2, r4
 800730e:	462b      	mov	r3, r5
 8007310:	f7f9 f916 	bl	8000540 <__aeabi_dmul>
 8007314:	a372      	add	r3, pc, #456	@ (adr r3, 80074e0 <__ieee754_asin+0x320>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f7f8 ff59 	bl	80001d0 <__aeabi_dsub>
 800731e:	4622      	mov	r2, r4
 8007320:	462b      	mov	r3, r5
 8007322:	f7f9 f90d 	bl	8000540 <__aeabi_dmul>
 8007326:	4b72      	ldr	r3, [pc, #456]	@ (80074f0 <__ieee754_asin+0x330>)
 8007328:	2200      	movs	r2, #0
 800732a:	f7f8 ff53 	bl	80001d4 <__adddf3>
 800732e:	ec45 4b10 	vmov	d0, r4, r5
 8007332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007336:	f7ff fc0b 	bl	8006b50 <__ieee754_sqrt>
 800733a:	4b6f      	ldr	r3, [pc, #444]	@ (80074f8 <__ieee754_asin+0x338>)
 800733c:	429e      	cmp	r6, r3
 800733e:	ec5b ab10 	vmov	sl, fp, d0
 8007342:	f240 80db 	bls.w	80074fc <__ieee754_asin+0x33c>
 8007346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800734a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800734e:	f7f9 fa21 	bl	8000794 <__aeabi_ddiv>
 8007352:	4652      	mov	r2, sl
 8007354:	465b      	mov	r3, fp
 8007356:	f7f9 f8f3 	bl	8000540 <__aeabi_dmul>
 800735a:	4652      	mov	r2, sl
 800735c:	465b      	mov	r3, fp
 800735e:	f7f8 ff39 	bl	80001d4 <__adddf3>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	f7f8 ff35 	bl	80001d4 <__adddf3>
 800736a:	a347      	add	r3, pc, #284	@ (adr r3, 8007488 <__ieee754_asin+0x2c8>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f7f8 ff2e 	bl	80001d0 <__aeabi_dsub>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	a141      	add	r1, pc, #260	@ (adr r1, 8007480 <__ieee754_asin+0x2c0>)
 800737a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800737e:	f7f8 ff27 	bl	80001d0 <__aeabi_dsub>
 8007382:	9b01      	ldr	r3, [sp, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	bfdc      	itt	le
 8007388:	4602      	movle	r2, r0
 800738a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800738e:	4604      	mov	r4, r0
 8007390:	460d      	mov	r5, r1
 8007392:	bfdc      	itt	le
 8007394:	4614      	movle	r4, r2
 8007396:	461d      	movle	r5, r3
 8007398:	e746      	b.n	8007228 <__ieee754_asin+0x68>
 800739a:	4622      	mov	r2, r4
 800739c:	462b      	mov	r3, r5
 800739e:	4620      	mov	r0, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7f9 f8cd 	bl	8000540 <__aeabi_dmul>
 80073a6:	a33c      	add	r3, pc, #240	@ (adr r3, 8007498 <__ieee754_asin+0x2d8>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	4606      	mov	r6, r0
 80073ae:	460f      	mov	r7, r1
 80073b0:	f7f9 f8c6 	bl	8000540 <__aeabi_dmul>
 80073b4:	a33a      	add	r3, pc, #232	@ (adr r3, 80074a0 <__ieee754_asin+0x2e0>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f7f8 ff0b 	bl	80001d4 <__adddf3>
 80073be:	4632      	mov	r2, r6
 80073c0:	463b      	mov	r3, r7
 80073c2:	f7f9 f8bd 	bl	8000540 <__aeabi_dmul>
 80073c6:	a338      	add	r3, pc, #224	@ (adr r3, 80074a8 <__ieee754_asin+0x2e8>)
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f7f8 ff00 	bl	80001d0 <__aeabi_dsub>
 80073d0:	4632      	mov	r2, r6
 80073d2:	463b      	mov	r3, r7
 80073d4:	f7f9 f8b4 	bl	8000540 <__aeabi_dmul>
 80073d8:	a335      	add	r3, pc, #212	@ (adr r3, 80074b0 <__ieee754_asin+0x2f0>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f7f8 fef9 	bl	80001d4 <__adddf3>
 80073e2:	4632      	mov	r2, r6
 80073e4:	463b      	mov	r3, r7
 80073e6:	f7f9 f8ab 	bl	8000540 <__aeabi_dmul>
 80073ea:	a333      	add	r3, pc, #204	@ (adr r3, 80074b8 <__ieee754_asin+0x2f8>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f8 feee 	bl	80001d0 <__aeabi_dsub>
 80073f4:	4632      	mov	r2, r6
 80073f6:	463b      	mov	r3, r7
 80073f8:	f7f9 f8a2 	bl	8000540 <__aeabi_dmul>
 80073fc:	a330      	add	r3, pc, #192	@ (adr r3, 80074c0 <__ieee754_asin+0x300>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	f7f8 fee7 	bl	80001d4 <__adddf3>
 8007406:	4632      	mov	r2, r6
 8007408:	463b      	mov	r3, r7
 800740a:	f7f9 f899 	bl	8000540 <__aeabi_dmul>
 800740e:	a32e      	add	r3, pc, #184	@ (adr r3, 80074c8 <__ieee754_asin+0x308>)
 8007410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007414:	4680      	mov	r8, r0
 8007416:	4689      	mov	r9, r1
 8007418:	4630      	mov	r0, r6
 800741a:	4639      	mov	r1, r7
 800741c:	f7f9 f890 	bl	8000540 <__aeabi_dmul>
 8007420:	a32b      	add	r3, pc, #172	@ (adr r3, 80074d0 <__ieee754_asin+0x310>)
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	f7f8 fed3 	bl	80001d0 <__aeabi_dsub>
 800742a:	4632      	mov	r2, r6
 800742c:	463b      	mov	r3, r7
 800742e:	f7f9 f887 	bl	8000540 <__aeabi_dmul>
 8007432:	a329      	add	r3, pc, #164	@ (adr r3, 80074d8 <__ieee754_asin+0x318>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f7f8 fecc 	bl	80001d4 <__adddf3>
 800743c:	4632      	mov	r2, r6
 800743e:	463b      	mov	r3, r7
 8007440:	f7f9 f87e 	bl	8000540 <__aeabi_dmul>
 8007444:	a326      	add	r3, pc, #152	@ (adr r3, 80074e0 <__ieee754_asin+0x320>)
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f7f8 fec1 	bl	80001d0 <__aeabi_dsub>
 800744e:	4632      	mov	r2, r6
 8007450:	463b      	mov	r3, r7
 8007452:	f7f9 f875 	bl	8000540 <__aeabi_dmul>
 8007456:	4b26      	ldr	r3, [pc, #152]	@ (80074f0 <__ieee754_asin+0x330>)
 8007458:	2200      	movs	r2, #0
 800745a:	f7f8 febb 	bl	80001d4 <__adddf3>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f9 f995 	bl	8000794 <__aeabi_ddiv>
 800746a:	4622      	mov	r2, r4
 800746c:	462b      	mov	r3, r5
 800746e:	f7f9 f867 	bl	8000540 <__aeabi_dmul>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4620      	mov	r0, r4
 8007478:	4629      	mov	r1, r5
 800747a:	e6c6      	b.n	800720a <__ieee754_asin+0x4a>
 800747c:	f3af 8000 	nop.w
 8007480:	54442d18 	.word	0x54442d18
 8007484:	3ff921fb 	.word	0x3ff921fb
 8007488:	33145c07 	.word	0x33145c07
 800748c:	3c91a626 	.word	0x3c91a626
 8007490:	8800759c 	.word	0x8800759c
 8007494:	7e37e43c 	.word	0x7e37e43c
 8007498:	0dfdf709 	.word	0x0dfdf709
 800749c:	3f023de1 	.word	0x3f023de1
 80074a0:	7501b288 	.word	0x7501b288
 80074a4:	3f49efe0 	.word	0x3f49efe0
 80074a8:	b5688f3b 	.word	0xb5688f3b
 80074ac:	3fa48228 	.word	0x3fa48228
 80074b0:	0e884455 	.word	0x0e884455
 80074b4:	3fc9c155 	.word	0x3fc9c155
 80074b8:	03eb6f7d 	.word	0x03eb6f7d
 80074bc:	3fd4d612 	.word	0x3fd4d612
 80074c0:	55555555 	.word	0x55555555
 80074c4:	3fc55555 	.word	0x3fc55555
 80074c8:	b12e9282 	.word	0xb12e9282
 80074cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80074d0:	1b8d0159 	.word	0x1b8d0159
 80074d4:	3fe6066c 	.word	0x3fe6066c
 80074d8:	9c598ac8 	.word	0x9c598ac8
 80074dc:	40002ae5 	.word	0x40002ae5
 80074e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80074e4:	40033a27 	.word	0x40033a27
 80074e8:	3fefffff 	.word	0x3fefffff
 80074ec:	3fdfffff 	.word	0x3fdfffff
 80074f0:	3ff00000 	.word	0x3ff00000
 80074f4:	3fe00000 	.word	0x3fe00000
 80074f8:	3fef3332 	.word	0x3fef3332
 80074fc:	4652      	mov	r2, sl
 80074fe:	465b      	mov	r3, fp
 8007500:	4650      	mov	r0, sl
 8007502:	4659      	mov	r1, fp
 8007504:	f7f8 fe66 	bl	80001d4 <__adddf3>
 8007508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800750c:	4606      	mov	r6, r0
 800750e:	460f      	mov	r7, r1
 8007510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007514:	f7f9 f93e 	bl	8000794 <__aeabi_ddiv>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4630      	mov	r0, r6
 800751e:	4639      	mov	r1, r7
 8007520:	f7f9 f80e 	bl	8000540 <__aeabi_dmul>
 8007524:	f04f 0800 	mov.w	r8, #0
 8007528:	4606      	mov	r6, r0
 800752a:	460f      	mov	r7, r1
 800752c:	4642      	mov	r2, r8
 800752e:	465b      	mov	r3, fp
 8007530:	4640      	mov	r0, r8
 8007532:	4659      	mov	r1, fp
 8007534:	f7f9 f804 	bl	8000540 <__aeabi_dmul>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4620      	mov	r0, r4
 800753e:	4629      	mov	r1, r5
 8007540:	f7f8 fe46 	bl	80001d0 <__aeabi_dsub>
 8007544:	4642      	mov	r2, r8
 8007546:	4604      	mov	r4, r0
 8007548:	460d      	mov	r5, r1
 800754a:	465b      	mov	r3, fp
 800754c:	4650      	mov	r0, sl
 800754e:	4659      	mov	r1, fp
 8007550:	f7f8 fe40 	bl	80001d4 <__adddf3>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4620      	mov	r0, r4
 800755a:	4629      	mov	r1, r5
 800755c:	f7f9 f91a 	bl	8000794 <__aeabi_ddiv>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	f7f8 fe36 	bl	80001d4 <__adddf3>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	a112      	add	r1, pc, #72	@ (adr r1, 80075b8 <__ieee754_asin+0x3f8>)
 800756e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007572:	f7f8 fe2d 	bl	80001d0 <__aeabi_dsub>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4630      	mov	r0, r6
 800757c:	4639      	mov	r1, r7
 800757e:	f7f8 fe27 	bl	80001d0 <__aeabi_dsub>
 8007582:	4642      	mov	r2, r8
 8007584:	4604      	mov	r4, r0
 8007586:	460d      	mov	r5, r1
 8007588:	465b      	mov	r3, fp
 800758a:	4640      	mov	r0, r8
 800758c:	4659      	mov	r1, fp
 800758e:	f7f8 fe21 	bl	80001d4 <__adddf3>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	a10a      	add	r1, pc, #40	@ (adr r1, 80075c0 <__ieee754_asin+0x400>)
 8007598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800759c:	f7f8 fe18 	bl	80001d0 <__aeabi_dsub>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4620      	mov	r0, r4
 80075a6:	4629      	mov	r1, r5
 80075a8:	f7f8 fe12 	bl	80001d0 <__aeabi_dsub>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	a103      	add	r1, pc, #12	@ (adr r1, 80075c0 <__ieee754_asin+0x400>)
 80075b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b6:	e6e2      	b.n	800737e <__ieee754_asin+0x1be>
 80075b8:	33145c07 	.word	0x33145c07
 80075bc:	3c91a626 	.word	0x3c91a626
 80075c0:	54442d18 	.word	0x54442d18
 80075c4:	3fe921fb 	.word	0x3fe921fb

080075c8 <__ieee754_pow>:
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075cc:	b091      	sub	sp, #68	@ 0x44
 80075ce:	ed8d 1b00 	vstr	d1, [sp]
 80075d2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80075d6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80075da:	ea5a 0001 	orrs.w	r0, sl, r1
 80075de:	ec57 6b10 	vmov	r6, r7, d0
 80075e2:	d113      	bne.n	800760c <__ieee754_pow+0x44>
 80075e4:	19b3      	adds	r3, r6, r6
 80075e6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80075ea:	4152      	adcs	r2, r2
 80075ec:	4298      	cmp	r0, r3
 80075ee:	4b98      	ldr	r3, [pc, #608]	@ (8007850 <__ieee754_pow+0x288>)
 80075f0:	4193      	sbcs	r3, r2
 80075f2:	f080 84ea 	bcs.w	8007fca <__ieee754_pow+0xa02>
 80075f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075fa:	4630      	mov	r0, r6
 80075fc:	4639      	mov	r1, r7
 80075fe:	f7f8 fde9 	bl	80001d4 <__adddf3>
 8007602:	ec41 0b10 	vmov	d0, r0, r1
 8007606:	b011      	add	sp, #68	@ 0x44
 8007608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760c:	4a91      	ldr	r2, [pc, #580]	@ (8007854 <__ieee754_pow+0x28c>)
 800760e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007612:	4590      	cmp	r8, r2
 8007614:	463d      	mov	r5, r7
 8007616:	4633      	mov	r3, r6
 8007618:	d806      	bhi.n	8007628 <__ieee754_pow+0x60>
 800761a:	d101      	bne.n	8007620 <__ieee754_pow+0x58>
 800761c:	2e00      	cmp	r6, #0
 800761e:	d1ea      	bne.n	80075f6 <__ieee754_pow+0x2e>
 8007620:	4592      	cmp	sl, r2
 8007622:	d801      	bhi.n	8007628 <__ieee754_pow+0x60>
 8007624:	d10e      	bne.n	8007644 <__ieee754_pow+0x7c>
 8007626:	b169      	cbz	r1, 8007644 <__ieee754_pow+0x7c>
 8007628:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800762c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007630:	431d      	orrs	r5, r3
 8007632:	d1e0      	bne.n	80075f6 <__ieee754_pow+0x2e>
 8007634:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007638:	18db      	adds	r3, r3, r3
 800763a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800763e:	4152      	adcs	r2, r2
 8007640:	429d      	cmp	r5, r3
 8007642:	e7d4      	b.n	80075ee <__ieee754_pow+0x26>
 8007644:	2d00      	cmp	r5, #0
 8007646:	46c3      	mov	fp, r8
 8007648:	da3a      	bge.n	80076c0 <__ieee754_pow+0xf8>
 800764a:	4a83      	ldr	r2, [pc, #524]	@ (8007858 <__ieee754_pow+0x290>)
 800764c:	4592      	cmp	sl, r2
 800764e:	d84d      	bhi.n	80076ec <__ieee754_pow+0x124>
 8007650:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007654:	4592      	cmp	sl, r2
 8007656:	f240 84c7 	bls.w	8007fe8 <__ieee754_pow+0xa20>
 800765a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800765e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007662:	2a14      	cmp	r2, #20
 8007664:	dd0f      	ble.n	8007686 <__ieee754_pow+0xbe>
 8007666:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800766a:	fa21 f402 	lsr.w	r4, r1, r2
 800766e:	fa04 f202 	lsl.w	r2, r4, r2
 8007672:	428a      	cmp	r2, r1
 8007674:	f040 84b8 	bne.w	8007fe8 <__ieee754_pow+0xa20>
 8007678:	f004 0401 	and.w	r4, r4, #1
 800767c:	f1c4 0402 	rsb	r4, r4, #2
 8007680:	2900      	cmp	r1, #0
 8007682:	d158      	bne.n	8007736 <__ieee754_pow+0x16e>
 8007684:	e00e      	b.n	80076a4 <__ieee754_pow+0xdc>
 8007686:	2900      	cmp	r1, #0
 8007688:	d154      	bne.n	8007734 <__ieee754_pow+0x16c>
 800768a:	f1c2 0214 	rsb	r2, r2, #20
 800768e:	fa4a f402 	asr.w	r4, sl, r2
 8007692:	fa04 f202 	lsl.w	r2, r4, r2
 8007696:	4552      	cmp	r2, sl
 8007698:	f040 84a3 	bne.w	8007fe2 <__ieee754_pow+0xa1a>
 800769c:	f004 0401 	and.w	r4, r4, #1
 80076a0:	f1c4 0402 	rsb	r4, r4, #2
 80076a4:	4a6d      	ldr	r2, [pc, #436]	@ (800785c <__ieee754_pow+0x294>)
 80076a6:	4592      	cmp	sl, r2
 80076a8:	d12e      	bne.n	8007708 <__ieee754_pow+0x140>
 80076aa:	f1b9 0f00 	cmp.w	r9, #0
 80076ae:	f280 8494 	bge.w	8007fda <__ieee754_pow+0xa12>
 80076b2:	496a      	ldr	r1, [pc, #424]	@ (800785c <__ieee754_pow+0x294>)
 80076b4:	4632      	mov	r2, r6
 80076b6:	463b      	mov	r3, r7
 80076b8:	2000      	movs	r0, #0
 80076ba:	f7f9 f86b 	bl	8000794 <__aeabi_ddiv>
 80076be:	e7a0      	b.n	8007602 <__ieee754_pow+0x3a>
 80076c0:	2400      	movs	r4, #0
 80076c2:	bbc1      	cbnz	r1, 8007736 <__ieee754_pow+0x16e>
 80076c4:	4a63      	ldr	r2, [pc, #396]	@ (8007854 <__ieee754_pow+0x28c>)
 80076c6:	4592      	cmp	sl, r2
 80076c8:	d1ec      	bne.n	80076a4 <__ieee754_pow+0xdc>
 80076ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80076ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80076d2:	431a      	orrs	r2, r3
 80076d4:	f000 8479 	beq.w	8007fca <__ieee754_pow+0xa02>
 80076d8:	4b61      	ldr	r3, [pc, #388]	@ (8007860 <__ieee754_pow+0x298>)
 80076da:	4598      	cmp	r8, r3
 80076dc:	d908      	bls.n	80076f0 <__ieee754_pow+0x128>
 80076de:	f1b9 0f00 	cmp.w	r9, #0
 80076e2:	f2c0 8476 	blt.w	8007fd2 <__ieee754_pow+0xa0a>
 80076e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076ea:	e78a      	b.n	8007602 <__ieee754_pow+0x3a>
 80076ec:	2402      	movs	r4, #2
 80076ee:	e7e8      	b.n	80076c2 <__ieee754_pow+0xfa>
 80076f0:	f1b9 0f00 	cmp.w	r9, #0
 80076f4:	f04f 0000 	mov.w	r0, #0
 80076f8:	f04f 0100 	mov.w	r1, #0
 80076fc:	da81      	bge.n	8007602 <__ieee754_pow+0x3a>
 80076fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007702:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007706:	e77c      	b.n	8007602 <__ieee754_pow+0x3a>
 8007708:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800770c:	d106      	bne.n	800771c <__ieee754_pow+0x154>
 800770e:	4632      	mov	r2, r6
 8007710:	463b      	mov	r3, r7
 8007712:	4630      	mov	r0, r6
 8007714:	4639      	mov	r1, r7
 8007716:	f7f8 ff13 	bl	8000540 <__aeabi_dmul>
 800771a:	e772      	b.n	8007602 <__ieee754_pow+0x3a>
 800771c:	4a51      	ldr	r2, [pc, #324]	@ (8007864 <__ieee754_pow+0x29c>)
 800771e:	4591      	cmp	r9, r2
 8007720:	d109      	bne.n	8007736 <__ieee754_pow+0x16e>
 8007722:	2d00      	cmp	r5, #0
 8007724:	db07      	blt.n	8007736 <__ieee754_pow+0x16e>
 8007726:	ec47 6b10 	vmov	d0, r6, r7
 800772a:	b011      	add	sp, #68	@ 0x44
 800772c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007730:	f7ff ba0e 	b.w	8006b50 <__ieee754_sqrt>
 8007734:	2400      	movs	r4, #0
 8007736:	ec47 6b10 	vmov	d0, r6, r7
 800773a:	9302      	str	r3, [sp, #8]
 800773c:	f7ff f9ec 	bl	8006b18 <fabs>
 8007740:	9b02      	ldr	r3, [sp, #8]
 8007742:	ec51 0b10 	vmov	r0, r1, d0
 8007746:	bb53      	cbnz	r3, 800779e <__ieee754_pow+0x1d6>
 8007748:	4b44      	ldr	r3, [pc, #272]	@ (800785c <__ieee754_pow+0x294>)
 800774a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800774e:	429a      	cmp	r2, r3
 8007750:	d002      	beq.n	8007758 <__ieee754_pow+0x190>
 8007752:	f1b8 0f00 	cmp.w	r8, #0
 8007756:	d122      	bne.n	800779e <__ieee754_pow+0x1d6>
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	da05      	bge.n	800776a <__ieee754_pow+0x1a2>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	2000      	movs	r0, #0
 8007764:	493d      	ldr	r1, [pc, #244]	@ (800785c <__ieee754_pow+0x294>)
 8007766:	f7f9 f815 	bl	8000794 <__aeabi_ddiv>
 800776a:	2d00      	cmp	r5, #0
 800776c:	f6bf af49 	bge.w	8007602 <__ieee754_pow+0x3a>
 8007770:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8007774:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007778:	ea58 0804 	orrs.w	r8, r8, r4
 800777c:	d108      	bne.n	8007790 <__ieee754_pow+0x1c8>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4610      	mov	r0, r2
 8007784:	4619      	mov	r1, r3
 8007786:	f7f8 fd23 	bl	80001d0 <__aeabi_dsub>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	e794      	b.n	80076ba <__ieee754_pow+0xf2>
 8007790:	2c01      	cmp	r4, #1
 8007792:	f47f af36 	bne.w	8007602 <__ieee754_pow+0x3a>
 8007796:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800779a:	4619      	mov	r1, r3
 800779c:	e731      	b.n	8007602 <__ieee754_pow+0x3a>
 800779e:	0feb      	lsrs	r3, r5, #31
 80077a0:	3b01      	subs	r3, #1
 80077a2:	ea53 0204 	orrs.w	r2, r3, r4
 80077a6:	d102      	bne.n	80077ae <__ieee754_pow+0x1e6>
 80077a8:	4632      	mov	r2, r6
 80077aa:	463b      	mov	r3, r7
 80077ac:	e7e9      	b.n	8007782 <__ieee754_pow+0x1ba>
 80077ae:	3c01      	subs	r4, #1
 80077b0:	431c      	orrs	r4, r3
 80077b2:	d016      	beq.n	80077e2 <__ieee754_pow+0x21a>
 80077b4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8007840 <__ieee754_pow+0x278>
 80077b8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80077bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077c0:	f240 8112 	bls.w	80079e8 <__ieee754_pow+0x420>
 80077c4:	4b28      	ldr	r3, [pc, #160]	@ (8007868 <__ieee754_pow+0x2a0>)
 80077c6:	459a      	cmp	sl, r3
 80077c8:	4b25      	ldr	r3, [pc, #148]	@ (8007860 <__ieee754_pow+0x298>)
 80077ca:	d916      	bls.n	80077fa <__ieee754_pow+0x232>
 80077cc:	4598      	cmp	r8, r3
 80077ce:	d80b      	bhi.n	80077e8 <__ieee754_pow+0x220>
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	da0b      	bge.n	80077ee <__ieee754_pow+0x226>
 80077d6:	2000      	movs	r0, #0
 80077d8:	b011      	add	sp, #68	@ 0x44
 80077da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077de:	f000 bceb 	b.w	80081b8 <__math_oflow>
 80077e2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8007848 <__ieee754_pow+0x280>
 80077e6:	e7e7      	b.n	80077b8 <__ieee754_pow+0x1f0>
 80077e8:	f1b9 0f00 	cmp.w	r9, #0
 80077ec:	dcf3      	bgt.n	80077d6 <__ieee754_pow+0x20e>
 80077ee:	2000      	movs	r0, #0
 80077f0:	b011      	add	sp, #68	@ 0x44
 80077f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f6:	f000 bcd7 	b.w	80081a8 <__math_uflow>
 80077fa:	4598      	cmp	r8, r3
 80077fc:	d20c      	bcs.n	8007818 <__ieee754_pow+0x250>
 80077fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	2300      	movs	r3, #0
 8007806:	f7f9 f90d 	bl	8000a24 <__aeabi_dcmplt>
 800780a:	3800      	subs	r0, #0
 800780c:	bf18      	it	ne
 800780e:	2001      	movne	r0, #1
 8007810:	f1b9 0f00 	cmp.w	r9, #0
 8007814:	daec      	bge.n	80077f0 <__ieee754_pow+0x228>
 8007816:	e7df      	b.n	80077d8 <__ieee754_pow+0x210>
 8007818:	4b10      	ldr	r3, [pc, #64]	@ (800785c <__ieee754_pow+0x294>)
 800781a:	4598      	cmp	r8, r3
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	d924      	bls.n	800786c <__ieee754_pow+0x2a4>
 8007822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007826:	2300      	movs	r3, #0
 8007828:	f7f9 f8fc 	bl	8000a24 <__aeabi_dcmplt>
 800782c:	3800      	subs	r0, #0
 800782e:	bf18      	it	ne
 8007830:	2001      	movne	r0, #1
 8007832:	f1b9 0f00 	cmp.w	r9, #0
 8007836:	dccf      	bgt.n	80077d8 <__ieee754_pow+0x210>
 8007838:	e7da      	b.n	80077f0 <__ieee754_pow+0x228>
 800783a:	bf00      	nop
 800783c:	f3af 8000 	nop.w
 8007840:	00000000 	.word	0x00000000
 8007844:	3ff00000 	.word	0x3ff00000
 8007848:	00000000 	.word	0x00000000
 800784c:	bff00000 	.word	0xbff00000
 8007850:	fff00000 	.word	0xfff00000
 8007854:	7ff00000 	.word	0x7ff00000
 8007858:	433fffff 	.word	0x433fffff
 800785c:	3ff00000 	.word	0x3ff00000
 8007860:	3fefffff 	.word	0x3fefffff
 8007864:	3fe00000 	.word	0x3fe00000
 8007868:	43f00000 	.word	0x43f00000
 800786c:	4b5a      	ldr	r3, [pc, #360]	@ (80079d8 <__ieee754_pow+0x410>)
 800786e:	f7f8 fcaf 	bl	80001d0 <__aeabi_dsub>
 8007872:	a351      	add	r3, pc, #324	@ (adr r3, 80079b8 <__ieee754_pow+0x3f0>)
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	4604      	mov	r4, r0
 800787a:	460d      	mov	r5, r1
 800787c:	f7f8 fe60 	bl	8000540 <__aeabi_dmul>
 8007880:	a34f      	add	r3, pc, #316	@ (adr r3, 80079c0 <__ieee754_pow+0x3f8>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	4606      	mov	r6, r0
 8007888:	460f      	mov	r7, r1
 800788a:	4620      	mov	r0, r4
 800788c:	4629      	mov	r1, r5
 800788e:	f7f8 fe57 	bl	8000540 <__aeabi_dmul>
 8007892:	4b52      	ldr	r3, [pc, #328]	@ (80079dc <__ieee754_pow+0x414>)
 8007894:	4682      	mov	sl, r0
 8007896:	468b      	mov	fp, r1
 8007898:	2200      	movs	r2, #0
 800789a:	4620      	mov	r0, r4
 800789c:	4629      	mov	r1, r5
 800789e:	f7f8 fe4f 	bl	8000540 <__aeabi_dmul>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	a148      	add	r1, pc, #288	@ (adr r1, 80079c8 <__ieee754_pow+0x400>)
 80078a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ac:	f7f8 fc90 	bl	80001d0 <__aeabi_dsub>
 80078b0:	4622      	mov	r2, r4
 80078b2:	462b      	mov	r3, r5
 80078b4:	f7f8 fe44 	bl	8000540 <__aeabi_dmul>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	2000      	movs	r0, #0
 80078be:	4948      	ldr	r1, [pc, #288]	@ (80079e0 <__ieee754_pow+0x418>)
 80078c0:	f7f8 fc86 	bl	80001d0 <__aeabi_dsub>
 80078c4:	4622      	mov	r2, r4
 80078c6:	4680      	mov	r8, r0
 80078c8:	4689      	mov	r9, r1
 80078ca:	462b      	mov	r3, r5
 80078cc:	4620      	mov	r0, r4
 80078ce:	4629      	mov	r1, r5
 80078d0:	f7f8 fe36 	bl	8000540 <__aeabi_dmul>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f8 fe30 	bl	8000540 <__aeabi_dmul>
 80078e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80079d0 <__ieee754_pow+0x408>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	f7f8 fe2b 	bl	8000540 <__aeabi_dmul>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	4650      	mov	r0, sl
 80078f0:	4659      	mov	r1, fp
 80078f2:	f7f8 fc6d 	bl	80001d0 <__aeabi_dsub>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4680      	mov	r8, r0
 80078fc:	4689      	mov	r9, r1
 80078fe:	4630      	mov	r0, r6
 8007900:	4639      	mov	r1, r7
 8007902:	f7f8 fc67 	bl	80001d4 <__adddf3>
 8007906:	2400      	movs	r4, #0
 8007908:	4632      	mov	r2, r6
 800790a:	463b      	mov	r3, r7
 800790c:	4620      	mov	r0, r4
 800790e:	460d      	mov	r5, r1
 8007910:	f7f8 fc5e 	bl	80001d0 <__aeabi_dsub>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4640      	mov	r0, r8
 800791a:	4649      	mov	r1, r9
 800791c:	f7f8 fc58 	bl	80001d0 <__aeabi_dsub>
 8007920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007924:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007928:	2300      	movs	r3, #0
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007930:	4606      	mov	r6, r0
 8007932:	460f      	mov	r7, r1
 8007934:	4652      	mov	r2, sl
 8007936:	465b      	mov	r3, fp
 8007938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800793c:	f7f8 fc48 	bl	80001d0 <__aeabi_dsub>
 8007940:	4622      	mov	r2, r4
 8007942:	462b      	mov	r3, r5
 8007944:	f7f8 fdfc 	bl	8000540 <__aeabi_dmul>
 8007948:	e9dd 2300 	ldrd	r2, r3, [sp]
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	4630      	mov	r0, r6
 8007952:	4639      	mov	r1, r7
 8007954:	f7f8 fdf4 	bl	8000540 <__aeabi_dmul>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4640      	mov	r0, r8
 800795e:	4649      	mov	r1, r9
 8007960:	f7f8 fc38 	bl	80001d4 <__adddf3>
 8007964:	4652      	mov	r2, sl
 8007966:	465b      	mov	r3, fp
 8007968:	4606      	mov	r6, r0
 800796a:	460f      	mov	r7, r1
 800796c:	4620      	mov	r0, r4
 800796e:	4629      	mov	r1, r5
 8007970:	f7f8 fde6 	bl	8000540 <__aeabi_dmul>
 8007974:	460b      	mov	r3, r1
 8007976:	4602      	mov	r2, r0
 8007978:	4680      	mov	r8, r0
 800797a:	4689      	mov	r9, r1
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	f7f8 fc28 	bl	80001d4 <__adddf3>
 8007984:	4b17      	ldr	r3, [pc, #92]	@ (80079e4 <__ieee754_pow+0x41c>)
 8007986:	4299      	cmp	r1, r3
 8007988:	4604      	mov	r4, r0
 800798a:	460d      	mov	r5, r1
 800798c:	468a      	mov	sl, r1
 800798e:	468b      	mov	fp, r1
 8007990:	f340 82ef 	ble.w	8007f72 <__ieee754_pow+0x9aa>
 8007994:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007998:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800799c:	4303      	orrs	r3, r0
 800799e:	f000 81e8 	beq.w	8007d72 <__ieee754_pow+0x7aa>
 80079a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	2300      	movs	r3, #0
 80079aa:	f7f9 f83b 	bl	8000a24 <__aeabi_dcmplt>
 80079ae:	3800      	subs	r0, #0
 80079b0:	bf18      	it	ne
 80079b2:	2001      	movne	r0, #1
 80079b4:	e710      	b.n	80077d8 <__ieee754_pow+0x210>
 80079b6:	bf00      	nop
 80079b8:	60000000 	.word	0x60000000
 80079bc:	3ff71547 	.word	0x3ff71547
 80079c0:	f85ddf44 	.word	0xf85ddf44
 80079c4:	3e54ae0b 	.word	0x3e54ae0b
 80079c8:	55555555 	.word	0x55555555
 80079cc:	3fd55555 	.word	0x3fd55555
 80079d0:	652b82fe 	.word	0x652b82fe
 80079d4:	3ff71547 	.word	0x3ff71547
 80079d8:	3ff00000 	.word	0x3ff00000
 80079dc:	3fd00000 	.word	0x3fd00000
 80079e0:	3fe00000 	.word	0x3fe00000
 80079e4:	408fffff 	.word	0x408fffff
 80079e8:	4bd5      	ldr	r3, [pc, #852]	@ (8007d40 <__ieee754_pow+0x778>)
 80079ea:	402b      	ands	r3, r5
 80079ec:	2200      	movs	r2, #0
 80079ee:	b92b      	cbnz	r3, 80079fc <__ieee754_pow+0x434>
 80079f0:	4bd4      	ldr	r3, [pc, #848]	@ (8007d44 <__ieee754_pow+0x77c>)
 80079f2:	f7f8 fda5 	bl	8000540 <__aeabi_dmul>
 80079f6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80079fa:	468b      	mov	fp, r1
 80079fc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007a00:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007a04:	4413      	add	r3, r2
 8007a06:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a08:	4bcf      	ldr	r3, [pc, #828]	@ (8007d48 <__ieee754_pow+0x780>)
 8007a0a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007a0e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007a12:	459b      	cmp	fp, r3
 8007a14:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007a18:	dd08      	ble.n	8007a2c <__ieee754_pow+0x464>
 8007a1a:	4bcc      	ldr	r3, [pc, #816]	@ (8007d4c <__ieee754_pow+0x784>)
 8007a1c:	459b      	cmp	fp, r3
 8007a1e:	f340 81a5 	ble.w	8007d6c <__ieee754_pow+0x7a4>
 8007a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a24:	3301      	adds	r3, #1
 8007a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a28:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007a2c:	f04f 0a00 	mov.w	sl, #0
 8007a30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007a34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a36:	4bc6      	ldr	r3, [pc, #792]	@ (8007d50 <__ieee754_pow+0x788>)
 8007a38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a3c:	ed93 7b00 	vldr	d7, [r3]
 8007a40:	4629      	mov	r1, r5
 8007a42:	ec53 2b17 	vmov	r2, r3, d7
 8007a46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a4e:	f7f8 fbbf 	bl	80001d0 <__aeabi_dsub>
 8007a52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a56:	4606      	mov	r6, r0
 8007a58:	460f      	mov	r7, r1
 8007a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a5e:	f7f8 fbb9 	bl	80001d4 <__adddf3>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	2000      	movs	r0, #0
 8007a68:	49ba      	ldr	r1, [pc, #744]	@ (8007d54 <__ieee754_pow+0x78c>)
 8007a6a:	f7f8 fe93 	bl	8000794 <__aeabi_ddiv>
 8007a6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4630      	mov	r0, r6
 8007a78:	4639      	mov	r1, r7
 8007a7a:	f7f8 fd61 	bl	8000540 <__aeabi_dmul>
 8007a7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a82:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007a86:	106d      	asrs	r5, r5, #1
 8007a88:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007a8c:	f04f 0b00 	mov.w	fp, #0
 8007a90:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007a94:	4661      	mov	r1, ip
 8007a96:	2200      	movs	r2, #0
 8007a98:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007a9c:	4658      	mov	r0, fp
 8007a9e:	46e1      	mov	r9, ip
 8007aa0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	461d      	mov	r5, r3
 8007aa8:	f7f8 fd4a 	bl	8000540 <__aeabi_dmul>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	4639      	mov	r1, r7
 8007ab4:	f7f8 fb8c 	bl	80001d0 <__aeabi_dsub>
 8007ab8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007abc:	4606      	mov	r6, r0
 8007abe:	460f      	mov	r7, r1
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	f7f8 fb84 	bl	80001d0 <__aeabi_dsub>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ad0:	f7f8 fb7e 	bl	80001d0 <__aeabi_dsub>
 8007ad4:	465a      	mov	r2, fp
 8007ad6:	464b      	mov	r3, r9
 8007ad8:	f7f8 fd32 	bl	8000540 <__aeabi_dmul>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f8 fb74 	bl	80001d0 <__aeabi_dsub>
 8007ae8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007aec:	f7f8 fd28 	bl	8000540 <__aeabi_dmul>
 8007af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007af4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007af8:	4610      	mov	r0, r2
 8007afa:	4619      	mov	r1, r3
 8007afc:	f7f8 fd20 	bl	8000540 <__aeabi_dmul>
 8007b00:	a37d      	add	r3, pc, #500	@ (adr r3, 8007cf8 <__ieee754_pow+0x730>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	4604      	mov	r4, r0
 8007b08:	460d      	mov	r5, r1
 8007b0a:	f7f8 fd19 	bl	8000540 <__aeabi_dmul>
 8007b0e:	a37c      	add	r3, pc, #496	@ (adr r3, 8007d00 <__ieee754_pow+0x738>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f7f8 fb5e 	bl	80001d4 <__adddf3>
 8007b18:	4622      	mov	r2, r4
 8007b1a:	462b      	mov	r3, r5
 8007b1c:	f7f8 fd10 	bl	8000540 <__aeabi_dmul>
 8007b20:	a379      	add	r3, pc, #484	@ (adr r3, 8007d08 <__ieee754_pow+0x740>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	f7f8 fb55 	bl	80001d4 <__adddf3>
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	f7f8 fd07 	bl	8000540 <__aeabi_dmul>
 8007b32:	a377      	add	r3, pc, #476	@ (adr r3, 8007d10 <__ieee754_pow+0x748>)
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f7f8 fb4c 	bl	80001d4 <__adddf3>
 8007b3c:	4622      	mov	r2, r4
 8007b3e:	462b      	mov	r3, r5
 8007b40:	f7f8 fcfe 	bl	8000540 <__aeabi_dmul>
 8007b44:	a374      	add	r3, pc, #464	@ (adr r3, 8007d18 <__ieee754_pow+0x750>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fb43 	bl	80001d4 <__adddf3>
 8007b4e:	4622      	mov	r2, r4
 8007b50:	462b      	mov	r3, r5
 8007b52:	f7f8 fcf5 	bl	8000540 <__aeabi_dmul>
 8007b56:	a372      	add	r3, pc, #456	@ (adr r3, 8007d20 <__ieee754_pow+0x758>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f7f8 fb3a 	bl	80001d4 <__adddf3>
 8007b60:	4622      	mov	r2, r4
 8007b62:	4606      	mov	r6, r0
 8007b64:	460f      	mov	r7, r1
 8007b66:	462b      	mov	r3, r5
 8007b68:	4620      	mov	r0, r4
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	f7f8 fce8 	bl	8000540 <__aeabi_dmul>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4630      	mov	r0, r6
 8007b76:	4639      	mov	r1, r7
 8007b78:	f7f8 fce2 	bl	8000540 <__aeabi_dmul>
 8007b7c:	465a      	mov	r2, fp
 8007b7e:	4604      	mov	r4, r0
 8007b80:	460d      	mov	r5, r1
 8007b82:	464b      	mov	r3, r9
 8007b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b88:	f7f8 fb24 	bl	80001d4 <__adddf3>
 8007b8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b90:	f7f8 fcd6 	bl	8000540 <__aeabi_dmul>
 8007b94:	4622      	mov	r2, r4
 8007b96:	462b      	mov	r3, r5
 8007b98:	f7f8 fb1c 	bl	80001d4 <__adddf3>
 8007b9c:	465a      	mov	r2, fp
 8007b9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	4658      	mov	r0, fp
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	f7f8 fcca 	bl	8000540 <__aeabi_dmul>
 8007bac:	4b6a      	ldr	r3, [pc, #424]	@ (8007d58 <__ieee754_pow+0x790>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	460f      	mov	r7, r1
 8007bb4:	f7f8 fb0e 	bl	80001d4 <__adddf3>
 8007bb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bbc:	f7f8 fb0a 	bl	80001d4 <__adddf3>
 8007bc0:	46d8      	mov	r8, fp
 8007bc2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007bc6:	460d      	mov	r5, r1
 8007bc8:	465a      	mov	r2, fp
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4640      	mov	r0, r8
 8007bce:	4649      	mov	r1, r9
 8007bd0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007bd4:	f7f8 fcb4 	bl	8000540 <__aeabi_dmul>
 8007bd8:	465c      	mov	r4, fp
 8007bda:	4680      	mov	r8, r0
 8007bdc:	4689      	mov	r9, r1
 8007bde:	4b5e      	ldr	r3, [pc, #376]	@ (8007d58 <__ieee754_pow+0x790>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	4620      	mov	r0, r4
 8007be4:	4629      	mov	r1, r5
 8007be6:	f7f8 faf3 	bl	80001d0 <__aeabi_dsub>
 8007bea:	4632      	mov	r2, r6
 8007bec:	463b      	mov	r3, r7
 8007bee:	f7f8 faef 	bl	80001d0 <__aeabi_dsub>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bfa:	f7f8 fae9 	bl	80001d0 <__aeabi_dsub>
 8007bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c02:	f7f8 fc9d 	bl	8000540 <__aeabi_dmul>
 8007c06:	4622      	mov	r2, r4
 8007c08:	4606      	mov	r6, r0
 8007c0a:	460f      	mov	r7, r1
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c12:	f7f8 fc95 	bl	8000540 <__aeabi_dmul>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	f7f8 fad9 	bl	80001d4 <__adddf3>
 8007c22:	4606      	mov	r6, r0
 8007c24:	460f      	mov	r7, r1
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	f7f8 fad1 	bl	80001d4 <__adddf3>
 8007c32:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007c36:	a33c      	add	r3, pc, #240	@ (adr r3, 8007d28 <__ieee754_pow+0x760>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	4658      	mov	r0, fp
 8007c3e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007c42:	460d      	mov	r5, r1
 8007c44:	f7f8 fc7c 	bl	8000540 <__aeabi_dmul>
 8007c48:	465c      	mov	r4, fp
 8007c4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c4e:	4642      	mov	r2, r8
 8007c50:	464b      	mov	r3, r9
 8007c52:	4620      	mov	r0, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	f7f8 fabb 	bl	80001d0 <__aeabi_dsub>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4630      	mov	r0, r6
 8007c60:	4639      	mov	r1, r7
 8007c62:	f7f8 fab5 	bl	80001d0 <__aeabi_dsub>
 8007c66:	a332      	add	r3, pc, #200	@ (adr r3, 8007d30 <__ieee754_pow+0x768>)
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f7f8 fc68 	bl	8000540 <__aeabi_dmul>
 8007c70:	a331      	add	r3, pc, #196	@ (adr r3, 8007d38 <__ieee754_pow+0x770>)
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	4606      	mov	r6, r0
 8007c78:	460f      	mov	r7, r1
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f7f8 fc5f 	bl	8000540 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	f7f8 faa3 	bl	80001d4 <__adddf3>
 8007c8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c90:	4b32      	ldr	r3, [pc, #200]	@ (8007d5c <__ieee754_pow+0x794>)
 8007c92:	4413      	add	r3, r2
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	f7f8 fa9c 	bl	80001d4 <__adddf3>
 8007c9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ca0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ca2:	f7f8 fbe3 	bl	800046c <__aeabi_i2d>
 8007ca6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8007d60 <__ieee754_pow+0x798>)
 8007caa:	4413      	add	r3, r2
 8007cac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cb6:	460f      	mov	r7, r1
 8007cb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cbc:	f7f8 fa8a 	bl	80001d4 <__adddf3>
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	f7f8 fa86 	bl	80001d4 <__adddf3>
 8007cc8:	4632      	mov	r2, r6
 8007cca:	463b      	mov	r3, r7
 8007ccc:	f7f8 fa82 	bl	80001d4 <__adddf3>
 8007cd0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	4658      	mov	r0, fp
 8007cda:	460d      	mov	r5, r1
 8007cdc:	f7f8 fa78 	bl	80001d0 <__aeabi_dsub>
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	f7f8 fa74 	bl	80001d0 <__aeabi_dsub>
 8007ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cec:	f7f8 fa70 	bl	80001d0 <__aeabi_dsub>
 8007cf0:	465c      	mov	r4, fp
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	e036      	b.n	8007d64 <__ieee754_pow+0x79c>
 8007cf6:	bf00      	nop
 8007cf8:	4a454eef 	.word	0x4a454eef
 8007cfc:	3fca7e28 	.word	0x3fca7e28
 8007d00:	93c9db65 	.word	0x93c9db65
 8007d04:	3fcd864a 	.word	0x3fcd864a
 8007d08:	a91d4101 	.word	0xa91d4101
 8007d0c:	3fd17460 	.word	0x3fd17460
 8007d10:	518f264d 	.word	0x518f264d
 8007d14:	3fd55555 	.word	0x3fd55555
 8007d18:	db6fabff 	.word	0xdb6fabff
 8007d1c:	3fdb6db6 	.word	0x3fdb6db6
 8007d20:	33333303 	.word	0x33333303
 8007d24:	3fe33333 	.word	0x3fe33333
 8007d28:	e0000000 	.word	0xe0000000
 8007d2c:	3feec709 	.word	0x3feec709
 8007d30:	dc3a03fd 	.word	0xdc3a03fd
 8007d34:	3feec709 	.word	0x3feec709
 8007d38:	145b01f5 	.word	0x145b01f5
 8007d3c:	be3e2fe0 	.word	0xbe3e2fe0
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	43400000 	.word	0x43400000
 8007d48:	0003988e 	.word	0x0003988e
 8007d4c:	000bb679 	.word	0x000bb679
 8007d50:	08008340 	.word	0x08008340
 8007d54:	3ff00000 	.word	0x3ff00000
 8007d58:	40080000 	.word	0x40080000
 8007d5c:	08008320 	.word	0x08008320
 8007d60:	08008330 	.word	0x08008330
 8007d64:	460b      	mov	r3, r1
 8007d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d6a:	e5d7      	b.n	800791c <__ieee754_pow+0x354>
 8007d6c:	f04f 0a01 	mov.w	sl, #1
 8007d70:	e65e      	b.n	8007a30 <__ieee754_pow+0x468>
 8007d72:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008044 <__ieee754_pow+0xa7c>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 fa2a 	bl	80001d4 <__adddf3>
 8007d80:	4642      	mov	r2, r8
 8007d82:	e9cd 0100 	strd	r0, r1, [sp]
 8007d86:	464b      	mov	r3, r9
 8007d88:	4620      	mov	r0, r4
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	f7f8 fa20 	bl	80001d0 <__aeabi_dsub>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d98:	f7f8 fe62 	bl	8000a60 <__aeabi_dcmpgt>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	f47f ae00 	bne.w	80079a2 <__ieee754_pow+0x3da>
 8007da2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8007da6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007daa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007dae:	fa43 fa0a 	asr.w	sl, r3, sl
 8007db2:	44da      	add	sl, fp
 8007db4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007db8:	489d      	ldr	r0, [pc, #628]	@ (8008030 <__ieee754_pow+0xa68>)
 8007dba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007dbe:	4108      	asrs	r0, r1
 8007dc0:	ea00 030a 	and.w	r3, r0, sl
 8007dc4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007dc8:	f1c1 0114 	rsb	r1, r1, #20
 8007dcc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007dd0:	fa4a fa01 	asr.w	sl, sl, r1
 8007dd4:	f1bb 0f00 	cmp.w	fp, #0
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4649      	mov	r1, r9
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	bfb8      	it	lt
 8007de2:	f1ca 0a00 	rsblt	sl, sl, #0
 8007de6:	f7f8 f9f3 	bl	80001d0 <__aeabi_dsub>
 8007dea:	4680      	mov	r8, r0
 8007dec:	4689      	mov	r9, r1
 8007dee:	4632      	mov	r2, r6
 8007df0:	463b      	mov	r3, r7
 8007df2:	4640      	mov	r0, r8
 8007df4:	4649      	mov	r1, r9
 8007df6:	f7f8 f9ed 	bl	80001d4 <__adddf3>
 8007dfa:	2400      	movs	r4, #0
 8007dfc:	a37c      	add	r3, pc, #496	@ (adr r3, 8007ff0 <__ieee754_pow+0xa28>)
 8007dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e02:	4620      	mov	r0, r4
 8007e04:	460d      	mov	r5, r1
 8007e06:	f7f8 fb9b 	bl	8000540 <__aeabi_dmul>
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e10:	464b      	mov	r3, r9
 8007e12:	4620      	mov	r0, r4
 8007e14:	4629      	mov	r1, r5
 8007e16:	f7f8 f9db 	bl	80001d0 <__aeabi_dsub>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4630      	mov	r0, r6
 8007e20:	4639      	mov	r1, r7
 8007e22:	f7f8 f9d5 	bl	80001d0 <__aeabi_dsub>
 8007e26:	a374      	add	r3, pc, #464	@ (adr r3, 8007ff8 <__ieee754_pow+0xa30>)
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f7f8 fb88 	bl	8000540 <__aeabi_dmul>
 8007e30:	a373      	add	r3, pc, #460	@ (adr r3, 8008000 <__ieee754_pow+0xa38>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	4680      	mov	r8, r0
 8007e38:	4689      	mov	r9, r1
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 fb7f 	bl	8000540 <__aeabi_dmul>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4640      	mov	r0, r8
 8007e48:	4649      	mov	r1, r9
 8007e4a:	f7f8 f9c3 	bl	80001d4 <__adddf3>
 8007e4e:	4604      	mov	r4, r0
 8007e50:	460d      	mov	r5, r1
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e5a:	f7f8 f9bb 	bl	80001d4 <__adddf3>
 8007e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e62:	4680      	mov	r8, r0
 8007e64:	4689      	mov	r9, r1
 8007e66:	f7f8 f9b3 	bl	80001d0 <__aeabi_dsub>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4620      	mov	r0, r4
 8007e70:	4629      	mov	r1, r5
 8007e72:	f7f8 f9ad 	bl	80001d0 <__aeabi_dsub>
 8007e76:	4642      	mov	r2, r8
 8007e78:	4606      	mov	r6, r0
 8007e7a:	460f      	mov	r7, r1
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 fb5d 	bl	8000540 <__aeabi_dmul>
 8007e86:	a360      	add	r3, pc, #384	@ (adr r3, 8008008 <__ieee754_pow+0xa40>)
 8007e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	460d      	mov	r5, r1
 8007e90:	f7f8 fb56 	bl	8000540 <__aeabi_dmul>
 8007e94:	a35e      	add	r3, pc, #376	@ (adr r3, 8008010 <__ieee754_pow+0xa48>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f7f8 f999 	bl	80001d0 <__aeabi_dsub>
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	f7f8 fb4d 	bl	8000540 <__aeabi_dmul>
 8007ea6:	a35c      	add	r3, pc, #368	@ (adr r3, 8008018 <__ieee754_pow+0xa50>)
 8007ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eac:	f7f8 f992 	bl	80001d4 <__adddf3>
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	f7f8 fb44 	bl	8000540 <__aeabi_dmul>
 8007eb8:	a359      	add	r3, pc, #356	@ (adr r3, 8008020 <__ieee754_pow+0xa58>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 f987 	bl	80001d0 <__aeabi_dsub>
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	f7f8 fb3b 	bl	8000540 <__aeabi_dmul>
 8007eca:	a357      	add	r3, pc, #348	@ (adr r3, 8008028 <__ieee754_pow+0xa60>)
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	f7f8 f980 	bl	80001d4 <__adddf3>
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	f7f8 fb32 	bl	8000540 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 f974 	bl	80001d0 <__aeabi_dsub>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 fb24 	bl	8000540 <__aeabi_dmul>
 8007ef8:	2200      	movs	r2, #0
 8007efa:	e9cd 0100 	strd	r0, r1, [sp]
 8007efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f02:	4620      	mov	r0, r4
 8007f04:	4629      	mov	r1, r5
 8007f06:	f7f8 f963 	bl	80001d0 <__aeabi_dsub>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f12:	f7f8 fc3f 	bl	8000794 <__aeabi_ddiv>
 8007f16:	4632      	mov	r2, r6
 8007f18:	4604      	mov	r4, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	4640      	mov	r0, r8
 8007f20:	4649      	mov	r1, r9
 8007f22:	f7f8 fb0d 	bl	8000540 <__aeabi_dmul>
 8007f26:	4632      	mov	r2, r6
 8007f28:	463b      	mov	r3, r7
 8007f2a:	f7f8 f953 	bl	80001d4 <__adddf3>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4620      	mov	r0, r4
 8007f34:	4629      	mov	r1, r5
 8007f36:	f7f8 f94b 	bl	80001d0 <__aeabi_dsub>
 8007f3a:	4642      	mov	r2, r8
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	f7f8 f947 	bl	80001d0 <__aeabi_dsub>
 8007f42:	460b      	mov	r3, r1
 8007f44:	4602      	mov	r2, r0
 8007f46:	493b      	ldr	r1, [pc, #236]	@ (8008034 <__ieee754_pow+0xa6c>)
 8007f48:	2000      	movs	r0, #0
 8007f4a:	f7f8 f941 	bl	80001d0 <__aeabi_dsub>
 8007f4e:	ec41 0b10 	vmov	d0, r0, r1
 8007f52:	ee10 3a90 	vmov	r3, s1
 8007f56:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f5e:	da30      	bge.n	8007fc2 <__ieee754_pow+0x9fa>
 8007f60:	4650      	mov	r0, sl
 8007f62:	f000 f875 	bl	8008050 <scalbn>
 8007f66:	ec51 0b10 	vmov	r0, r1, d0
 8007f6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f6e:	f7ff bbd2 	b.w	8007716 <__ieee754_pow+0x14e>
 8007f72:	4c31      	ldr	r4, [pc, #196]	@ (8008038 <__ieee754_pow+0xa70>)
 8007f74:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007f78:	42a3      	cmp	r3, r4
 8007f7a:	d91a      	bls.n	8007fb2 <__ieee754_pow+0x9ea>
 8007f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800803c <__ieee754_pow+0xa74>)
 8007f7e:	440b      	add	r3, r1
 8007f80:	4303      	orrs	r3, r0
 8007f82:	d009      	beq.n	8007f98 <__ieee754_pow+0x9d0>
 8007f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f7f8 fd4a 	bl	8000a24 <__aeabi_dcmplt>
 8007f90:	3800      	subs	r0, #0
 8007f92:	bf18      	it	ne
 8007f94:	2001      	movne	r0, #1
 8007f96:	e42b      	b.n	80077f0 <__ieee754_pow+0x228>
 8007f98:	4642      	mov	r2, r8
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	f7f8 f918 	bl	80001d0 <__aeabi_dsub>
 8007fa0:	4632      	mov	r2, r6
 8007fa2:	463b      	mov	r3, r7
 8007fa4:	f7f8 fd52 	bl	8000a4c <__aeabi_dcmpge>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d1eb      	bne.n	8007f84 <__ieee754_pow+0x9bc>
 8007fac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800804c <__ieee754_pow+0xa84>
 8007fb0:	e6f7      	b.n	8007da2 <__ieee754_pow+0x7da>
 8007fb2:	469a      	mov	sl, r3
 8007fb4:	4b22      	ldr	r3, [pc, #136]	@ (8008040 <__ieee754_pow+0xa78>)
 8007fb6:	459a      	cmp	sl, r3
 8007fb8:	f63f aef3 	bhi.w	8007da2 <__ieee754_pow+0x7da>
 8007fbc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007fc0:	e715      	b.n	8007dee <__ieee754_pow+0x826>
 8007fc2:	ec51 0b10 	vmov	r0, r1, d0
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	e7cf      	b.n	8007f6a <__ieee754_pow+0x9a2>
 8007fca:	491a      	ldr	r1, [pc, #104]	@ (8008034 <__ieee754_pow+0xa6c>)
 8007fcc:	2000      	movs	r0, #0
 8007fce:	f7ff bb18 	b.w	8007602 <__ieee754_pow+0x3a>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	f7ff bb14 	b.w	8007602 <__ieee754_pow+0x3a>
 8007fda:	4630      	mov	r0, r6
 8007fdc:	4639      	mov	r1, r7
 8007fde:	f7ff bb10 	b.w	8007602 <__ieee754_pow+0x3a>
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	f7ff bb5e 	b.w	80076a4 <__ieee754_pow+0xdc>
 8007fe8:	2400      	movs	r4, #0
 8007fea:	f7ff bb49 	b.w	8007680 <__ieee754_pow+0xb8>
 8007fee:	bf00      	nop
 8007ff0:	00000000 	.word	0x00000000
 8007ff4:	3fe62e43 	.word	0x3fe62e43
 8007ff8:	fefa39ef 	.word	0xfefa39ef
 8007ffc:	3fe62e42 	.word	0x3fe62e42
 8008000:	0ca86c39 	.word	0x0ca86c39
 8008004:	be205c61 	.word	0xbe205c61
 8008008:	72bea4d0 	.word	0x72bea4d0
 800800c:	3e663769 	.word	0x3e663769
 8008010:	c5d26bf1 	.word	0xc5d26bf1
 8008014:	3ebbbd41 	.word	0x3ebbbd41
 8008018:	af25de2c 	.word	0xaf25de2c
 800801c:	3f11566a 	.word	0x3f11566a
 8008020:	16bebd93 	.word	0x16bebd93
 8008024:	3f66c16c 	.word	0x3f66c16c
 8008028:	5555553e 	.word	0x5555553e
 800802c:	3fc55555 	.word	0x3fc55555
 8008030:	fff00000 	.word	0xfff00000
 8008034:	3ff00000 	.word	0x3ff00000
 8008038:	4090cbff 	.word	0x4090cbff
 800803c:	3f6f3400 	.word	0x3f6f3400
 8008040:	3fe00000 	.word	0x3fe00000
 8008044:	652b82fe 	.word	0x652b82fe
 8008048:	3c971547 	.word	0x3c971547
 800804c:	4090cc00 	.word	0x4090cc00

08008050 <scalbn>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	ec55 4b10 	vmov	r4, r5, d0
 8008056:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800805a:	4606      	mov	r6, r0
 800805c:	462b      	mov	r3, r5
 800805e:	b991      	cbnz	r1, 8008086 <scalbn+0x36>
 8008060:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008064:	4323      	orrs	r3, r4
 8008066:	d03d      	beq.n	80080e4 <scalbn+0x94>
 8008068:	4b35      	ldr	r3, [pc, #212]	@ (8008140 <scalbn+0xf0>)
 800806a:	4620      	mov	r0, r4
 800806c:	4629      	mov	r1, r5
 800806e:	2200      	movs	r2, #0
 8008070:	f7f8 fa66 	bl	8000540 <__aeabi_dmul>
 8008074:	4b33      	ldr	r3, [pc, #204]	@ (8008144 <scalbn+0xf4>)
 8008076:	429e      	cmp	r6, r3
 8008078:	4604      	mov	r4, r0
 800807a:	460d      	mov	r5, r1
 800807c:	da0f      	bge.n	800809e <scalbn+0x4e>
 800807e:	a328      	add	r3, pc, #160	@ (adr r3, 8008120 <scalbn+0xd0>)
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	e01e      	b.n	80080c4 <scalbn+0x74>
 8008086:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800808a:	4291      	cmp	r1, r2
 800808c:	d10b      	bne.n	80080a6 <scalbn+0x56>
 800808e:	4622      	mov	r2, r4
 8008090:	4620      	mov	r0, r4
 8008092:	4629      	mov	r1, r5
 8008094:	f7f8 f89e 	bl	80001d4 <__adddf3>
 8008098:	4604      	mov	r4, r0
 800809a:	460d      	mov	r5, r1
 800809c:	e022      	b.n	80080e4 <scalbn+0x94>
 800809e:	460b      	mov	r3, r1
 80080a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80080a4:	3936      	subs	r1, #54	@ 0x36
 80080a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80080aa:	4296      	cmp	r6, r2
 80080ac:	dd0d      	ble.n	80080ca <scalbn+0x7a>
 80080ae:	2d00      	cmp	r5, #0
 80080b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008128 <scalbn+0xd8>)
 80080b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b6:	da02      	bge.n	80080be <scalbn+0x6e>
 80080b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008130 <scalbn+0xe0>)
 80080ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080be:	a31a      	add	r3, pc, #104	@ (adr r3, 8008128 <scalbn+0xd8>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	f7f8 fa3c 	bl	8000540 <__aeabi_dmul>
 80080c8:	e7e6      	b.n	8008098 <scalbn+0x48>
 80080ca:	1872      	adds	r2, r6, r1
 80080cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80080d0:	428a      	cmp	r2, r1
 80080d2:	dcec      	bgt.n	80080ae <scalbn+0x5e>
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	dd08      	ble.n	80080ea <scalbn+0x9a>
 80080d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80080dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80080e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080e4:	ec45 4b10 	vmov	d0, r4, r5
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
 80080ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80080ee:	da08      	bge.n	8008102 <scalbn+0xb2>
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	a10b      	add	r1, pc, #44	@ (adr r1, 8008120 <scalbn+0xd0>)
 80080f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080f8:	dac1      	bge.n	800807e <scalbn+0x2e>
 80080fa:	a10f      	add	r1, pc, #60	@ (adr r1, 8008138 <scalbn+0xe8>)
 80080fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008100:	e7bd      	b.n	800807e <scalbn+0x2e>
 8008102:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008106:	3236      	adds	r2, #54	@ 0x36
 8008108:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800810c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008110:	4620      	mov	r0, r4
 8008112:	4b0d      	ldr	r3, [pc, #52]	@ (8008148 <scalbn+0xf8>)
 8008114:	4629      	mov	r1, r5
 8008116:	2200      	movs	r2, #0
 8008118:	e7d4      	b.n	80080c4 <scalbn+0x74>
 800811a:	bf00      	nop
 800811c:	f3af 8000 	nop.w
 8008120:	c2f8f359 	.word	0xc2f8f359
 8008124:	01a56e1f 	.word	0x01a56e1f
 8008128:	8800759c 	.word	0x8800759c
 800812c:	7e37e43c 	.word	0x7e37e43c
 8008130:	8800759c 	.word	0x8800759c
 8008134:	fe37e43c 	.word	0xfe37e43c
 8008138:	c2f8f359 	.word	0xc2f8f359
 800813c:	81a56e1f 	.word	0x81a56e1f
 8008140:	43500000 	.word	0x43500000
 8008144:	ffff3cb0 	.word	0xffff3cb0
 8008148:	3c900000 	.word	0x3c900000

0800814c <with_errno>:
 800814c:	b510      	push	{r4, lr}
 800814e:	ed2d 8b02 	vpush	{d8}
 8008152:	eeb0 8a40 	vmov.f32	s16, s0
 8008156:	eef0 8a60 	vmov.f32	s17, s1
 800815a:	4604      	mov	r4, r0
 800815c:	f7fe fa16 	bl	800658c <__errno>
 8008160:	eeb0 0a48 	vmov.f32	s0, s16
 8008164:	eef0 0a68 	vmov.f32	s1, s17
 8008168:	ecbd 8b02 	vpop	{d8}
 800816c:	6004      	str	r4, [r0, #0]
 800816e:	bd10      	pop	{r4, pc}

08008170 <xflow>:
 8008170:	4603      	mov	r3, r0
 8008172:	b507      	push	{r0, r1, r2, lr}
 8008174:	ec51 0b10 	vmov	r0, r1, d0
 8008178:	b183      	cbz	r3, 800819c <xflow+0x2c>
 800817a:	4602      	mov	r2, r0
 800817c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008180:	e9cd 2300 	strd	r2, r3, [sp]
 8008184:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008188:	f7f8 f9da 	bl	8000540 <__aeabi_dmul>
 800818c:	ec41 0b10 	vmov	d0, r0, r1
 8008190:	2022      	movs	r0, #34	@ 0x22
 8008192:	b003      	add	sp, #12
 8008194:	f85d eb04 	ldr.w	lr, [sp], #4
 8008198:	f7ff bfd8 	b.w	800814c <with_errno>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	e7ee      	b.n	8008180 <xflow+0x10>
 80081a2:	0000      	movs	r0, r0
 80081a4:	0000      	movs	r0, r0
	...

080081a8 <__math_uflow>:
 80081a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80081b0 <__math_uflow+0x8>
 80081ac:	f7ff bfe0 	b.w	8008170 <xflow>
 80081b0:	00000000 	.word	0x00000000
 80081b4:	10000000 	.word	0x10000000

080081b8 <__math_oflow>:
 80081b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80081c0 <__math_oflow+0x8>
 80081bc:	f7ff bfd8 	b.w	8008170 <xflow>
 80081c0:	00000000 	.word	0x00000000
 80081c4:	70000000 	.word	0x70000000

080081c8 <_init>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr

080081d4 <_fini>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr
